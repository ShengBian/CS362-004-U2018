The following is the result for running unit tests and card tests:
cardtest1.c:
----------------- Testing Card: council_room ----------------

TEST 1: player 1 draws 4 cards from deck
PASSED

TEST 2: player 1 has 3 more cards in hand
PASSED

TEST 3: player 1 buys increase by 1
PASSED

TEST 4: player 2 draws 1 card from deck
PASSED

TEST 5: player 2 has 1 more cards in hand
PASSED

 >>>>> SUCCESS: Testing complete council_room <<<<<

File 'dominion.c'
Lines executed:21.02% of 566
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void* a, const void* b) {
       30:    9:    if (*(int*)a > *(int*)b)
    #####:   10:        return 1;
       30:   11:    if (*(int*)a < *(int*)b)
        8:   12:        return -1;
       22:   13:    return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:
        -:   40:    int i;
        -:   41:    int j;
        -:   42:    int it;
        -:   43:    //set up random number generator
        1:   44:    SelectStream(1);
        1:   45:    PutSeed((long)randomSeed);
        -:   46:
        -:   47:    //check number of players
        1:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
        1:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
       11:   57:    for (i = 0; i < 10; i++)
        -:   58:    {
      110:   59:        for (j = 0; j < 10; j++)
        -:   60:        {
      100:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
        1:   73:    if (numPlayers == 2)
        -:   74:    {
        1:   75:        state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:    else if (numPlayers == 3)
        -:   78:    {
    #####:   79:        state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
        1:   87:    if (numPlayers == 2)
        -:   88:    {
        1:   89:        state->supplyCount[estate] = 8;
        1:   90:        state->supplyCount[duchy] = 8;
        1:   91:        state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:    else
        -:   94:    {
    #####:   95:        state->supplyCount[estate] = 12;
    #####:   96:        state->supplyCount[duchy] = 12;
    #####:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
        1:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:    state->supplyCount[silver] = 40;
        1:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
       21:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      165:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:        {
      155:  110:            if (kingdomCards[j] == i)
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
       10:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:                {
        4:  115:                    if (numPlayers == 2){
        2:  116:                        state->supplyCount[i] = 8;
        -:  117:                    }
    #####:  118:                    else{ state->supplyCount[i] = 12; }
        -:  119:                }
        -:  120:                else
        -:  121:                {
        8:  122:                    state->supplyCount[i] = 10;
        -:  123:                }
       10:  124:                break;
        -:  125:            }
        -:  126:            else    //card is not in the set choosen for the game
        -:  127:            {
      145:  128:                state->supplyCount[i] = -1;
        -:  129:            }
        -:  130:        }
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:    ////////////////////////
        -:  135:    //supply intilization complete
        -:  136:
        -:  137:    //set player decks
        3:  138:    for (i = 0; i < numPlayers; i++)
        -:  139:    {
        2:  140:        state->deckCount[i] = 0;
        8:  141:        for (j = 0; j < 3; j++)
        -:  142:        {
        6:  143:            state->deck[i][j] = estate;
        6:  144:            state->deckCount[i]++;
        -:  145:        }
       16:  146:        for (j = 3; j < 10; j++)
        -:  147:        {
       14:  148:            state->deck[i][j] = copper;
       14:  149:            state->deckCount[i]++;
        -:  150:        }
        -:  151:    }
        -:  152:
        -:  153:    //shuffle player decks
        3:  154:    for (i = 0; i < numPlayers; i++)
        -:  155:    {
        2:  156:        if ( shuffle(i, state) < 0 )
        -:  157:        {
    #####:  158:            return -1;
        -:  159:        }
        -:  160:    }
        -:  161:
        -:  162:    //draw player hands
        3:  163:    for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:        //initialize hand size to zero
        2:  166:        state->handCount[i] = 0;
        2:  167:        state->discardCount[i] = 0;
        -:  168:        //draw 5 cards
        -:  169:        // for (j = 0; j < 5; j++)
        -:  170:        //	{
        -:  171:        //	  drawCard(i, state);
        -:  172:        //	}
        -:  173:    }
        -:  174:
        -:  175:    //set embargo tokens to 0 for all supply piles
       28:  176:    for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       27:  178:        state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:    //initialize first player's turn
        1:  182:    state->outpostPlayed = 0;
        1:  183:    state->phase = 0;
        1:  184:    state->numActions = 1;
        1:  185:    state->numBuys = 1;
        1:  186:    state->playedCardCount = 0;
        1:  187:    state->whoseTurn = 0;
        1:  188:    state->handCount[state->whoseTurn] = 0;
        -:  189:    //int it; move to top
        -:  190:
        -:  191:    //Moved draw cards to here, only drawing at the start of a turn
        6:  192:    for (it = 0; it < 5; it++){
        5:  193:        drawCard(state->whoseTurn, state);
        -:  194:    }
        -:  195:
        1:  196:    updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:    return 0;
        -:  199:}
        -:  200:
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:    int newDeck[MAX_DECK];
        2:  205:    int newDeckPos = 0;
        -:  206:    int card;
        -:  207:    int i;
        -:  208:
        2:  209:    if (state->deckCount[player] < 1)
    #####:  210:        return -1;
        2:  211:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:    while (state->deckCount[player] > 0) {
       20:  215:        card = floor(Random() * state->deckCount[player]);
       20:  216:        newDeck[newDeckPos] = state->deck[player][card];
       20:  217:        newDeckPos++;
       70:  218:        for (i = card; i < state->deckCount[player]-1; i++) {
       50:  219:            state->deck[player][i] = state->deck[player][i+1];
        -:  220:        }
       20:  221:        state->deckCount[player]--;
        -:  222:    }
       22:  223:    for (i = 0; i < newDeckPos; i++) {
       20:  224:        state->deck[player][i] = newDeck[i];
       20:  225:        state->deckCount[player]++;
        -:  226:    }
        -:  227:
        2:  228:    return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:    int card;
    #####:  234:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:    //check if it is the right phase
    #####:  237:    if (state->phase != 0)
        -:  238:    {
    #####:  239:        return -1;
        -:  240:    }
        -:  241:
        -:  242:    //check if player has enough actions
    #####:  243:    if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:        return -1;
        -:  246:    }
        -:  247:
        -:  248:    //get card played
    #####:  249:    card = handCard(handPos, state);
        -:  250:
        -:  251:    //check if selected card is an action
    #####:  252:    if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:        return -1;
        -:  255:    }
        -:  256:
        -:  257:    //play card
    #####:  258:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:        return -1;
        -:  261:    }
        -:  262:
        -:  263:    //reduce number of actions
    #####:  264:    state->numActions--;
        -:  265:
        -:  266:    //update coins (Treasure cards may be added with card draws)
    #####:  267:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:    return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:    int who;
        -:  274:    if (DEBUG){
        -:  275:        printf("Entering buyCard...\n");
        -:  276:    }
        -:  277:
        -:  278:    // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:    who = state->whoseTurn;
        -:  281:
    #####:  282:    if (state->numBuys < 1){
        -:  283:        if (DEBUG)
        -:  284:            printf("You do not have any buys left\n");
    #####:  285:        return -1;
    #####:  286:    } else if (supplyCount(supplyPos, state) <1){
        -:  287:        if (DEBUG)
        -:  288:            printf("There are not any of that type of card left\n");
    #####:  289:        return -1;
    #####:  290:    } else if (state->coins < getCost(supplyPos)){
        -:  291:        if (DEBUG)
        -:  292:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:        return -1;
        -:  294:    } else {
    #####:  295:        state->phase=1;
        -:  296:        //state->supplyCount[supplyPos]--;
    #####:  297:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:        state->numBuys--;
        -:  301:        if (DEBUG)
        -:  302:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:    }
        -:  304:
        -:  305:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:    //state->discardCount[who]++;
        -:  307:
    #####:  308:    return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:    return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:    int currentPlayer = whoseTurn(state);
    #####:  317:    return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:    return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:    int i;
    #####:  326:    int count = 0;
        -:  327:
    #####:  328:    for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:        if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:    for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:        if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:    for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:        if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:    return count;
        -:  344:}
        -:  345:
        1:  346:int whoseTurn(struct gameState *state) {
        1:  347:    return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:    int k;
        -:  352:    int i;
    #####:  353:    int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:    //Discard hand
    #####:  356:    for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:    }
    #####:  360:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:    //Code for determining the player
    #####:  363:    if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:    }
        -:  366:    else{
    #####:  367:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:    }
        -:  369:
    #####:  370:    state->outpostPlayed = 0;
    #####:  371:    state->phase = 0;
    #####:  372:    state->numActions = 1;
    #####:  373:    state->coins = 0;
    #####:  374:    state->numBuys = 1;
    #####:  375:    state->playedCardCount = 0;
    #####:  376:    state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:    //int k; move to top
        -:  379:    //Next player draws hand
    #####:  380:    for (k = 0; k < 5; k++){
    #####:  381:        drawCard(state->whoseTurn, state);//Draw a card
        -:  382:    }
        -:  383:
        -:  384:    //Update money
    #####:  385:    updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:    return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:    int i;
        -:  392:    int j;
        -:  393:
        -:  394:    //if stack of Province cards is empty, the game ends
    #####:  395:    if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:        return 1;
        -:  398:    }
        -:  399:
        -:  400:    //if three supply pile are at 0, the game ends
    #####:  401:    j = 0;
    #####:  402:    for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:        if (state->supplyCount[i] == 0)
        -:  405:        {
    #####:  406:            j++;
        -:  407:        }
        -:  408:    }
    #####:  409:    if ( j >= 3)
        -:  410:    {
    #####:  411:        return 1;
        -:  412:    }
        -:  413:
    #####:  414:    return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:    int i;
    #####:  420:    int score = 0;
        -:  421:    //score from hand
    #####:  422:    for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:        if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:        if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:        if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:        if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:        if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:    //score from discard
    #####:  433:    for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:        if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:        if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:        if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:        if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:        if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:    //score from deck
    #####:  444:    for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:        if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:        if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:        if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:        if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:        if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:    return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:    int i;
        -:  459:    int j;
        -:  460:    int highScore;
        -:  461:    int currentPlayer;
        -:  462:
        -:  463:    //get score for each player
    #####:  464:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:        //set unused player scores to -9999
    #####:  467:        if (i >= state->numPlayers)
        -:  468:        {
    #####:  469:            players[i] = -9999;
        -:  470:        }
        -:  471:        else
        -:  472:        {
    #####:  473:            players[i] = scoreFor (i, state);
        -:  474:        }
        -:  475:    }
        -:  476:
        -:  477:    //find highest score
    #####:  478:    j = 0;
    #####:  479:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:        if (players[i] > players[j])
        -:  482:        {
    #####:  483:            j = i;
        -:  484:        }
        -:  485:    }
    #####:  486:    highScore = players[j];
        -:  487:
        -:  488:    //add 1 to players who had less turns
    #####:  489:    currentPlayer = whoseTurn(state);
    #####:  490:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:        if ( players[i] == highScore && i > currentPlayer )
        -:  493:        {
    #####:  494:            players[i]++;
        -:  495:        }
        -:  496:    }
        -:  497:
        -:  498:    //find new highest score
    #####:  499:    j = 0;
    #####:  500:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:        if ( players[i] > players[j] )
        -:  503:        {
    #####:  504:            j = i;
        -:  505:        }
        -:  506:    }
    #####:  507:    highScore = players[j];
        -:  508:
        -:  509:    //set winners in array to 1 and rest to 0
    #####:  510:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:        if ( players[i] == highScore )
        -:  513:        {
    #####:  514:            players[i] = 1;
        -:  515:        }
        -:  516:        else
        -:  517:        {
    #####:  518:            players[i] = 0;
        -:  519:        }
        -:  520:    }
        -:  521:
    #####:  522:    return 0;
        -:  523:}
        -:  524:
       10:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:    int deckCounter;
       10:  528:    if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:        //Step 1 Shuffle the discard pile back into a deck
        -:  531:        int i;
        -:  532:        //Move discard to deck
    #####:  533:        for (i = 0; i < state->discardCount[player];i++){
    #####:  534:            state->deck[player][i] = state->discard[player][i];
    #####:  535:            state->discard[player][i] = -1;
        -:  536:        }
        -:  537:
    #####:  538:        state->deckCount[player] = state->discardCount[player];
    #####:  539:        state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:        //Shufffle the deck
    #####:  542:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:        if (DEBUG){//Debug statements
        -:  545:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:        }
        -:  547:
    #####:  548:        state->discardCount[player] = 0;
        -:  549:
        -:  550:        //Step 2 Draw Card
    #####:  551:        count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:        if (DEBUG){//Debug statements
        -:  554:            printf("Current hand count: %d\n", count);
        -:  555:        }
        -:  556:
    #####:  557:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:        if (deckCounter == 0)
    #####:  560:            return -1;
        -:  561:
    #####:  562:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:        state->deckCount[player]--;
    #####:  564:        state->handCount[player]++;//Increment hand count
        -:  565:    }
        -:  566:
        -:  567:    else{
       10:  568:        int count = state->handCount[player];//Get current hand count for player
        -:  569:        int deckCounter;
        -:  570:        if (DEBUG){//Debug statements
        -:  571:            printf("Current hand count: %d\n", count);
        -:  572:        }
        -:  573:
       10:  574:        deckCounter = state->deckCount[player];//Create holder for the deck count
       10:  575:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       10:  576:        state->deckCount[player]--;
       10:  577:        state->handCount[player]++;//Increment hand count
        -:  578:    }
        -:  579:
       10:  580:    return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:    switch( cardNumber )
        -:  586:    {
        -:  587:        case curse:
    #####:  588:            return 0;
        -:  589:        case estate:
    #####:  590:            return 2;
        -:  591:        case duchy:
    #####:  592:            return 5;
        -:  593:        case province:
    #####:  594:            return 8;
        -:  595:        case copper:
    #####:  596:            return 0;
        -:  597:        case silver:
    #####:  598:            return 3;
        -:  599:        case gold:
    #####:  600:            return 6;
        -:  601:        case adventurer:
    #####:  602:            return 6;
        -:  603:        case council_room:
    #####:  604:            return 5;
        -:  605:        case feast:
    #####:  606:            return 4;
        -:  607:        case gardens:
    #####:  608:            return 4;
        -:  609:        case mine:
    #####:  610:            return 5;
        -:  611:        case remodel:
    #####:  612:            return 4;
        -:  613:        case smithy:
    #####:  614:            return 4;
        -:  615:        case village:
    #####:  616:            return 3;
        -:  617:        case baron:
    #####:  618:            return 4;
        -:  619:        case great_hall:
    #####:  620:            return 3;
        -:  621:        case minion:
    #####:  622:            return 5;
        -:  623:        case steward:
    #####:  624:            return 3;
        -:  625:        case tribute:
    #####:  626:            return 5;
        -:  627:        case ambassador:
    #####:  628:            return 3;
        -:  629:        case cutpurse:
    #####:  630:            return 4;
        -:  631:        case embargo:
    #####:  632:            return 2;
        -:  633:        case outpost:
    #####:  634:            return 5;
        -:  635:        case salvager:
    #####:  636:            return 4;
        -:  637:        case sea_hag:
    #####:  638:            return 4;
        -:  639:        case treasure_map:
    #####:  640:            return 4;
        -:  641:    }
        -:  642:
    #####:  643:    return -1;
        -:  644:}
        -:  645:
        -:  646:
        -:  647:
    #####:  648:int SmithyCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  649:
        -:  650:    //+3 Cards
        -:  651:    int i;
    #####:  652:    for (i = 0; i < 5; i++)
        -:  653:    {
    #####:  654:        drawCard(currentPlayer, state);
        -:  655:    }
        -:  656:
        -:  657:    //discard card from hand
        -:  658:    //discardCard(handPos, currentPlayer, state, 0);
    #####:  659:    return 0;
        -:  660://bug introduced: draw 5 cards instead of 3; do not discard a card
        -:  661:}
        -:  662:
        -:  663:
    #####:  664:int AdventurerCard(int currentPlayer, struct gameState *state, int drawntreasure, int temphand[], int cardDrawn, int z) {
        -:  665:
    #####:  666:    while(drawntreasure<5){
    #####:  667:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  668:            shuffle(currentPlayer, state);
        -:  669:        }
    #####:  670:        drawCard(currentPlayer, state);
    #####:  671:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  672:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  673:            drawntreasure++;
        -:  674:        else{
    #####:  675:            temphand[z]=cardDrawn;
    #####:  676:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  677:            z++;
        -:  678:        }
        -:  679:    }
    #####:  680:    while(z-1>=0){
    #####:  681:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  682:        z=z-1;
        -:  683:    }
    #####:  684:    return 0;
        -:  685:// bug introduced: player is able to draw 5 treasure cards instead of 2.
        -:  686:}
        -:  687:
        -:  688:
    #####:  689:int VillageCard(int currentPlayer, struct gameState *state, int handPos){
        -:  690:
        -:  691:    //+1 Card
    #####:  692:    drawCard(currentPlayer, state);
    #####:  693:    drawCard(currentPlayer, state);
    #####:  694:    drawCard(currentPlayer, state);
        -:  695:
        -:  696:    //+2 Actions
    #####:  697:    state->numActions = state->numActions + 10;
        -:  698:
        -:  699:    //discard played card from hand
    #####:  700:    discardCard(handPos, currentPlayer, state, 0);
    #####:  701:    return 0;
        -:  702:// bug introduced: increase action points by 10 instead of 2 and draw 3 cards instead of 1
        -:  703:}
        -:  704:
        -:  705:
    #####:  706:int GreatHallCard(int currentPlayer, struct gameState *state, int handPos){
        -:  707:    //+1 Card
    #####:  708:    drawCard(currentPlayer, state);
        -:  709:
        -:  710:    //+1 Actions
    #####:  711:    state->numActions++;
        -:  712:
        -:  713:    //discard card from hand
    #####:  714:    discardCard(handPos, currentPlayer, state, 0);
    #####:  715:    return 0;
        -:  716:}
        -:  717:
        -:  718:
    #####:  719:int EmbargoCard(int currentPlayer, int handPos, struct gameState *state, int choice1) {
        -:  720://+2 Coins
    #####:  721:    state->coins = state->coins + 20;
        -:  722:
        -:  723:    //see if selected pile is in play
    #####:  724:    if ( state->supplyCount[choice1] == -1 )
        -:  725:    {
    #####:  726:        return -1;
        -:  727:    }
        -:  728:
        -:  729:    //add embargo token to selected supply pile
    #####:  730:    state->embargoTokens[choice1]++;
    #####:  731:    state->embargoTokens[choice1]++;
        -:  732:
        -:  733:    //trash card
    #####:  734:    discardCard(handPos, currentPlayer, state, 1);
        -:  735:
        -:  736:
    #####:  737:    return 0;
        -:  738://bug introduced: increase state->coins by 20 instead of 2, and add 2 embargo tokens instead of one
        -:  739:}
        -:  740:
        -:  741:
        -:  742:
        1:  743:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  744:{
        -:  745:    int i;
        -:  746:    int j;
        -:  747:    int k;
        -:  748:    int x;
        -:  749:    int index;
        1:  750:    int currentPlayer = whoseTurn(state);
        1:  751:    int nextPlayer = currentPlayer + 1;
        -:  752:
        1:  753:    int tributeRevealedCards[2] = {-1, -1};
        -:  754:    int temphand[MAX_HAND];// moved above the if statement
        1:  755:    int drawntreasure=0;
        1:  756:    int cardDrawn=0;
        1:  757:    int z = 0;// this is the counter for the temp hand
        1:  758:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  759:        nextPlayer = 0;
        -:  760:    }
        -:  761:
        -:  762:
        -:  763:    //uses switch to select card and perform actions
        1:  764:    switch( card )
        -:  765:    {
        -:  766:        case adventurer:
        -:  767:
    #####:  768:            AdventurerCard(currentPlayer, state, drawntreasure, temphand, cardDrawn, z);
        -:  769:
    #####:  770:            return 0;
        -:  771:
        -:  772:        case council_room:
        -:  773:            //+4 Cards
        5:  774:            for (i = 0; i < 4; i++)
        -:  775:            {
        4:  776:                drawCard(currentPlayer, state);
        -:  777:            }
        -:  778:
        -:  779:            //+1 Buy
        1:  780:            state->numBuys++;
        -:  781:
        -:  782:            //Each other player draws a card
        3:  783:            for (i = 0; i < state->numPlayers; i++)
        -:  784:            {
        2:  785:                if ( i != currentPlayer )
        -:  786:                {
        1:  787:                    drawCard(i, state);
        -:  788:                }
        -:  789:            }
        -:  790:
        -:  791:            //put played card in played card pile
        1:  792:            discardCard(handPos, currentPlayer, state, 0);
        -:  793:
        1:  794:            return 0;
        -:  795:
        -:  796:        case feast:
        -:  797:            //gain card with cost up to 5
        -:  798:            //Backup hand
    #####:  799:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  800:                temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  801:                state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  802:            }
        -:  803:            //Backup hand
        -:  804:
        -:  805:            //Update Coins for Buy
    #####:  806:            updateCoins(currentPlayer, state, 5);
    #####:  807:            x = 1;//Condition to loop on
    #####:  808:            while( x == 1) {//Buy one card
    #####:  809:                if (supplyCount(choice1, state) <= 0){
        -:  810:                    if (DEBUG)
        -:  811:                        printf("None of that card left, sorry!\n");
        -:  812:
        -:  813:                    if (DEBUG){
        -:  814:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  815:                    }
        -:  816:                }
    #####:  817:                else if (state->coins < getCost(choice1)){
    #####:  818:                    printf("That card is too expensive!\n");
        -:  819:
        -:  820:                    if (DEBUG){
        -:  821:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  822:                    }
        -:  823:                }
        -:  824:                else{
        -:  825:
        -:  826:                    if (DEBUG){
        -:  827:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:                    }
        -:  829:
    #####:  830:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  831:                    x = 0;//No more buying cards
        -:  832:
        -:  833:                    if (DEBUG){
        -:  834:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  835:                    }
        -:  836:
        -:  837:                }
        -:  838:            }
        -:  839:
        -:  840:            //Reset Hand
    #####:  841:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  842:                state->hand[currentPlayer][i] = temphand[i];
    #####:  843:                temphand[i] = -1;
        -:  844:            }
        -:  845:            //Reset Hand
        -:  846:
    #####:  847:            return 0;
        -:  848:
        -:  849:        case gardens:
    #####:  850:            return -1;
        -:  851:
        -:  852:        case mine:
    #####:  853:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  856:            {
    #####:  857:                return -1;
        -:  858:            }
        -:  859:
    #####:  860:            if (choice2 > treasure_map || choice2 < curse)
        -:  861:            {
    #####:  862:                return -1;
        -:  863:            }
        -:  864:
    #####:  865:            if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  866:            {
    #####:  867:                return -1;
        -:  868:            }
        -:  869:
    #####:  870:            gainCard(choice2, state, 2, currentPlayer);
        -:  871:
        -:  872:            //discard card from hand
    #####:  873:            discardCard(handPos, currentPlayer, state, 0);
        -:  874:
        -:  875:            //discard trashed card
    #####:  876:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  877:            {
    #####:  878:                if (state->hand[currentPlayer][i] == j)
        -:  879:                {
    #####:  880:                    discardCard(i, currentPlayer, state, 0);
    #####:  881:                    break;
        -:  882:                }
        -:  883:            }
        -:  884:
    #####:  885:            return 0;
        -:  886:
        -:  887:        case remodel:
    #####:  888:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  889:
    #####:  890:            if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  891:            {
    #####:  892:                return -1;
        -:  893:            }
        -:  894:
    #####:  895:            gainCard(choice2, state, 0, currentPlayer);
        -:  896:
        -:  897:            //discard card from hand
    #####:  898:            discardCard(handPos, currentPlayer, state, 0);
        -:  899:
        -:  900:            //discard trashed card
    #####:  901:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  902:            {
    #####:  903:                if (state->hand[currentPlayer][i] == j)
        -:  904:                {
    #####:  905:                    discardCard(i, currentPlayer, state, 0);
    #####:  906:                    break;
        -:  907:                }
        -:  908:            }
        -:  909:
        -:  910:
    #####:  911:            return 0;
        -:  912:
        -:  913:        case smithy:
        -:  914:
    #####:  915:            SmithyCard(currentPlayer, state, handPos);
    #####:  916:            return 0;
        -:  917:
        -:  918:        case village:
        -:  919:
    #####:  920:            VillageCard(currentPlayer, state, handPos);
        -:  921:
    #####:  922:            return 0;
        -:  923:
        -:  924:        case baron:
    #####:  925:            state->numBuys++;//Increase buys by 1!
    #####:  926:            if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  927:                int p = 0;//Iterator for hand!
    #####:  928:                int card_not_discarded = 1;//Flag for discard set!
    #####:  929:                while(card_not_discarded){
    #####:  930:                    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  931:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  932:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  933:                        state->discardCount[currentPlayer]++;
    #####:  934:                        for (;p < state->handCount[currentPlayer]; p++){
    #####:  935:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  936:                        }
    #####:  937:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  938:                        state->handCount[currentPlayer]--;
    #####:  939:                        card_not_discarded = 0;//Exit the loop
        -:  940:                    }
    #####:  941:                    else if (p > state->handCount[currentPlayer]){
        -:  942:                        if(DEBUG) {
        -:  943:                            printf("No estate cards in your hand, invalid choice\n");
        -:  944:                            printf("Must gain an estate if there are any\n");
        -:  945:                        }
    #####:  946:                        if (supplyCount(estate, state) > 0){
    #####:  947:                            gainCard(estate, state, 0, currentPlayer);
    #####:  948:                            state->supplyCount[estate]--;//Decrement estates
    #####:  949:                            if (supplyCount(estate, state) == 0){
    #####:  950:                                isGameOver(state);
        -:  951:                            }
        -:  952:                        }
    #####:  953:                        card_not_discarded = 0;//Exit the loop
        -:  954:                    }
        -:  955:
        -:  956:                    else{
    #####:  957:                        p++;//Next card
        -:  958:                    }
        -:  959:                }
        -:  960:            }
        -:  961:
        -:  962:            else{
    #####:  963:                if (supplyCount(estate, state) > 0){
    #####:  964:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  965:                    state->supplyCount[estate]--;//Decrement Estates
    #####:  966:                    if (supplyCount(estate, state) == 0){
    #####:  967:                        isGameOver(state);
        -:  968:                    }
        -:  969:                }
        -:  970:            }
        -:  971:
        -:  972:
    #####:  973:            return 0;
        -:  974:
        -:  975:        case great_hall:
        -:  976:
    #####:  977:            GreatHallCard(currentPlayer, state, handPos);
        -:  978:
    #####:  979:            return 0;
        -:  980:
        -:  981:        case minion:
        -:  982:            //+1 action
    #####:  983:            state->numActions++;
        -:  984:
        -:  985:            //discard card from hand
    #####:  986:            discardCard(handPos, currentPlayer, state, 0);
        -:  987:
    #####:  988:            if (choice1)		//+2 coins
        -:  989:            {
    #####:  990:                state->coins = state->coins + 2;
        -:  991:            }
        -:  992:
    #####:  993:            else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  994:            {
        -:  995:                //discard hand
    #####:  996:                while(numHandCards(state) > 0)
        -:  997:                {
    #####:  998:                    discardCard(handPos, currentPlayer, state, 0);
        -:  999:                }
        -: 1000:
        -: 1001:                //draw 4
    #####: 1002:                for (i = 0; i < 4; i++)
        -: 1003:                {
    #####: 1004:                    drawCard(currentPlayer, state);
        -: 1005:                }
        -: 1006:
        -: 1007:                //other players discard hand and redraw if hand size > 4
    #####: 1008:                for (i = 0; i < state->numPlayers; i++)
        -: 1009:                {
    #####: 1010:                    if (i != currentPlayer)
        -: 1011:                    {
    #####: 1012:                        if ( state->handCount[i] > 4 )
        -: 1013:                        {
        -: 1014:                            //discard hand
    #####: 1015:                            while( state->handCount[i] > 0 )
        -: 1016:                            {
    #####: 1017:                                discardCard(handPos, i, state, 0);
        -: 1018:                            }
        -: 1019:
        -: 1020:                            //draw 4
    #####: 1021:                            for (j = 0; j < 4; j++)
        -: 1022:                            {
    #####: 1023:                                drawCard(i, state);
        -: 1024:                            }
        -: 1025:                        }
        -: 1026:                    }
        -: 1027:                }
        -: 1028:
        -: 1029:            }
    #####: 1030:            return 0;
        -: 1031:
        -: 1032:        case steward:
    #####: 1033:            if (choice1 == 1)
        -: 1034:            {
        -: 1035:                //+2 cards
    #####: 1036:                drawCard(currentPlayer, state);
    #####: 1037:                drawCard(currentPlayer, state);
        -: 1038:            }
    #####: 1039:            else if (choice1 == 2)
        -: 1040:            {
        -: 1041:                //+2 coins
    #####: 1042:                state->coins = state->coins + 2;
        -: 1043:            }
        -: 1044:            else
        -: 1045:            {
        -: 1046:                //trash 2 cards in hand
    #####: 1047:                discardCard(choice2, currentPlayer, state, 1);
    #####: 1048:                discardCard(choice3, currentPlayer, state, 1);
        -: 1049:            }
        -: 1050:
        -: 1051:            //discard card from hand
    #####: 1052:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1053:            return 0;
        -: 1054:
        -: 1055:        case tribute:
    #####: 1056:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1057:                if (state->deckCount[nextPlayer] > 0){
    #####: 1058:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1059:                    state->deckCount[nextPlayer]--;
        -: 1060:                }
    #####: 1061:                else if (state->discardCount[nextPlayer] > 0){
    #####: 1062:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1063:                    state->discardCount[nextPlayer]--;
        -: 1064:                }
        -: 1065:                else{
        -: 1066:                    //No Card to Reveal
        -: 1067:                    if (DEBUG){
        -: 1068:                        printf("No cards to reveal\n");
        -: 1069:                    }
        -: 1070:                }
        -: 1071:            }
        -: 1072:
        -: 1073:            else{
    #####: 1074:                if (state->deckCount[nextPlayer] == 0){
    #####: 1075:                    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1076:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1077:                        state->deckCount[nextPlayer]++;
    #####: 1078:                        state->discard[nextPlayer][i] = -1;
    #####: 1079:                        state->discardCount[nextPlayer]--;
        -: 1080:                    }
        -: 1081:
    #####: 1082:                    shuffle(nextPlayer,state);//Shuffle the deck
        -: 1083:                }
    #####: 1084:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1085:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1086:                state->deckCount[nextPlayer]--;
    #####: 1087:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1088:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1089:                state->deckCount[nextPlayer]--;
        -: 1090:            }
        -: 1091:
    #####: 1092:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1093:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1094:                state->playedCardCount++;
    #####: 1095:                tributeRevealedCards[1] = -1;
        -: 1096:            }
        -: 1097:
    #####: 1098:            for (i = 0; i <= 2; i ++){
    #####: 1099:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1100:                    state->coins += 2;
        -: 1101:                }
        -: 1102:
    #####: 1103:                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1104:                    drawCard(currentPlayer, state);
    #####: 1105:                    drawCard(currentPlayer, state);
        -: 1106:                }
        -: 1107:                else{//Action Card
    #####: 1108:                    state->numActions = state->numActions + 2;
        -: 1109:                }
        -: 1110:            }
        -: 1111:
    #####: 1112:            return 0;
        -: 1113:
        -: 1114:        case ambassador:
    #####: 1115:            j = 0;		//used to check if player has enough cards to discard
        -: 1116:
    #####: 1117:            if (choice2 > 2 || choice2 < 0)
        -: 1118:            {
    #####: 1119:                return -1;
        -: 1120:            }
        -: 1121:
    #####: 1122:            if (choice1 == handPos)
        -: 1123:            {
    #####: 1124:                return -1;
        -: 1125:            }
        -: 1126:
    #####: 1127:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1128:            {
    #####: 1129:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1130:                {
    #####: 1131:                    j++;
        -: 1132:                }
        -: 1133:            }
    #####: 1134:            if (j < choice2)
        -: 1135:            {
    #####: 1136:                return -1;
        -: 1137:            }
        -: 1138:
        -: 1139:            if (DEBUG)
        -: 1140:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1141:
        -: 1142:            //increase supply count for choosen card by amount being discarded
    #####: 1143:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1144:
        -: 1145:            //each other player gains a copy of revealed card
    #####: 1146:            for (i = 0; i < state->numPlayers; i++)
        -: 1147:            {
    #####: 1148:                if (i != currentPlayer)
        -: 1149:                {
    #####: 1150:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1151:                }
        -: 1152:            }
        -: 1153:
        -: 1154:            //discard played card from hand
    #####: 1155:            discardCard(handPos, currentPlayer, state, 0);
        -: 1156:
        -: 1157:            //trash copies of cards returned to supply
    #####: 1158:            for (j = 0; j < choice2; j++)
        -: 1159:            {
    #####: 1160:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1161:                {
    #####: 1162:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1163:                    {
    #####: 1164:                        discardCard(i, currentPlayer, state, 1);
    #####: 1165:                        break;
        -: 1166:                    }
        -: 1167:                }
        -: 1168:            }
        -: 1169:
    #####: 1170:            return 0;
        -: 1171:
        -: 1172:        case cutpurse:
        -: 1173:
    #####: 1174:            updateCoins(currentPlayer, state, 2);
    #####: 1175:            for (i = 0; i < state->numPlayers; i++)
        -: 1176:            {
    #####: 1177:                if (i != currentPlayer)
        -: 1178:                {
    #####: 1179:                    for (j = 0; j < state->handCount[i]; j++)
        -: 1180:                    {
    #####: 1181:                        if (state->hand[i][j] == copper)
        -: 1182:                        {
    #####: 1183:                            discardCard(j, i, state, 0);
    #####: 1184:                            break;
        -: 1185:                        }
    #####: 1186:                        if (j == state->handCount[i])
        -: 1187:                        {
    #####: 1188:                            for (k = 0; k < state->handCount[i]; k++)
        -: 1189:                            {
        -: 1190:                                if (DEBUG)
        -: 1191:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1192:                            }
    #####: 1193:                            break;
        -: 1194:                        }
        -: 1195:                    }
        -: 1196:
        -: 1197:                }
        -: 1198:
        -: 1199:            }
        -: 1200:
        -: 1201:            //discard played card from hand
    #####: 1202:            discardCard(handPos, currentPlayer, state, 0);
        -: 1203:
    #####: 1204:            return 0;
        -: 1205:
        -: 1206:
        -: 1207:        case embargo:
        -: 1208:
    #####: 1209:            EmbargoCard(currentPlayer, handPos, state, choice1);
    #####: 1210:            return 0;
        -: 1211:
        -: 1212:        case outpost:
        -: 1213:            //set outpost flag
    #####: 1214:            state->outpostPlayed++;
        -: 1215:
        -: 1216:            //discard card
    #####: 1217:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1218:            return 0;
        -: 1219:
        -: 1220:        case salvager:
        -: 1221:            //+1 buy
    #####: 1222:            state->numBuys++;
        -: 1223:
    #####: 1224:            if (choice1)
        -: 1225:            {
        -: 1226:                //gain coins equal to trashed card
    #####: 1227:                state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1228:                //trash card
    #####: 1229:                discardCard(choice1, currentPlayer, state, 1);
        -: 1230:            }
        -: 1231:
        -: 1232:            //discard card
    #####: 1233:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1234:            return 0;
        -: 1235:
        -: 1236:        case sea_hag:
    #####: 1237:            for (i = 0; i < state->numPlayers; i++){
    #####: 1238:                if (i != currentPlayer){
    #####: 1239:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1240:                    state->discardCount[i]++;
    #####: 1241:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1242:                }
        -: 1243:            }
    #####: 1244:            return 0;
        -: 1245:
        -: 1246:        case treasure_map:
        -: 1247:            //search hand for another treasure_map
    #####: 1248:            index = -1;
    #####: 1249:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1250:            {
    #####: 1251:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1252:                {
    #####: 1253:                    index = i;
    #####: 1254:                    break;
        -: 1255:                }
        -: 1256:            }
    #####: 1257:            if (index > -1)
        -: 1258:            {
        -: 1259:                //trash both treasure cards
    #####: 1260:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1261:                discardCard(index, currentPlayer, state, 1);
        -: 1262:
        -: 1263:                //gain 4 Gold cards
    #####: 1264:                for (i = 0; i < 4; i++)
        -: 1265:                {
    #####: 1266:                    gainCard(gold, state, 1, currentPlayer);
        -: 1267:                }
        -: 1268:
        -: 1269:                //return success
    #####: 1270:                return 1;
        -: 1271:            }
        -: 1272:
        -: 1273:            //no second treasure_map found in hand
    #####: 1274:            return -1;
        -: 1275:    }
        -: 1276:
    #####: 1277:    return -1;
        -: 1278:}
        -: 1279:
        1: 1280:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1281:{
        -: 1282:
        -: 1283:    //if card is not trashed, added to Played pile
        1: 1284:    if (trashFlag < 1)
        -: 1285:    {
        -: 1286:        //add card to played pile
        1: 1287:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        1: 1288:        state->playedCardCount++;
        -: 1289:    }
        -: 1290:
        -: 1291:    //set played card to -1
        1: 1292:    state->hand[currentPlayer][handPos] = -1;
        -: 1293:
        -: 1294:    //remove card from player's hand
        1: 1295:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1296:    {
        -: 1297:        //reduce number of cards in hand
    #####: 1298:        state->handCount[currentPlayer]--;
        -: 1299:    }
        1: 1300:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1301:    {
        -: 1302:        //reduce number of cards in hand
    #####: 1303:        state->handCount[currentPlayer]--;
        -: 1304:    }
        -: 1305:    else
        -: 1306:    {
        -: 1307:        //replace discarded card with last card in hand
        1: 1308:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1309:        //set last card to -1
        1: 1310:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1311:        //reduce number of cards in hand
        1: 1312:        state->handCount[currentPlayer]--;
        -: 1313:    }
        -: 1314:
        1: 1315:    return 0;
        -: 1316:}
        -: 1317:
    #####: 1318:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1319:{
        -: 1320:    //Note: supplyPos is enum of choosen card
        -: 1321:
        -: 1322:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1323:    if ( supplyCount(supplyPos, state) < 1 )
        -: 1324:    {
    #####: 1325:        return -1;
        -: 1326:    }
        -: 1327:
        -: 1328:    //added card for [whoseTurn] current player:
        -: 1329:    // toFlag = 0 : add to discard
        -: 1330:    // toFlag = 1 : add to deck
        -: 1331:    // toFlag = 2 : add to hand
        -: 1332:
    #####: 1333:    if (toFlag == 1)
        -: 1334:    {
    #####: 1335:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1336:        state->deckCount[player]++;
        -: 1337:    }
    #####: 1338:    else if (toFlag == 2)
        -: 1339:    {
    #####: 1340:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1341:        state->handCount[player]++;
        -: 1342:    }
        -: 1343:    else
        -: 1344:    {
    #####: 1345:        state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1346:        state->discardCount[player]++;
        -: 1347:    }
        -: 1348:
        -: 1349:    //decrease number in supply pile
    #####: 1350:    state->supplyCount[supplyPos]--;
        -: 1351:
    #####: 1352:    return 0;
        -: 1353:}
        -: 1354:
        1: 1355:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1356:{
        -: 1357:    int i;
        -: 1358:
        -: 1359:    //reset coin count
        1: 1360:    state->coins = 0;
        -: 1361:
        -: 1362:    //add coins for each Treasure card in player's hand
        6: 1363:    for (i = 0; i < state->handCount[player]; i++)
        -: 1364:    {
        5: 1365:        if (state->hand[player][i] == copper)
        -: 1366:        {
        4: 1367:            state->coins += 1;
        -: 1368:        }
        1: 1369:        else if (state->hand[player][i] == silver)
        -: 1370:        {
    #####: 1371:            state->coins += 2;
        -: 1372:        }
        1: 1373:        else if (state->hand[player][i] == gold)
        -: 1374:        {
    #####: 1375:            state->coins += 3;
        -: 1376:        }
        -: 1377:    }
        -: 1378:
        -: 1379:    //add bonus
        1: 1380:    state->coins += bonus;
        -: 1381:
        1: 1382:    return 0;
        -: 1383:}
        -: 1384:
        -: 1385:
        -: 1386://end of dominion.c
        -: 1387:
cardtest2.c:
----------------- Testing Card: village ----------------

TEST 1: player 1 draws 1 cards from deck
FAILED

TEST 2: player 1 cards in hand not changed
FAILED

TEST 3: player 1 gains 2 actions
FAILED

 >>>>> TEST FAILED village, Failed Cases: 3 <<<<<

File 'dominion.c'
Lines executed:21.20% of 566
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void* a, const void* b) {
       30:    9:    if (*(int*)a > *(int*)b)
    #####:   10:        return 1;
       30:   11:    if (*(int*)a < *(int*)b)
        8:   12:        return -1;
       22:   13:    return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:
        -:   40:    int i;
        -:   41:    int j;
        -:   42:    int it;
        -:   43:    //set up random number generator
        1:   44:    SelectStream(1);
        1:   45:    PutSeed((long)randomSeed);
        -:   46:
        -:   47:    //check number of players
        1:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
        1:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
       11:   57:    for (i = 0; i < 10; i++)
        -:   58:    {
      110:   59:        for (j = 0; j < 10; j++)
        -:   60:        {
      100:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
        1:   73:    if (numPlayers == 2)
        -:   74:    {
        1:   75:        state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:    else if (numPlayers == 3)
        -:   78:    {
    #####:   79:        state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
        1:   87:    if (numPlayers == 2)
        -:   88:    {
        1:   89:        state->supplyCount[estate] = 8;
        1:   90:        state->supplyCount[duchy] = 8;
        1:   91:        state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:    else
        -:   94:    {
    #####:   95:        state->supplyCount[estate] = 12;
    #####:   96:        state->supplyCount[duchy] = 12;
    #####:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
        1:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:    state->supplyCount[silver] = 40;
        1:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
       21:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      165:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:        {
      155:  110:            if (kingdomCards[j] == i)
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
       10:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:                {
        4:  115:                    if (numPlayers == 2){
        2:  116:                        state->supplyCount[i] = 8;
        -:  117:                    }
    #####:  118:                    else{ state->supplyCount[i] = 12; }
        -:  119:                }
        -:  120:                else
        -:  121:                {
        8:  122:                    state->supplyCount[i] = 10;
        -:  123:                }
       10:  124:                break;
        -:  125:            }
        -:  126:            else    //card is not in the set choosen for the game
        -:  127:            {
      145:  128:                state->supplyCount[i] = -1;
        -:  129:            }
        -:  130:        }
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:    ////////////////////////
        -:  135:    //supply intilization complete
        -:  136:
        -:  137:    //set player decks
        3:  138:    for (i = 0; i < numPlayers; i++)
        -:  139:    {
        2:  140:        state->deckCount[i] = 0;
        8:  141:        for (j = 0; j < 3; j++)
        -:  142:        {
        6:  143:            state->deck[i][j] = estate;
        6:  144:            state->deckCount[i]++;
        -:  145:        }
       16:  146:        for (j = 3; j < 10; j++)
        -:  147:        {
       14:  148:            state->deck[i][j] = copper;
       14:  149:            state->deckCount[i]++;
        -:  150:        }
        -:  151:    }
        -:  152:
        -:  153:    //shuffle player decks
        3:  154:    for (i = 0; i < numPlayers; i++)
        -:  155:    {
        2:  156:        if ( shuffle(i, state) < 0 )
        -:  157:        {
    #####:  158:            return -1;
        -:  159:        }
        -:  160:    }
        -:  161:
        -:  162:    //draw player hands
        3:  163:    for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:        //initialize hand size to zero
        2:  166:        state->handCount[i] = 0;
        2:  167:        state->discardCount[i] = 0;
        -:  168:        //draw 5 cards
        -:  169:        // for (j = 0; j < 5; j++)
        -:  170:        //	{
        -:  171:        //	  drawCard(i, state);
        -:  172:        //	}
        -:  173:    }
        -:  174:
        -:  175:    //set embargo tokens to 0 for all supply piles
       28:  176:    for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       27:  178:        state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:    //initialize first player's turn
        1:  182:    state->outpostPlayed = 0;
        1:  183:    state->phase = 0;
        1:  184:    state->numActions = 1;
        1:  185:    state->numBuys = 1;
        1:  186:    state->playedCardCount = 0;
        1:  187:    state->whoseTurn = 0;
        1:  188:    state->handCount[state->whoseTurn] = 0;
        -:  189:    //int it; move to top
        -:  190:
        -:  191:    //Moved draw cards to here, only drawing at the start of a turn
        6:  192:    for (it = 0; it < 5; it++){
        5:  193:        drawCard(state->whoseTurn, state);
        -:  194:    }
        -:  195:
        1:  196:    updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:    return 0;
        -:  199:}
        -:  200:
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:    int newDeck[MAX_DECK];
        2:  205:    int newDeckPos = 0;
        -:  206:    int card;
        -:  207:    int i;
        -:  208:
        2:  209:    if (state->deckCount[player] < 1)
    #####:  210:        return -1;
        2:  211:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:    while (state->deckCount[player] > 0) {
       20:  215:        card = floor(Random() * state->deckCount[player]);
       20:  216:        newDeck[newDeckPos] = state->deck[player][card];
       20:  217:        newDeckPos++;
       70:  218:        for (i = card; i < state->deckCount[player]-1; i++) {
       50:  219:            state->deck[player][i] = state->deck[player][i+1];
        -:  220:        }
       20:  221:        state->deckCount[player]--;
        -:  222:    }
       22:  223:    for (i = 0; i < newDeckPos; i++) {
       20:  224:        state->deck[player][i] = newDeck[i];
       20:  225:        state->deckCount[player]++;
        -:  226:    }
        -:  227:
        2:  228:    return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:    int card;
    #####:  234:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:    //check if it is the right phase
    #####:  237:    if (state->phase != 0)
        -:  238:    {
    #####:  239:        return -1;
        -:  240:    }
        -:  241:
        -:  242:    //check if player has enough actions
    #####:  243:    if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:        return -1;
        -:  246:    }
        -:  247:
        -:  248:    //get card played
    #####:  249:    card = handCard(handPos, state);
        -:  250:
        -:  251:    //check if selected card is an action
    #####:  252:    if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:        return -1;
        -:  255:    }
        -:  256:
        -:  257:    //play card
    #####:  258:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:        return -1;
        -:  261:    }
        -:  262:
        -:  263:    //reduce number of actions
    #####:  264:    state->numActions--;
        -:  265:
        -:  266:    //update coins (Treasure cards may be added with card draws)
    #####:  267:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:    return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:    int who;
        -:  274:    if (DEBUG){
        -:  275:        printf("Entering buyCard...\n");
        -:  276:    }
        -:  277:
        -:  278:    // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:    who = state->whoseTurn;
        -:  281:
    #####:  282:    if (state->numBuys < 1){
        -:  283:        if (DEBUG)
        -:  284:            printf("You do not have any buys left\n");
    #####:  285:        return -1;
    #####:  286:    } else if (supplyCount(supplyPos, state) <1){
        -:  287:        if (DEBUG)
        -:  288:            printf("There are not any of that type of card left\n");
    #####:  289:        return -1;
    #####:  290:    } else if (state->coins < getCost(supplyPos)){
        -:  291:        if (DEBUG)
        -:  292:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:        return -1;
        -:  294:    } else {
    #####:  295:        state->phase=1;
        -:  296:        //state->supplyCount[supplyPos]--;
    #####:  297:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:        state->numBuys--;
        -:  301:        if (DEBUG)
        -:  302:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:    }
        -:  304:
        -:  305:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:    //state->discardCount[who]++;
        -:  307:
    #####:  308:    return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:    return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:    int currentPlayer = whoseTurn(state);
    #####:  317:    return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:    return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:    int i;
    #####:  326:    int count = 0;
        -:  327:
    #####:  328:    for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:        if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:    for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:        if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:    for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:        if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:    return count;
        -:  344:}
        -:  345:
        1:  346:int whoseTurn(struct gameState *state) {
        1:  347:    return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:    int k;
        -:  352:    int i;
    #####:  353:    int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:    //Discard hand
    #####:  356:    for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:    }
    #####:  360:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:    //Code for determining the player
    #####:  363:    if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:    }
        -:  366:    else{
    #####:  367:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:    }
        -:  369:
    #####:  370:    state->outpostPlayed = 0;
    #####:  371:    state->phase = 0;
    #####:  372:    state->numActions = 1;
    #####:  373:    state->coins = 0;
    #####:  374:    state->numBuys = 1;
    #####:  375:    state->playedCardCount = 0;
    #####:  376:    state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:    //int k; move to top
        -:  379:    //Next player draws hand
    #####:  380:    for (k = 0; k < 5; k++){
    #####:  381:        drawCard(state->whoseTurn, state);//Draw a card
        -:  382:    }
        -:  383:
        -:  384:    //Update money
    #####:  385:    updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:    return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:    int i;
        -:  392:    int j;
        -:  393:
        -:  394:    //if stack of Province cards is empty, the game ends
    #####:  395:    if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:        return 1;
        -:  398:    }
        -:  399:
        -:  400:    //if three supply pile are at 0, the game ends
    #####:  401:    j = 0;
    #####:  402:    for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:        if (state->supplyCount[i] == 0)
        -:  405:        {
    #####:  406:            j++;
        -:  407:        }
        -:  408:    }
    #####:  409:    if ( j >= 3)
        -:  410:    {
    #####:  411:        return 1;
        -:  412:    }
        -:  413:
    #####:  414:    return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:    int i;
    #####:  420:    int score = 0;
        -:  421:    //score from hand
    #####:  422:    for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:        if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:        if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:        if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:        if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:        if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:    //score from discard
    #####:  433:    for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:        if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:        if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:        if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:        if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:        if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:    //score from deck
    #####:  444:    for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:        if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:        if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:        if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:        if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:        if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:    return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:    int i;
        -:  459:    int j;
        -:  460:    int highScore;
        -:  461:    int currentPlayer;
        -:  462:
        -:  463:    //get score for each player
    #####:  464:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:        //set unused player scores to -9999
    #####:  467:        if (i >= state->numPlayers)
        -:  468:        {
    #####:  469:            players[i] = -9999;
        -:  470:        }
        -:  471:        else
        -:  472:        {
    #####:  473:            players[i] = scoreFor (i, state);
        -:  474:        }
        -:  475:    }
        -:  476:
        -:  477:    //find highest score
    #####:  478:    j = 0;
    #####:  479:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:        if (players[i] > players[j])
        -:  482:        {
    #####:  483:            j = i;
        -:  484:        }
        -:  485:    }
    #####:  486:    highScore = players[j];
        -:  487:
        -:  488:    //add 1 to players who had less turns
    #####:  489:    currentPlayer = whoseTurn(state);
    #####:  490:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:        if ( players[i] == highScore && i > currentPlayer )
        -:  493:        {
    #####:  494:            players[i]++;
        -:  495:        }
        -:  496:    }
        -:  497:
        -:  498:    //find new highest score
    #####:  499:    j = 0;
    #####:  500:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:        if ( players[i] > players[j] )
        -:  503:        {
    #####:  504:            j = i;
        -:  505:        }
        -:  506:    }
    #####:  507:    highScore = players[j];
        -:  508:
        -:  509:    //set winners in array to 1 and rest to 0
    #####:  510:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:        if ( players[i] == highScore )
        -:  513:        {
    #####:  514:            players[i] = 1;
        -:  515:        }
        -:  516:        else
        -:  517:        {
    #####:  518:            players[i] = 0;
        -:  519:        }
        -:  520:    }
        -:  521:
    #####:  522:    return 0;
        -:  523:}
        -:  524:
        8:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:    int deckCounter;
        8:  528:    if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:        //Step 1 Shuffle the discard pile back into a deck
        -:  531:        int i;
        -:  532:        //Move discard to deck
    #####:  533:        for (i = 0; i < state->discardCount[player];i++){
    #####:  534:            state->deck[player][i] = state->discard[player][i];
    #####:  535:            state->discard[player][i] = -1;
        -:  536:        }
        -:  537:
    #####:  538:        state->deckCount[player] = state->discardCount[player];
    #####:  539:        state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:        //Shufffle the deck
    #####:  542:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:        if (DEBUG){//Debug statements
        -:  545:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:        }
        -:  547:
    #####:  548:        state->discardCount[player] = 0;
        -:  549:
        -:  550:        //Step 2 Draw Card
    #####:  551:        count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:        if (DEBUG){//Debug statements
        -:  554:            printf("Current hand count: %d\n", count);
        -:  555:        }
        -:  556:
    #####:  557:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:        if (deckCounter == 0)
    #####:  560:            return -1;
        -:  561:
    #####:  562:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:        state->deckCount[player]--;
    #####:  564:        state->handCount[player]++;//Increment hand count
        -:  565:    }
        -:  566:
        -:  567:    else{
        8:  568:        int count = state->handCount[player];//Get current hand count for player
        -:  569:        int deckCounter;
        -:  570:        if (DEBUG){//Debug statements
        -:  571:            printf("Current hand count: %d\n", count);
        -:  572:        }
        -:  573:
        8:  574:        deckCounter = state->deckCount[player];//Create holder for the deck count
        8:  575:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        8:  576:        state->deckCount[player]--;
        8:  577:        state->handCount[player]++;//Increment hand count
        -:  578:    }
        -:  579:
        8:  580:    return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:    switch( cardNumber )
        -:  586:    {
        -:  587:        case curse:
    #####:  588:            return 0;
        -:  589:        case estate:
    #####:  590:            return 2;
        -:  591:        case duchy:
    #####:  592:            return 5;
        -:  593:        case province:
    #####:  594:            return 8;
        -:  595:        case copper:
    #####:  596:            return 0;
        -:  597:        case silver:
    #####:  598:            return 3;
        -:  599:        case gold:
    #####:  600:            return 6;
        -:  601:        case adventurer:
    #####:  602:            return 6;
        -:  603:        case council_room:
    #####:  604:            return 5;
        -:  605:        case feast:
    #####:  606:            return 4;
        -:  607:        case gardens:
    #####:  608:            return 4;
        -:  609:        case mine:
    #####:  610:            return 5;
        -:  611:        case remodel:
    #####:  612:            return 4;
        -:  613:        case smithy:
    #####:  614:            return 4;
        -:  615:        case village:
    #####:  616:            return 3;
        -:  617:        case baron:
    #####:  618:            return 4;
        -:  619:        case great_hall:
    #####:  620:            return 3;
        -:  621:        case minion:
    #####:  622:            return 5;
        -:  623:        case steward:
    #####:  624:            return 3;
        -:  625:        case tribute:
    #####:  626:            return 5;
        -:  627:        case ambassador:
    #####:  628:            return 3;
        -:  629:        case cutpurse:
    #####:  630:            return 4;
        -:  631:        case embargo:
    #####:  632:            return 2;
        -:  633:        case outpost:
    #####:  634:            return 5;
        -:  635:        case salvager:
    #####:  636:            return 4;
        -:  637:        case sea_hag:
    #####:  638:            return 4;
        -:  639:        case treasure_map:
    #####:  640:            return 4;
        -:  641:    }
        -:  642:
    #####:  643:    return -1;
        -:  644:}
        -:  645:
        -:  646:
        -:  647:
    #####:  648:int SmithyCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  649:
        -:  650:    //+3 Cards
        -:  651:    int i;
    #####:  652:    for (i = 0; i < 5; i++)
        -:  653:    {
    #####:  654:        drawCard(currentPlayer, state);
        -:  655:    }
        -:  656:
        -:  657:    //discard card from hand
        -:  658:    //discardCard(handPos, currentPlayer, state, 0);
    #####:  659:    return 0;
        -:  660://bug introduced: draw 5 cards instead of 3; do not discard a card
        -:  661:}
        -:  662:
        -:  663:
    #####:  664:int AdventurerCard(int currentPlayer, struct gameState *state, int drawntreasure, int temphand[], int cardDrawn, int z) {
        -:  665:
    #####:  666:    while(drawntreasure<5){
    #####:  667:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  668:            shuffle(currentPlayer, state);
        -:  669:        }
    #####:  670:        drawCard(currentPlayer, state);
    #####:  671:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  672:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  673:            drawntreasure++;
        -:  674:        else{
    #####:  675:            temphand[z]=cardDrawn;
    #####:  676:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  677:            z++;
        -:  678:        }
        -:  679:    }
    #####:  680:    while(z-1>=0){
    #####:  681:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  682:        z=z-1;
        -:  683:    }
    #####:  684:    return 0;
        -:  685:// bug introduced: player is able to draw 5 treasure cards instead of 2.
        -:  686:}
        -:  687:
        -:  688:
        1:  689:int VillageCard(int currentPlayer, struct gameState *state, int handPos){
        -:  690:
        -:  691:    //+1 Card
        1:  692:    drawCard(currentPlayer, state);
        1:  693:    drawCard(currentPlayer, state);
        1:  694:    drawCard(currentPlayer, state);
        -:  695:
        -:  696:    //+2 Actions
        1:  697:    state->numActions = state->numActions + 10;
        -:  698:
        -:  699:    //discard played card from hand
        1:  700:    discardCard(handPos, currentPlayer, state, 0);
        1:  701:    return 0;
        -:  702:// bug introduced: increase action points by 10 instead of 2 and draw 3 cards instead of 1
        -:  703:}
        -:  704:
        -:  705:
    #####:  706:int GreatHallCard(int currentPlayer, struct gameState *state, int handPos){
        -:  707:    //+1 Card
    #####:  708:    drawCard(currentPlayer, state);
        -:  709:
        -:  710:    //+1 Actions
    #####:  711:    state->numActions++;
        -:  712:
        -:  713:    //discard card from hand
    #####:  714:    discardCard(handPos, currentPlayer, state, 0);
    #####:  715:    return 0;
        -:  716:}
        -:  717:
        -:  718:
    #####:  719:int EmbargoCard(int currentPlayer, int handPos, struct gameState *state, int choice1) {
        -:  720://+2 Coins
    #####:  721:    state->coins = state->coins + 20;
        -:  722:
        -:  723:    //see if selected pile is in play
    #####:  724:    if ( state->supplyCount[choice1] == -1 )
        -:  725:    {
    #####:  726:        return -1;
        -:  727:    }
        -:  728:
        -:  729:    //add embargo token to selected supply pile
    #####:  730:    state->embargoTokens[choice1]++;
    #####:  731:    state->embargoTokens[choice1]++;
        -:  732:
        -:  733:    //trash card
    #####:  734:    discardCard(handPos, currentPlayer, state, 1);
        -:  735:
        -:  736:
    #####:  737:    return 0;
        -:  738://bug introduced: increase state->coins by 20 instead of 2, and add 2 embargo tokens instead of one
        -:  739:}
        -:  740:
        -:  741:
        -:  742:
        1:  743:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  744:{
        -:  745:    int i;
        -:  746:    int j;
        -:  747:    int k;
        -:  748:    int x;
        -:  749:    int index;
        1:  750:    int currentPlayer = whoseTurn(state);
        1:  751:    int nextPlayer = currentPlayer + 1;
        -:  752:
        1:  753:    int tributeRevealedCards[2] = {-1, -1};
        -:  754:    int temphand[MAX_HAND];// moved above the if statement
        1:  755:    int drawntreasure=0;
        1:  756:    int cardDrawn=0;
        1:  757:    int z = 0;// this is the counter for the temp hand
        1:  758:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  759:        nextPlayer = 0;
        -:  760:    }
        -:  761:
        -:  762:
        -:  763:    //uses switch to select card and perform actions
        1:  764:    switch( card )
        -:  765:    {
        -:  766:        case adventurer:
        -:  767:
    #####:  768:            AdventurerCard(currentPlayer, state, drawntreasure, temphand, cardDrawn, z);
        -:  769:
    #####:  770:            return 0;
        -:  771:
        -:  772:        case council_room:
        -:  773:            //+4 Cards
    #####:  774:            for (i = 0; i < 4; i++)
        -:  775:            {
    #####:  776:                drawCard(currentPlayer, state);
        -:  777:            }
        -:  778:
        -:  779:            //+1 Buy
    #####:  780:            state->numBuys++;
        -:  781:
        -:  782:            //Each other player draws a card
    #####:  783:            for (i = 0; i < state->numPlayers; i++)
        -:  784:            {
    #####:  785:                if ( i != currentPlayer )
        -:  786:                {
    #####:  787:                    drawCard(i, state);
        -:  788:                }
        -:  789:            }
        -:  790:
        -:  791:            //put played card in played card pile
    #####:  792:            discardCard(handPos, currentPlayer, state, 0);
        -:  793:
    #####:  794:            return 0;
        -:  795:
        -:  796:        case feast:
        -:  797:            //gain card with cost up to 5
        -:  798:            //Backup hand
    #####:  799:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  800:                temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  801:                state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  802:            }
        -:  803:            //Backup hand
        -:  804:
        -:  805:            //Update Coins for Buy
    #####:  806:            updateCoins(currentPlayer, state, 5);
    #####:  807:            x = 1;//Condition to loop on
    #####:  808:            while( x == 1) {//Buy one card
    #####:  809:                if (supplyCount(choice1, state) <= 0){
        -:  810:                    if (DEBUG)
        -:  811:                        printf("None of that card left, sorry!\n");
        -:  812:
        -:  813:                    if (DEBUG){
        -:  814:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  815:                    }
        -:  816:                }
    #####:  817:                else if (state->coins < getCost(choice1)){
    #####:  818:                    printf("That card is too expensive!\n");
        -:  819:
        -:  820:                    if (DEBUG){
        -:  821:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  822:                    }
        -:  823:                }
        -:  824:                else{
        -:  825:
        -:  826:                    if (DEBUG){
        -:  827:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:                    }
        -:  829:
    #####:  830:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  831:                    x = 0;//No more buying cards
        -:  832:
        -:  833:                    if (DEBUG){
        -:  834:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  835:                    }
        -:  836:
        -:  837:                }
        -:  838:            }
        -:  839:
        -:  840:            //Reset Hand
    #####:  841:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  842:                state->hand[currentPlayer][i] = temphand[i];
    #####:  843:                temphand[i] = -1;
        -:  844:            }
        -:  845:            //Reset Hand
        -:  846:
    #####:  847:            return 0;
        -:  848:
        -:  849:        case gardens:
    #####:  850:            return -1;
        -:  851:
        -:  852:        case mine:
    #####:  853:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  856:            {
    #####:  857:                return -1;
        -:  858:            }
        -:  859:
    #####:  860:            if (choice2 > treasure_map || choice2 < curse)
        -:  861:            {
    #####:  862:                return -1;
        -:  863:            }
        -:  864:
    #####:  865:            if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  866:            {
    #####:  867:                return -1;
        -:  868:            }
        -:  869:
    #####:  870:            gainCard(choice2, state, 2, currentPlayer);
        -:  871:
        -:  872:            //discard card from hand
    #####:  873:            discardCard(handPos, currentPlayer, state, 0);
        -:  874:
        -:  875:            //discard trashed card
    #####:  876:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  877:            {
    #####:  878:                if (state->hand[currentPlayer][i] == j)
        -:  879:                {
    #####:  880:                    discardCard(i, currentPlayer, state, 0);
    #####:  881:                    break;
        -:  882:                }
        -:  883:            }
        -:  884:
    #####:  885:            return 0;
        -:  886:
        -:  887:        case remodel:
    #####:  888:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  889:
    #####:  890:            if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  891:            {
    #####:  892:                return -1;
        -:  893:            }
        -:  894:
    #####:  895:            gainCard(choice2, state, 0, currentPlayer);
        -:  896:
        -:  897:            //discard card from hand
    #####:  898:            discardCard(handPos, currentPlayer, state, 0);
        -:  899:
        -:  900:            //discard trashed card
    #####:  901:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  902:            {
    #####:  903:                if (state->hand[currentPlayer][i] == j)
        -:  904:                {
    #####:  905:                    discardCard(i, currentPlayer, state, 0);
    #####:  906:                    break;
        -:  907:                }
        -:  908:            }
        -:  909:
        -:  910:
    #####:  911:            return 0;
        -:  912:
        -:  913:        case smithy:
        -:  914:
    #####:  915:            SmithyCard(currentPlayer, state, handPos);
    #####:  916:            return 0;
        -:  917:
        -:  918:        case village:
        -:  919:
        1:  920:            VillageCard(currentPlayer, state, handPos);
        -:  921:
        1:  922:            return 0;
        -:  923:
        -:  924:        case baron:
    #####:  925:            state->numBuys++;//Increase buys by 1!
    #####:  926:            if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  927:                int p = 0;//Iterator for hand!
    #####:  928:                int card_not_discarded = 1;//Flag for discard set!
    #####:  929:                while(card_not_discarded){
    #####:  930:                    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  931:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  932:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  933:                        state->discardCount[currentPlayer]++;
    #####:  934:                        for (;p < state->handCount[currentPlayer]; p++){
    #####:  935:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  936:                        }
    #####:  937:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  938:                        state->handCount[currentPlayer]--;
    #####:  939:                        card_not_discarded = 0;//Exit the loop
        -:  940:                    }
    #####:  941:                    else if (p > state->handCount[currentPlayer]){
        -:  942:                        if(DEBUG) {
        -:  943:                            printf("No estate cards in your hand, invalid choice\n");
        -:  944:                            printf("Must gain an estate if there are any\n");
        -:  945:                        }
    #####:  946:                        if (supplyCount(estate, state) > 0){
    #####:  947:                            gainCard(estate, state, 0, currentPlayer);
    #####:  948:                            state->supplyCount[estate]--;//Decrement estates
    #####:  949:                            if (supplyCount(estate, state) == 0){
    #####:  950:                                isGameOver(state);
        -:  951:                            }
        -:  952:                        }
    #####:  953:                        card_not_discarded = 0;//Exit the loop
        -:  954:                    }
        -:  955:
        -:  956:                    else{
    #####:  957:                        p++;//Next card
        -:  958:                    }
        -:  959:                }
        -:  960:            }
        -:  961:
        -:  962:            else{
    #####:  963:                if (supplyCount(estate, state) > 0){
    #####:  964:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  965:                    state->supplyCount[estate]--;//Decrement Estates
    #####:  966:                    if (supplyCount(estate, state) == 0){
    #####:  967:                        isGameOver(state);
        -:  968:                    }
        -:  969:                }
        -:  970:            }
        -:  971:
        -:  972:
    #####:  973:            return 0;
        -:  974:
        -:  975:        case great_hall:
        -:  976:
    #####:  977:            GreatHallCard(currentPlayer, state, handPos);
        -:  978:
    #####:  979:            return 0;
        -:  980:
        -:  981:        case minion:
        -:  982:            //+1 action
    #####:  983:            state->numActions++;
        -:  984:
        -:  985:            //discard card from hand
    #####:  986:            discardCard(handPos, currentPlayer, state, 0);
        -:  987:
    #####:  988:            if (choice1)		//+2 coins
        -:  989:            {
    #####:  990:                state->coins = state->coins + 2;
        -:  991:            }
        -:  992:
    #####:  993:            else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  994:            {
        -:  995:                //discard hand
    #####:  996:                while(numHandCards(state) > 0)
        -:  997:                {
    #####:  998:                    discardCard(handPos, currentPlayer, state, 0);
        -:  999:                }
        -: 1000:
        -: 1001:                //draw 4
    #####: 1002:                for (i = 0; i < 4; i++)
        -: 1003:                {
    #####: 1004:                    drawCard(currentPlayer, state);
        -: 1005:                }
        -: 1006:
        -: 1007:                //other players discard hand and redraw if hand size > 4
    #####: 1008:                for (i = 0; i < state->numPlayers; i++)
        -: 1009:                {
    #####: 1010:                    if (i != currentPlayer)
        -: 1011:                    {
    #####: 1012:                        if ( state->handCount[i] > 4 )
        -: 1013:                        {
        -: 1014:                            //discard hand
    #####: 1015:                            while( state->handCount[i] > 0 )
        -: 1016:                            {
    #####: 1017:                                discardCard(handPos, i, state, 0);
        -: 1018:                            }
        -: 1019:
        -: 1020:                            //draw 4
    #####: 1021:                            for (j = 0; j < 4; j++)
        -: 1022:                            {
    #####: 1023:                                drawCard(i, state);
        -: 1024:                            }
        -: 1025:                        }
        -: 1026:                    }
        -: 1027:                }
        -: 1028:
        -: 1029:            }
    #####: 1030:            return 0;
        -: 1031:
        -: 1032:        case steward:
    #####: 1033:            if (choice1 == 1)
        -: 1034:            {
        -: 1035:                //+2 cards
    #####: 1036:                drawCard(currentPlayer, state);
    #####: 1037:                drawCard(currentPlayer, state);
        -: 1038:            }
    #####: 1039:            else if (choice1 == 2)
        -: 1040:            {
        -: 1041:                //+2 coins
    #####: 1042:                state->coins = state->coins + 2;
        -: 1043:            }
        -: 1044:            else
        -: 1045:            {
        -: 1046:                //trash 2 cards in hand
    #####: 1047:                discardCard(choice2, currentPlayer, state, 1);
    #####: 1048:                discardCard(choice3, currentPlayer, state, 1);
        -: 1049:            }
        -: 1050:
        -: 1051:            //discard card from hand
    #####: 1052:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1053:            return 0;
        -: 1054:
        -: 1055:        case tribute:
    #####: 1056:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1057:                if (state->deckCount[nextPlayer] > 0){
    #####: 1058:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1059:                    state->deckCount[nextPlayer]--;
        -: 1060:                }
    #####: 1061:                else if (state->discardCount[nextPlayer] > 0){
    #####: 1062:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1063:                    state->discardCount[nextPlayer]--;
        -: 1064:                }
        -: 1065:                else{
        -: 1066:                    //No Card to Reveal
        -: 1067:                    if (DEBUG){
        -: 1068:                        printf("No cards to reveal\n");
        -: 1069:                    }
        -: 1070:                }
        -: 1071:            }
        -: 1072:
        -: 1073:            else{
    #####: 1074:                if (state->deckCount[nextPlayer] == 0){
    #####: 1075:                    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1076:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1077:                        state->deckCount[nextPlayer]++;
    #####: 1078:                        state->discard[nextPlayer][i] = -1;
    #####: 1079:                        state->discardCount[nextPlayer]--;
        -: 1080:                    }
        -: 1081:
    #####: 1082:                    shuffle(nextPlayer,state);//Shuffle the deck
        -: 1083:                }
    #####: 1084:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1085:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1086:                state->deckCount[nextPlayer]--;
    #####: 1087:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1088:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1089:                state->deckCount[nextPlayer]--;
        -: 1090:            }
        -: 1091:
    #####: 1092:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1093:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1094:                state->playedCardCount++;
    #####: 1095:                tributeRevealedCards[1] = -1;
        -: 1096:            }
        -: 1097:
    #####: 1098:            for (i = 0; i <= 2; i ++){
    #####: 1099:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1100:                    state->coins += 2;
        -: 1101:                }
        -: 1102:
    #####: 1103:                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1104:                    drawCard(currentPlayer, state);
    #####: 1105:                    drawCard(currentPlayer, state);
        -: 1106:                }
        -: 1107:                else{//Action Card
    #####: 1108:                    state->numActions = state->numActions + 2;
        -: 1109:                }
        -: 1110:            }
        -: 1111:
    #####: 1112:            return 0;
        -: 1113:
        -: 1114:        case ambassador:
    #####: 1115:            j = 0;		//used to check if player has enough cards to discard
        -: 1116:
    #####: 1117:            if (choice2 > 2 || choice2 < 0)
        -: 1118:            {
    #####: 1119:                return -1;
        -: 1120:            }
        -: 1121:
    #####: 1122:            if (choice1 == handPos)
        -: 1123:            {
    #####: 1124:                return -1;
        -: 1125:            }
        -: 1126:
    #####: 1127:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1128:            {
    #####: 1129:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1130:                {
    #####: 1131:                    j++;
        -: 1132:                }
        -: 1133:            }
    #####: 1134:            if (j < choice2)
        -: 1135:            {
    #####: 1136:                return -1;
        -: 1137:            }
        -: 1138:
        -: 1139:            if (DEBUG)
        -: 1140:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1141:
        -: 1142:            //increase supply count for choosen card by amount being discarded
    #####: 1143:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1144:
        -: 1145:            //each other player gains a copy of revealed card
    #####: 1146:            for (i = 0; i < state->numPlayers; i++)
        -: 1147:            {
    #####: 1148:                if (i != currentPlayer)
        -: 1149:                {
    #####: 1150:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1151:                }
        -: 1152:            }
        -: 1153:
        -: 1154:            //discard played card from hand
    #####: 1155:            discardCard(handPos, currentPlayer, state, 0);
        -: 1156:
        -: 1157:            //trash copies of cards returned to supply
    #####: 1158:            for (j = 0; j < choice2; j++)
        -: 1159:            {
    #####: 1160:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1161:                {
    #####: 1162:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1163:                    {
    #####: 1164:                        discardCard(i, currentPlayer, state, 1);
    #####: 1165:                        break;
        -: 1166:                    }
        -: 1167:                }
        -: 1168:            }
        -: 1169:
    #####: 1170:            return 0;
        -: 1171:
        -: 1172:        case cutpurse:
        -: 1173:
    #####: 1174:            updateCoins(currentPlayer, state, 2);
    #####: 1175:            for (i = 0; i < state->numPlayers; i++)
        -: 1176:            {
    #####: 1177:                if (i != currentPlayer)
        -: 1178:                {
    #####: 1179:                    for (j = 0; j < state->handCount[i]; j++)
        -: 1180:                    {
    #####: 1181:                        if (state->hand[i][j] == copper)
        -: 1182:                        {
    #####: 1183:                            discardCard(j, i, state, 0);
    #####: 1184:                            break;
        -: 1185:                        }
    #####: 1186:                        if (j == state->handCount[i])
        -: 1187:                        {
    #####: 1188:                            for (k = 0; k < state->handCount[i]; k++)
        -: 1189:                            {
        -: 1190:                                if (DEBUG)
        -: 1191:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1192:                            }
    #####: 1193:                            break;
        -: 1194:                        }
        -: 1195:                    }
        -: 1196:
        -: 1197:                }
        -: 1198:
        -: 1199:            }
        -: 1200:
        -: 1201:            //discard played card from hand
    #####: 1202:            discardCard(handPos, currentPlayer, state, 0);
        -: 1203:
    #####: 1204:            return 0;
        -: 1205:
        -: 1206:
        -: 1207:        case embargo:
        -: 1208:
    #####: 1209:            EmbargoCard(currentPlayer, handPos, state, choice1);
    #####: 1210:            return 0;
        -: 1211:
        -: 1212:        case outpost:
        -: 1213:            //set outpost flag
    #####: 1214:            state->outpostPlayed++;
        -: 1215:
        -: 1216:            //discard card
    #####: 1217:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1218:            return 0;
        -: 1219:
        -: 1220:        case salvager:
        -: 1221:            //+1 buy
    #####: 1222:            state->numBuys++;
        -: 1223:
    #####: 1224:            if (choice1)
        -: 1225:            {
        -: 1226:                //gain coins equal to trashed card
    #####: 1227:                state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1228:                //trash card
    #####: 1229:                discardCard(choice1, currentPlayer, state, 1);
        -: 1230:            }
        -: 1231:
        -: 1232:            //discard card
    #####: 1233:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1234:            return 0;
        -: 1235:
        -: 1236:        case sea_hag:
    #####: 1237:            for (i = 0; i < state->numPlayers; i++){
    #####: 1238:                if (i != currentPlayer){
    #####: 1239:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1240:                    state->discardCount[i]++;
    #####: 1241:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1242:                }
        -: 1243:            }
    #####: 1244:            return 0;
        -: 1245:
        -: 1246:        case treasure_map:
        -: 1247:            //search hand for another treasure_map
    #####: 1248:            index = -1;
    #####: 1249:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1250:            {
    #####: 1251:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1252:                {
    #####: 1253:                    index = i;
    #####: 1254:                    break;
        -: 1255:                }
        -: 1256:            }
    #####: 1257:            if (index > -1)
        -: 1258:            {
        -: 1259:                //trash both treasure cards
    #####: 1260:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1261:                discardCard(index, currentPlayer, state, 1);
        -: 1262:
        -: 1263:                //gain 4 Gold cards
    #####: 1264:                for (i = 0; i < 4; i++)
        -: 1265:                {
    #####: 1266:                    gainCard(gold, state, 1, currentPlayer);
        -: 1267:                }
        -: 1268:
        -: 1269:                //return success
    #####: 1270:                return 1;
        -: 1271:            }
        -: 1272:
        -: 1273:            //no second treasure_map found in hand
    #####: 1274:            return -1;
        -: 1275:    }
        -: 1276:
    #####: 1277:    return -1;
        -: 1278:}
        -: 1279:
        1: 1280:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1281:{
        -: 1282:
        -: 1283:    //if card is not trashed, added to Played pile
        1: 1284:    if (trashFlag < 1)
        -: 1285:    {
        -: 1286:        //add card to played pile
        1: 1287:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        1: 1288:        state->playedCardCount++;
        -: 1289:    }
        -: 1290:
        -: 1291:    //set played card to -1
        1: 1292:    state->hand[currentPlayer][handPos] = -1;
        -: 1293:
        -: 1294:    //remove card from player's hand
        1: 1295:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1296:    {
        -: 1297:        //reduce number of cards in hand
    #####: 1298:        state->handCount[currentPlayer]--;
        -: 1299:    }
        1: 1300:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1301:    {
        -: 1302:        //reduce number of cards in hand
    #####: 1303:        state->handCount[currentPlayer]--;
        -: 1304:    }
        -: 1305:    else
        -: 1306:    {
        -: 1307:        //replace discarded card with last card in hand
        1: 1308:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1309:        //set last card to -1
        1: 1310:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1311:        //reduce number of cards in hand
        1: 1312:        state->handCount[currentPlayer]--;
        -: 1313:    }
        -: 1314:
        1: 1315:    return 0;
        -: 1316:}
        -: 1317:
    #####: 1318:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1319:{
        -: 1320:    //Note: supplyPos is enum of choosen card
        -: 1321:
        -: 1322:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1323:    if ( supplyCount(supplyPos, state) < 1 )
        -: 1324:    {
    #####: 1325:        return -1;
        -: 1326:    }
        -: 1327:
        -: 1328:    //added card for [whoseTurn] current player:
        -: 1329:    // toFlag = 0 : add to discard
        -: 1330:    // toFlag = 1 : add to deck
        -: 1331:    // toFlag = 2 : add to hand
        -: 1332:
    #####: 1333:    if (toFlag == 1)
        -: 1334:    {
    #####: 1335:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1336:        state->deckCount[player]++;
        -: 1337:    }
    #####: 1338:    else if (toFlag == 2)
        -: 1339:    {
    #####: 1340:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1341:        state->handCount[player]++;
        -: 1342:    }
        -: 1343:    else
        -: 1344:    {
    #####: 1345:        state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1346:        state->discardCount[player]++;
        -: 1347:    }
        -: 1348:
        -: 1349:    //decrease number in supply pile
    #####: 1350:    state->supplyCount[supplyPos]--;
        -: 1351:
    #####: 1352:    return 0;
        -: 1353:}
        -: 1354:
        1: 1355:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1356:{
        -: 1357:    int i;
        -: 1358:
        -: 1359:    //reset coin count
        1: 1360:    state->coins = 0;
        -: 1361:
        -: 1362:    //add coins for each Treasure card in player's hand
        6: 1363:    for (i = 0; i < state->handCount[player]; i++)
        -: 1364:    {
        5: 1365:        if (state->hand[player][i] == copper)
        -: 1366:        {
        4: 1367:            state->coins += 1;
        -: 1368:        }
        1: 1369:        else if (state->hand[player][i] == silver)
        -: 1370:        {
    #####: 1371:            state->coins += 2;
        -: 1372:        }
        1: 1373:        else if (state->hand[player][i] == gold)
        -: 1374:        {
    #####: 1375:            state->coins += 3;
        -: 1376:        }
        -: 1377:    }
        -: 1378:
        -: 1379:    //add bonus
        1: 1380:    state->coins += bonus;
        -: 1381:
        1: 1382:    return 0;
        -: 1383:}
        -: 1384:
        -: 1385:
        -: 1386://end of dominion.c
        -: 1387:
cardtest3.c:
----------------- Testing Card: smithy ----------------

TEST 1: player 1 draws 3 cards from deck
FAILED

TEST 2: player 1 has 2 more cards in hand
FAILED

 >>>>> TEST FAILED smithy, Failed Cases: 2 <<<<<

File 'dominion.c'
Lines executed:18.73% of 566
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void* a, const void* b) {
       30:    9:    if (*(int*)a > *(int*)b)
    #####:   10:        return 1;
       30:   11:    if (*(int*)a < *(int*)b)
        8:   12:        return -1;
       22:   13:    return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:
        -:   40:    int i;
        -:   41:    int j;
        -:   42:    int it;
        -:   43:    //set up random number generator
        1:   44:    SelectStream(1);
        1:   45:    PutSeed((long)randomSeed);
        -:   46:
        -:   47:    //check number of players
        1:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
        1:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
       11:   57:    for (i = 0; i < 10; i++)
        -:   58:    {
      110:   59:        for (j = 0; j < 10; j++)
        -:   60:        {
      100:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
        1:   73:    if (numPlayers == 2)
        -:   74:    {
        1:   75:        state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:    else if (numPlayers == 3)
        -:   78:    {
    #####:   79:        state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
        1:   87:    if (numPlayers == 2)
        -:   88:    {
        1:   89:        state->supplyCount[estate] = 8;
        1:   90:        state->supplyCount[duchy] = 8;
        1:   91:        state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:    else
        -:   94:    {
    #####:   95:        state->supplyCount[estate] = 12;
    #####:   96:        state->supplyCount[duchy] = 12;
    #####:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
        1:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:    state->supplyCount[silver] = 40;
        1:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
       21:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      165:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:        {
      155:  110:            if (kingdomCards[j] == i)
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
       10:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:                {
        4:  115:                    if (numPlayers == 2){
        2:  116:                        state->supplyCount[i] = 8;
        -:  117:                    }
    #####:  118:                    else{ state->supplyCount[i] = 12; }
        -:  119:                }
        -:  120:                else
        -:  121:                {
        8:  122:                    state->supplyCount[i] = 10;
        -:  123:                }
       10:  124:                break;
        -:  125:            }
        -:  126:            else    //card is not in the set choosen for the game
        -:  127:            {
      145:  128:                state->supplyCount[i] = -1;
        -:  129:            }
        -:  130:        }
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:    ////////////////////////
        -:  135:    //supply intilization complete
        -:  136:
        -:  137:    //set player decks
        3:  138:    for (i = 0; i < numPlayers; i++)
        -:  139:    {
        2:  140:        state->deckCount[i] = 0;
        8:  141:        for (j = 0; j < 3; j++)
        -:  142:        {
        6:  143:            state->deck[i][j] = estate;
        6:  144:            state->deckCount[i]++;
        -:  145:        }
       16:  146:        for (j = 3; j < 10; j++)
        -:  147:        {
       14:  148:            state->deck[i][j] = copper;
       14:  149:            state->deckCount[i]++;
        -:  150:        }
        -:  151:    }
        -:  152:
        -:  153:    //shuffle player decks
        3:  154:    for (i = 0; i < numPlayers; i++)
        -:  155:    {
        2:  156:        if ( shuffle(i, state) < 0 )
        -:  157:        {
    #####:  158:            return -1;
        -:  159:        }
        -:  160:    }
        -:  161:
        -:  162:    //draw player hands
        3:  163:    for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:        //initialize hand size to zero
        2:  166:        state->handCount[i] = 0;
        2:  167:        state->discardCount[i] = 0;
        -:  168:        //draw 5 cards
        -:  169:        // for (j = 0; j < 5; j++)
        -:  170:        //	{
        -:  171:        //	  drawCard(i, state);
        -:  172:        //	}
        -:  173:    }
        -:  174:
        -:  175:    //set embargo tokens to 0 for all supply piles
       28:  176:    for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       27:  178:        state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:    //initialize first player's turn
        1:  182:    state->outpostPlayed = 0;
        1:  183:    state->phase = 0;
        1:  184:    state->numActions = 1;
        1:  185:    state->numBuys = 1;
        1:  186:    state->playedCardCount = 0;
        1:  187:    state->whoseTurn = 0;
        1:  188:    state->handCount[state->whoseTurn] = 0;
        -:  189:    //int it; move to top
        -:  190:
        -:  191:    //Moved draw cards to here, only drawing at the start of a turn
        6:  192:    for (it = 0; it < 5; it++){
        5:  193:        drawCard(state->whoseTurn, state);
        -:  194:    }
        -:  195:
        1:  196:    updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:    return 0;
        -:  199:}
        -:  200:
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:    int newDeck[MAX_DECK];
        2:  205:    int newDeckPos = 0;
        -:  206:    int card;
        -:  207:    int i;
        -:  208:
        2:  209:    if (state->deckCount[player] < 1)
    #####:  210:        return -1;
        2:  211:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:    while (state->deckCount[player] > 0) {
       20:  215:        card = floor(Random() * state->deckCount[player]);
       20:  216:        newDeck[newDeckPos] = state->deck[player][card];
       20:  217:        newDeckPos++;
       70:  218:        for (i = card; i < state->deckCount[player]-1; i++) {
       50:  219:            state->deck[player][i] = state->deck[player][i+1];
        -:  220:        }
       20:  221:        state->deckCount[player]--;
        -:  222:    }
       22:  223:    for (i = 0; i < newDeckPos; i++) {
       20:  224:        state->deck[player][i] = newDeck[i];
       20:  225:        state->deckCount[player]++;
        -:  226:    }
        -:  227:
        2:  228:    return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:    int card;
    #####:  234:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:    //check if it is the right phase
    #####:  237:    if (state->phase != 0)
        -:  238:    {
    #####:  239:        return -1;
        -:  240:    }
        -:  241:
        -:  242:    //check if player has enough actions
    #####:  243:    if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:        return -1;
        -:  246:    }
        -:  247:
        -:  248:    //get card played
    #####:  249:    card = handCard(handPos, state);
        -:  250:
        -:  251:    //check if selected card is an action
    #####:  252:    if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:        return -1;
        -:  255:    }
        -:  256:
        -:  257:    //play card
    #####:  258:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:        return -1;
        -:  261:    }
        -:  262:
        -:  263:    //reduce number of actions
    #####:  264:    state->numActions--;
        -:  265:
        -:  266:    //update coins (Treasure cards may be added with card draws)
    #####:  267:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:    return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:    int who;
        -:  274:    if (DEBUG){
        -:  275:        printf("Entering buyCard...\n");
        -:  276:    }
        -:  277:
        -:  278:    // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:    who = state->whoseTurn;
        -:  281:
    #####:  282:    if (state->numBuys < 1){
        -:  283:        if (DEBUG)
        -:  284:            printf("You do not have any buys left\n");
    #####:  285:        return -1;
    #####:  286:    } else if (supplyCount(supplyPos, state) <1){
        -:  287:        if (DEBUG)
        -:  288:            printf("There are not any of that type of card left\n");
    #####:  289:        return -1;
    #####:  290:    } else if (state->coins < getCost(supplyPos)){
        -:  291:        if (DEBUG)
        -:  292:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:        return -1;
        -:  294:    } else {
    #####:  295:        state->phase=1;
        -:  296:        //state->supplyCount[supplyPos]--;
    #####:  297:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:        state->numBuys--;
        -:  301:        if (DEBUG)
        -:  302:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:    }
        -:  304:
        -:  305:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:    //state->discardCount[who]++;
        -:  307:
    #####:  308:    return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:    return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:    int currentPlayer = whoseTurn(state);
    #####:  317:    return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:    return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:    int i;
    #####:  326:    int count = 0;
        -:  327:
    #####:  328:    for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:        if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:    for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:        if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:    for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:        if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:    return count;
        -:  344:}
        -:  345:
        1:  346:int whoseTurn(struct gameState *state) {
        1:  347:    return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:    int k;
        -:  352:    int i;
    #####:  353:    int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:    //Discard hand
    #####:  356:    for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:    }
    #####:  360:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:    //Code for determining the player
    #####:  363:    if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:    }
        -:  366:    else{
    #####:  367:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:    }
        -:  369:
    #####:  370:    state->outpostPlayed = 0;
    #####:  371:    state->phase = 0;
    #####:  372:    state->numActions = 1;
    #####:  373:    state->coins = 0;
    #####:  374:    state->numBuys = 1;
    #####:  375:    state->playedCardCount = 0;
    #####:  376:    state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:    //int k; move to top
        -:  379:    //Next player draws hand
    #####:  380:    for (k = 0; k < 5; k++){
    #####:  381:        drawCard(state->whoseTurn, state);//Draw a card
        -:  382:    }
        -:  383:
        -:  384:    //Update money
    #####:  385:    updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:    return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:    int i;
        -:  392:    int j;
        -:  393:
        -:  394:    //if stack of Province cards is empty, the game ends
    #####:  395:    if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:        return 1;
        -:  398:    }
        -:  399:
        -:  400:    //if three supply pile are at 0, the game ends
    #####:  401:    j = 0;
    #####:  402:    for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:        if (state->supplyCount[i] == 0)
        -:  405:        {
    #####:  406:            j++;
        -:  407:        }
        -:  408:    }
    #####:  409:    if ( j >= 3)
        -:  410:    {
    #####:  411:        return 1;
        -:  412:    }
        -:  413:
    #####:  414:    return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:    int i;
    #####:  420:    int score = 0;
        -:  421:    //score from hand
    #####:  422:    for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:        if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:        if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:        if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:        if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:        if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:    //score from discard
    #####:  433:    for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:        if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:        if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:        if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:        if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:        if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:    //score from deck
    #####:  444:    for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:        if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:        if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:        if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:        if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:        if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:    return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:    int i;
        -:  459:    int j;
        -:  460:    int highScore;
        -:  461:    int currentPlayer;
        -:  462:
        -:  463:    //get score for each player
    #####:  464:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:        //set unused player scores to -9999
    #####:  467:        if (i >= state->numPlayers)
        -:  468:        {
    #####:  469:            players[i] = -9999;
        -:  470:        }
        -:  471:        else
        -:  472:        {
    #####:  473:            players[i] = scoreFor (i, state);
        -:  474:        }
        -:  475:    }
        -:  476:
        -:  477:    //find highest score
    #####:  478:    j = 0;
    #####:  479:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:        if (players[i] > players[j])
        -:  482:        {
    #####:  483:            j = i;
        -:  484:        }
        -:  485:    }
    #####:  486:    highScore = players[j];
        -:  487:
        -:  488:    //add 1 to players who had less turns
    #####:  489:    currentPlayer = whoseTurn(state);
    #####:  490:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:        if ( players[i] == highScore && i > currentPlayer )
        -:  493:        {
    #####:  494:            players[i]++;
        -:  495:        }
        -:  496:    }
        -:  497:
        -:  498:    //find new highest score
    #####:  499:    j = 0;
    #####:  500:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:        if ( players[i] > players[j] )
        -:  503:        {
    #####:  504:            j = i;
        -:  505:        }
        -:  506:    }
    #####:  507:    highScore = players[j];
        -:  508:
        -:  509:    //set winners in array to 1 and rest to 0
    #####:  510:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:        if ( players[i] == highScore )
        -:  513:        {
    #####:  514:            players[i] = 1;
        -:  515:        }
        -:  516:        else
        -:  517:        {
    #####:  518:            players[i] = 0;
        -:  519:        }
        -:  520:    }
        -:  521:
    #####:  522:    return 0;
        -:  523:}
        -:  524:
       10:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:    int deckCounter;
       10:  528:    if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:        //Step 1 Shuffle the discard pile back into a deck
        -:  531:        int i;
        -:  532:        //Move discard to deck
    #####:  533:        for (i = 0; i < state->discardCount[player];i++){
    #####:  534:            state->deck[player][i] = state->discard[player][i];
    #####:  535:            state->discard[player][i] = -1;
        -:  536:        }
        -:  537:
    #####:  538:        state->deckCount[player] = state->discardCount[player];
    #####:  539:        state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:        //Shufffle the deck
    #####:  542:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:        if (DEBUG){//Debug statements
        -:  545:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:        }
        -:  547:
    #####:  548:        state->discardCount[player] = 0;
        -:  549:
        -:  550:        //Step 2 Draw Card
    #####:  551:        count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:        if (DEBUG){//Debug statements
        -:  554:            printf("Current hand count: %d\n", count);
        -:  555:        }
        -:  556:
    #####:  557:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:        if (deckCounter == 0)
    #####:  560:            return -1;
        -:  561:
    #####:  562:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:        state->deckCount[player]--;
    #####:  564:        state->handCount[player]++;//Increment hand count
        -:  565:    }
        -:  566:
        -:  567:    else{
       10:  568:        int count = state->handCount[player];//Get current hand count for player
        -:  569:        int deckCounter;
        -:  570:        if (DEBUG){//Debug statements
        -:  571:            printf("Current hand count: %d\n", count);
        -:  572:        }
        -:  573:
       10:  574:        deckCounter = state->deckCount[player];//Create holder for the deck count
       10:  575:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       10:  576:        state->deckCount[player]--;
       10:  577:        state->handCount[player]++;//Increment hand count
        -:  578:    }
        -:  579:
       10:  580:    return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:    switch( cardNumber )
        -:  586:    {
        -:  587:        case curse:
    #####:  588:            return 0;
        -:  589:        case estate:
    #####:  590:            return 2;
        -:  591:        case duchy:
    #####:  592:            return 5;
        -:  593:        case province:
    #####:  594:            return 8;
        -:  595:        case copper:
    #####:  596:            return 0;
        -:  597:        case silver:
    #####:  598:            return 3;
        -:  599:        case gold:
    #####:  600:            return 6;
        -:  601:        case adventurer:
    #####:  602:            return 6;
        -:  603:        case council_room:
    #####:  604:            return 5;
        -:  605:        case feast:
    #####:  606:            return 4;
        -:  607:        case gardens:
    #####:  608:            return 4;
        -:  609:        case mine:
    #####:  610:            return 5;
        -:  611:        case remodel:
    #####:  612:            return 4;
        -:  613:        case smithy:
    #####:  614:            return 4;
        -:  615:        case village:
    #####:  616:            return 3;
        -:  617:        case baron:
    #####:  618:            return 4;
        -:  619:        case great_hall:
    #####:  620:            return 3;
        -:  621:        case minion:
    #####:  622:            return 5;
        -:  623:        case steward:
    #####:  624:            return 3;
        -:  625:        case tribute:
    #####:  626:            return 5;
        -:  627:        case ambassador:
    #####:  628:            return 3;
        -:  629:        case cutpurse:
    #####:  630:            return 4;
        -:  631:        case embargo:
    #####:  632:            return 2;
        -:  633:        case outpost:
    #####:  634:            return 5;
        -:  635:        case salvager:
    #####:  636:            return 4;
        -:  637:        case sea_hag:
    #####:  638:            return 4;
        -:  639:        case treasure_map:
    #####:  640:            return 4;
        -:  641:    }
        -:  642:
    #####:  643:    return -1;
        -:  644:}
        -:  645:
        -:  646:
        -:  647:
        1:  648:int SmithyCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  649:
        -:  650:    //+3 Cards
        -:  651:    int i;
        6:  652:    for (i = 0; i < 5; i++)
        -:  653:    {
        5:  654:        drawCard(currentPlayer, state);
        -:  655:    }
        -:  656:
        -:  657:    //discard card from hand
        -:  658:    //discardCard(handPos, currentPlayer, state, 0);
        1:  659:    return 0;
        -:  660://bug introduced: draw 5 cards instead of 3; do not discard a card
        -:  661:}
        -:  662:
        -:  663:
    #####:  664:int AdventurerCard(int currentPlayer, struct gameState *state, int drawntreasure, int temphand[], int cardDrawn, int z) {
        -:  665:
    #####:  666:    while(drawntreasure<5){
    #####:  667:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  668:            shuffle(currentPlayer, state);
        -:  669:        }
    #####:  670:        drawCard(currentPlayer, state);
    #####:  671:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  672:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  673:            drawntreasure++;
        -:  674:        else{
    #####:  675:            temphand[z]=cardDrawn;
    #####:  676:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  677:            z++;
        -:  678:        }
        -:  679:    }
    #####:  680:    while(z-1>=0){
    #####:  681:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  682:        z=z-1;
        -:  683:    }
    #####:  684:    return 0;
        -:  685:// bug introduced: player is able to draw 5 treasure cards instead of 2.
        -:  686:}
        -:  687:
        -:  688:
    #####:  689:int VillageCard(int currentPlayer, struct gameState *state, int handPos){
        -:  690:
        -:  691:    //+1 Card
    #####:  692:    drawCard(currentPlayer, state);
    #####:  693:    drawCard(currentPlayer, state);
    #####:  694:    drawCard(currentPlayer, state);
        -:  695:
        -:  696:    //+2 Actions
    #####:  697:    state->numActions = state->numActions + 10;
        -:  698:
        -:  699:    //discard played card from hand
    #####:  700:    discardCard(handPos, currentPlayer, state, 0);
    #####:  701:    return 0;
        -:  702:// bug introduced: increase action points by 10 instead of 2 and draw 3 cards instead of 1
        -:  703:}
        -:  704:
        -:  705:
    #####:  706:int GreatHallCard(int currentPlayer, struct gameState *state, int handPos){
        -:  707:    //+1 Card
    #####:  708:    drawCard(currentPlayer, state);
        -:  709:
        -:  710:    //+1 Actions
    #####:  711:    state->numActions++;
        -:  712:
        -:  713:    //discard card from hand
    #####:  714:    discardCard(handPos, currentPlayer, state, 0);
    #####:  715:    return 0;
        -:  716:}
        -:  717:
        -:  718:
    #####:  719:int EmbargoCard(int currentPlayer, int handPos, struct gameState *state, int choice1) {
        -:  720://+2 Coins
    #####:  721:    state->coins = state->coins + 20;
        -:  722:
        -:  723:    //see if selected pile is in play
    #####:  724:    if ( state->supplyCount[choice1] == -1 )
        -:  725:    {
    #####:  726:        return -1;
        -:  727:    }
        -:  728:
        -:  729:    //add embargo token to selected supply pile
    #####:  730:    state->embargoTokens[choice1]++;
    #####:  731:    state->embargoTokens[choice1]++;
        -:  732:
        -:  733:    //trash card
    #####:  734:    discardCard(handPos, currentPlayer, state, 1);
        -:  735:
        -:  736:
    #####:  737:    return 0;
        -:  738://bug introduced: increase state->coins by 20 instead of 2, and add 2 embargo tokens instead of one
        -:  739:}
        -:  740:
        -:  741:
        -:  742:
        1:  743:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  744:{
        -:  745:    int i;
        -:  746:    int j;
        -:  747:    int k;
        -:  748:    int x;
        -:  749:    int index;
        1:  750:    int currentPlayer = whoseTurn(state);
        1:  751:    int nextPlayer = currentPlayer + 1;
        -:  752:
        1:  753:    int tributeRevealedCards[2] = {-1, -1};
        -:  754:    int temphand[MAX_HAND];// moved above the if statement
        1:  755:    int drawntreasure=0;
        1:  756:    int cardDrawn=0;
        1:  757:    int z = 0;// this is the counter for the temp hand
        1:  758:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  759:        nextPlayer = 0;
        -:  760:    }
        -:  761:
        -:  762:
        -:  763:    //uses switch to select card and perform actions
        1:  764:    switch( card )
        -:  765:    {
        -:  766:        case adventurer:
        -:  767:
    #####:  768:            AdventurerCard(currentPlayer, state, drawntreasure, temphand, cardDrawn, z);
        -:  769:
    #####:  770:            return 0;
        -:  771:
        -:  772:        case council_room:
        -:  773:            //+4 Cards
    #####:  774:            for (i = 0; i < 4; i++)
        -:  775:            {
    #####:  776:                drawCard(currentPlayer, state);
        -:  777:            }
        -:  778:
        -:  779:            //+1 Buy
    #####:  780:            state->numBuys++;
        -:  781:
        -:  782:            //Each other player draws a card
    #####:  783:            for (i = 0; i < state->numPlayers; i++)
        -:  784:            {
    #####:  785:                if ( i != currentPlayer )
        -:  786:                {
    #####:  787:                    drawCard(i, state);
        -:  788:                }
        -:  789:            }
        -:  790:
        -:  791:            //put played card in played card pile
    #####:  792:            discardCard(handPos, currentPlayer, state, 0);
        -:  793:
    #####:  794:            return 0;
        -:  795:
        -:  796:        case feast:
        -:  797:            //gain card with cost up to 5
        -:  798:            //Backup hand
    #####:  799:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  800:                temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  801:                state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  802:            }
        -:  803:            //Backup hand
        -:  804:
        -:  805:            //Update Coins for Buy
    #####:  806:            updateCoins(currentPlayer, state, 5);
    #####:  807:            x = 1;//Condition to loop on
    #####:  808:            while( x == 1) {//Buy one card
    #####:  809:                if (supplyCount(choice1, state) <= 0){
        -:  810:                    if (DEBUG)
        -:  811:                        printf("None of that card left, sorry!\n");
        -:  812:
        -:  813:                    if (DEBUG){
        -:  814:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  815:                    }
        -:  816:                }
    #####:  817:                else if (state->coins < getCost(choice1)){
    #####:  818:                    printf("That card is too expensive!\n");
        -:  819:
        -:  820:                    if (DEBUG){
        -:  821:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  822:                    }
        -:  823:                }
        -:  824:                else{
        -:  825:
        -:  826:                    if (DEBUG){
        -:  827:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:                    }
        -:  829:
    #####:  830:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  831:                    x = 0;//No more buying cards
        -:  832:
        -:  833:                    if (DEBUG){
        -:  834:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  835:                    }
        -:  836:
        -:  837:                }
        -:  838:            }
        -:  839:
        -:  840:            //Reset Hand
    #####:  841:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  842:                state->hand[currentPlayer][i] = temphand[i];
    #####:  843:                temphand[i] = -1;
        -:  844:            }
        -:  845:            //Reset Hand
        -:  846:
    #####:  847:            return 0;
        -:  848:
        -:  849:        case gardens:
    #####:  850:            return -1;
        -:  851:
        -:  852:        case mine:
    #####:  853:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  856:            {
    #####:  857:                return -1;
        -:  858:            }
        -:  859:
    #####:  860:            if (choice2 > treasure_map || choice2 < curse)
        -:  861:            {
    #####:  862:                return -1;
        -:  863:            }
        -:  864:
    #####:  865:            if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  866:            {
    #####:  867:                return -1;
        -:  868:            }
        -:  869:
    #####:  870:            gainCard(choice2, state, 2, currentPlayer);
        -:  871:
        -:  872:            //discard card from hand
    #####:  873:            discardCard(handPos, currentPlayer, state, 0);
        -:  874:
        -:  875:            //discard trashed card
    #####:  876:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  877:            {
    #####:  878:                if (state->hand[currentPlayer][i] == j)
        -:  879:                {
    #####:  880:                    discardCard(i, currentPlayer, state, 0);
    #####:  881:                    break;
        -:  882:                }
        -:  883:            }
        -:  884:
    #####:  885:            return 0;
        -:  886:
        -:  887:        case remodel:
    #####:  888:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  889:
    #####:  890:            if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  891:            {
    #####:  892:                return -1;
        -:  893:            }
        -:  894:
    #####:  895:            gainCard(choice2, state, 0, currentPlayer);
        -:  896:
        -:  897:            //discard card from hand
    #####:  898:            discardCard(handPos, currentPlayer, state, 0);
        -:  899:
        -:  900:            //discard trashed card
    #####:  901:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  902:            {
    #####:  903:                if (state->hand[currentPlayer][i] == j)
        -:  904:                {
    #####:  905:                    discardCard(i, currentPlayer, state, 0);
    #####:  906:                    break;
        -:  907:                }
        -:  908:            }
        -:  909:
        -:  910:
    #####:  911:            return 0;
        -:  912:
        -:  913:        case smithy:
        -:  914:
        1:  915:            SmithyCard(currentPlayer, state, handPos);
        1:  916:            return 0;
        -:  917:
        -:  918:        case village:
        -:  919:
    #####:  920:            VillageCard(currentPlayer, state, handPos);
        -:  921:
    #####:  922:            return 0;
        -:  923:
        -:  924:        case baron:
    #####:  925:            state->numBuys++;//Increase buys by 1!
    #####:  926:            if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  927:                int p = 0;//Iterator for hand!
    #####:  928:                int card_not_discarded = 1;//Flag for discard set!
    #####:  929:                while(card_not_discarded){
    #####:  930:                    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  931:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  932:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  933:                        state->discardCount[currentPlayer]++;
    #####:  934:                        for (;p < state->handCount[currentPlayer]; p++){
    #####:  935:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  936:                        }
    #####:  937:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  938:                        state->handCount[currentPlayer]--;
    #####:  939:                        card_not_discarded = 0;//Exit the loop
        -:  940:                    }
    #####:  941:                    else if (p > state->handCount[currentPlayer]){
        -:  942:                        if(DEBUG) {
        -:  943:                            printf("No estate cards in your hand, invalid choice\n");
        -:  944:                            printf("Must gain an estate if there are any\n");
        -:  945:                        }
    #####:  946:                        if (supplyCount(estate, state) > 0){
    #####:  947:                            gainCard(estate, state, 0, currentPlayer);
    #####:  948:                            state->supplyCount[estate]--;//Decrement estates
    #####:  949:                            if (supplyCount(estate, state) == 0){
    #####:  950:                                isGameOver(state);
        -:  951:                            }
        -:  952:                        }
    #####:  953:                        card_not_discarded = 0;//Exit the loop
        -:  954:                    }
        -:  955:
        -:  956:                    else{
    #####:  957:                        p++;//Next card
        -:  958:                    }
        -:  959:                }
        -:  960:            }
        -:  961:
        -:  962:            else{
    #####:  963:                if (supplyCount(estate, state) > 0){
    #####:  964:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  965:                    state->supplyCount[estate]--;//Decrement Estates
    #####:  966:                    if (supplyCount(estate, state) == 0){
    #####:  967:                        isGameOver(state);
        -:  968:                    }
        -:  969:                }
        -:  970:            }
        -:  971:
        -:  972:
    #####:  973:            return 0;
        -:  974:
        -:  975:        case great_hall:
        -:  976:
    #####:  977:            GreatHallCard(currentPlayer, state, handPos);
        -:  978:
    #####:  979:            return 0;
        -:  980:
        -:  981:        case minion:
        -:  982:            //+1 action
    #####:  983:            state->numActions++;
        -:  984:
        -:  985:            //discard card from hand
    #####:  986:            discardCard(handPos, currentPlayer, state, 0);
        -:  987:
    #####:  988:            if (choice1)		//+2 coins
        -:  989:            {
    #####:  990:                state->coins = state->coins + 2;
        -:  991:            }
        -:  992:
    #####:  993:            else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  994:            {
        -:  995:                //discard hand
    #####:  996:                while(numHandCards(state) > 0)
        -:  997:                {
    #####:  998:                    discardCard(handPos, currentPlayer, state, 0);
        -:  999:                }
        -: 1000:
        -: 1001:                //draw 4
    #####: 1002:                for (i = 0; i < 4; i++)
        -: 1003:                {
    #####: 1004:                    drawCard(currentPlayer, state);
        -: 1005:                }
        -: 1006:
        -: 1007:                //other players discard hand and redraw if hand size > 4
    #####: 1008:                for (i = 0; i < state->numPlayers; i++)
        -: 1009:                {
    #####: 1010:                    if (i != currentPlayer)
        -: 1011:                    {
    #####: 1012:                        if ( state->handCount[i] > 4 )
        -: 1013:                        {
        -: 1014:                            //discard hand
    #####: 1015:                            while( state->handCount[i] > 0 )
        -: 1016:                            {
    #####: 1017:                                discardCard(handPos, i, state, 0);
        -: 1018:                            }
        -: 1019:
        -: 1020:                            //draw 4
    #####: 1021:                            for (j = 0; j < 4; j++)
        -: 1022:                            {
    #####: 1023:                                drawCard(i, state);
        -: 1024:                            }
        -: 1025:                        }
        -: 1026:                    }
        -: 1027:                }
        -: 1028:
        -: 1029:            }
    #####: 1030:            return 0;
        -: 1031:
        -: 1032:        case steward:
    #####: 1033:            if (choice1 == 1)
        -: 1034:            {
        -: 1035:                //+2 cards
    #####: 1036:                drawCard(currentPlayer, state);
    #####: 1037:                drawCard(currentPlayer, state);
        -: 1038:            }
    #####: 1039:            else if (choice1 == 2)
        -: 1040:            {
        -: 1041:                //+2 coins
    #####: 1042:                state->coins = state->coins + 2;
        -: 1043:            }
        -: 1044:            else
        -: 1045:            {
        -: 1046:                //trash 2 cards in hand
    #####: 1047:                discardCard(choice2, currentPlayer, state, 1);
    #####: 1048:                discardCard(choice3, currentPlayer, state, 1);
        -: 1049:            }
        -: 1050:
        -: 1051:            //discard card from hand
    #####: 1052:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1053:            return 0;
        -: 1054:
        -: 1055:        case tribute:
    #####: 1056:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1057:                if (state->deckCount[nextPlayer] > 0){
    #####: 1058:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1059:                    state->deckCount[nextPlayer]--;
        -: 1060:                }
    #####: 1061:                else if (state->discardCount[nextPlayer] > 0){
    #####: 1062:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1063:                    state->discardCount[nextPlayer]--;
        -: 1064:                }
        -: 1065:                else{
        -: 1066:                    //No Card to Reveal
        -: 1067:                    if (DEBUG){
        -: 1068:                        printf("No cards to reveal\n");
        -: 1069:                    }
        -: 1070:                }
        -: 1071:            }
        -: 1072:
        -: 1073:            else{
    #####: 1074:                if (state->deckCount[nextPlayer] == 0){
    #####: 1075:                    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1076:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1077:                        state->deckCount[nextPlayer]++;
    #####: 1078:                        state->discard[nextPlayer][i] = -1;
    #####: 1079:                        state->discardCount[nextPlayer]--;
        -: 1080:                    }
        -: 1081:
    #####: 1082:                    shuffle(nextPlayer,state);//Shuffle the deck
        -: 1083:                }
    #####: 1084:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1085:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1086:                state->deckCount[nextPlayer]--;
    #####: 1087:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1088:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1089:                state->deckCount[nextPlayer]--;
        -: 1090:            }
        -: 1091:
    #####: 1092:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1093:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1094:                state->playedCardCount++;
    #####: 1095:                tributeRevealedCards[1] = -1;
        -: 1096:            }
        -: 1097:
    #####: 1098:            for (i = 0; i <= 2; i ++){
    #####: 1099:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1100:                    state->coins += 2;
        -: 1101:                }
        -: 1102:
    #####: 1103:                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1104:                    drawCard(currentPlayer, state);
    #####: 1105:                    drawCard(currentPlayer, state);
        -: 1106:                }
        -: 1107:                else{//Action Card
    #####: 1108:                    state->numActions = state->numActions + 2;
        -: 1109:                }
        -: 1110:            }
        -: 1111:
    #####: 1112:            return 0;
        -: 1113:
        -: 1114:        case ambassador:
    #####: 1115:            j = 0;		//used to check if player has enough cards to discard
        -: 1116:
    #####: 1117:            if (choice2 > 2 || choice2 < 0)
        -: 1118:            {
    #####: 1119:                return -1;
        -: 1120:            }
        -: 1121:
    #####: 1122:            if (choice1 == handPos)
        -: 1123:            {
    #####: 1124:                return -1;
        -: 1125:            }
        -: 1126:
    #####: 1127:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1128:            {
    #####: 1129:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1130:                {
    #####: 1131:                    j++;
        -: 1132:                }
        -: 1133:            }
    #####: 1134:            if (j < choice2)
        -: 1135:            {
    #####: 1136:                return -1;
        -: 1137:            }
        -: 1138:
        -: 1139:            if (DEBUG)
        -: 1140:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1141:
        -: 1142:            //increase supply count for choosen card by amount being discarded
    #####: 1143:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1144:
        -: 1145:            //each other player gains a copy of revealed card
    #####: 1146:            for (i = 0; i < state->numPlayers; i++)
        -: 1147:            {
    #####: 1148:                if (i != currentPlayer)
        -: 1149:                {
    #####: 1150:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1151:                }
        -: 1152:            }
        -: 1153:
        -: 1154:            //discard played card from hand
    #####: 1155:            discardCard(handPos, currentPlayer, state, 0);
        -: 1156:
        -: 1157:            //trash copies of cards returned to supply
    #####: 1158:            for (j = 0; j < choice2; j++)
        -: 1159:            {
    #####: 1160:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1161:                {
    #####: 1162:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1163:                    {
    #####: 1164:                        discardCard(i, currentPlayer, state, 1);
    #####: 1165:                        break;
        -: 1166:                    }
        -: 1167:                }
        -: 1168:            }
        -: 1169:
    #####: 1170:            return 0;
        -: 1171:
        -: 1172:        case cutpurse:
        -: 1173:
    #####: 1174:            updateCoins(currentPlayer, state, 2);
    #####: 1175:            for (i = 0; i < state->numPlayers; i++)
        -: 1176:            {
    #####: 1177:                if (i != currentPlayer)
        -: 1178:                {
    #####: 1179:                    for (j = 0; j < state->handCount[i]; j++)
        -: 1180:                    {
    #####: 1181:                        if (state->hand[i][j] == copper)
        -: 1182:                        {
    #####: 1183:                            discardCard(j, i, state, 0);
    #####: 1184:                            break;
        -: 1185:                        }
    #####: 1186:                        if (j == state->handCount[i])
        -: 1187:                        {
    #####: 1188:                            for (k = 0; k < state->handCount[i]; k++)
        -: 1189:                            {
        -: 1190:                                if (DEBUG)
        -: 1191:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1192:                            }
    #####: 1193:                            break;
        -: 1194:                        }
        -: 1195:                    }
        -: 1196:
        -: 1197:                }
        -: 1198:
        -: 1199:            }
        -: 1200:
        -: 1201:            //discard played card from hand
    #####: 1202:            discardCard(handPos, currentPlayer, state, 0);
        -: 1203:
    #####: 1204:            return 0;
        -: 1205:
        -: 1206:
        -: 1207:        case embargo:
        -: 1208:
    #####: 1209:            EmbargoCard(currentPlayer, handPos, state, choice1);
    #####: 1210:            return 0;
        -: 1211:
        -: 1212:        case outpost:
        -: 1213:            //set outpost flag
    #####: 1214:            state->outpostPlayed++;
        -: 1215:
        -: 1216:            //discard card
    #####: 1217:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1218:            return 0;
        -: 1219:
        -: 1220:        case salvager:
        -: 1221:            //+1 buy
    #####: 1222:            state->numBuys++;
        -: 1223:
    #####: 1224:            if (choice1)
        -: 1225:            {
        -: 1226:                //gain coins equal to trashed card
    #####: 1227:                state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1228:                //trash card
    #####: 1229:                discardCard(choice1, currentPlayer, state, 1);
        -: 1230:            }
        -: 1231:
        -: 1232:            //discard card
    #####: 1233:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1234:            return 0;
        -: 1235:
        -: 1236:        case sea_hag:
    #####: 1237:            for (i = 0; i < state->numPlayers; i++){
    #####: 1238:                if (i != currentPlayer){
    #####: 1239:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1240:                    state->discardCount[i]++;
    #####: 1241:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1242:                }
        -: 1243:            }
    #####: 1244:            return 0;
        -: 1245:
        -: 1246:        case treasure_map:
        -: 1247:            //search hand for another treasure_map
    #####: 1248:            index = -1;
    #####: 1249:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1250:            {
    #####: 1251:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1252:                {
    #####: 1253:                    index = i;
    #####: 1254:                    break;
        -: 1255:                }
        -: 1256:            }
    #####: 1257:            if (index > -1)
        -: 1258:            {
        -: 1259:                //trash both treasure cards
    #####: 1260:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1261:                discardCard(index, currentPlayer, state, 1);
        -: 1262:
        -: 1263:                //gain 4 Gold cards
    #####: 1264:                for (i = 0; i < 4; i++)
        -: 1265:                {
    #####: 1266:                    gainCard(gold, state, 1, currentPlayer);
        -: 1267:                }
        -: 1268:
        -: 1269:                //return success
    #####: 1270:                return 1;
        -: 1271:            }
        -: 1272:
        -: 1273:            //no second treasure_map found in hand
    #####: 1274:            return -1;
        -: 1275:    }
        -: 1276:
    #####: 1277:    return -1;
        -: 1278:}
        -: 1279:
    #####: 1280:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1281:{
        -: 1282:
        -: 1283:    //if card is not trashed, added to Played pile
    #####: 1284:    if (trashFlag < 1)
        -: 1285:    {
        -: 1286:        //add card to played pile
    #####: 1287:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1288:        state->playedCardCount++;
        -: 1289:    }
        -: 1290:
        -: 1291:    //set played card to -1
    #####: 1292:    state->hand[currentPlayer][handPos] = -1;
        -: 1293:
        -: 1294:    //remove card from player's hand
    #####: 1295:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1296:    {
        -: 1297:        //reduce number of cards in hand
    #####: 1298:        state->handCount[currentPlayer]--;
        -: 1299:    }
    #####: 1300:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1301:    {
        -: 1302:        //reduce number of cards in hand
    #####: 1303:        state->handCount[currentPlayer]--;
        -: 1304:    }
        -: 1305:    else
        -: 1306:    {
        -: 1307:        //replace discarded card with last card in hand
    #####: 1308:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1309:        //set last card to -1
    #####: 1310:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1311:        //reduce number of cards in hand
    #####: 1312:        state->handCount[currentPlayer]--;
        -: 1313:    }
        -: 1314:
    #####: 1315:    return 0;
        -: 1316:}
        -: 1317:
    #####: 1318:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1319:{
        -: 1320:    //Note: supplyPos is enum of choosen card
        -: 1321:
        -: 1322:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1323:    if ( supplyCount(supplyPos, state) < 1 )
        -: 1324:    {
    #####: 1325:        return -1;
        -: 1326:    }
        -: 1327:
        -: 1328:    //added card for [whoseTurn] current player:
        -: 1329:    // toFlag = 0 : add to discard
        -: 1330:    // toFlag = 1 : add to deck
        -: 1331:    // toFlag = 2 : add to hand
        -: 1332:
    #####: 1333:    if (toFlag == 1)
        -: 1334:    {
    #####: 1335:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1336:        state->deckCount[player]++;
        -: 1337:    }
    #####: 1338:    else if (toFlag == 2)
        -: 1339:    {
    #####: 1340:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1341:        state->handCount[player]++;
        -: 1342:    }
        -: 1343:    else
        -: 1344:    {
    #####: 1345:        state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1346:        state->discardCount[player]++;
        -: 1347:    }
        -: 1348:
        -: 1349:    //decrease number in supply pile
    #####: 1350:    state->supplyCount[supplyPos]--;
        -: 1351:
    #####: 1352:    return 0;
        -: 1353:}
        -: 1354:
        1: 1355:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1356:{
        -: 1357:    int i;
        -: 1358:
        -: 1359:    //reset coin count
        1: 1360:    state->coins = 0;
        -: 1361:
        -: 1362:    //add coins for each Treasure card in player's hand
        6: 1363:    for (i = 0; i < state->handCount[player]; i++)
        -: 1364:    {
        5: 1365:        if (state->hand[player][i] == copper)
        -: 1366:        {
        4: 1367:            state->coins += 1;
        -: 1368:        }
        1: 1369:        else if (state->hand[player][i] == silver)
        -: 1370:        {
    #####: 1371:            state->coins += 2;
        -: 1372:        }
        1: 1373:        else if (state->hand[player][i] == gold)
        -: 1374:        {
    #####: 1375:            state->coins += 3;
        -: 1376:        }
        -: 1377:    }
        -: 1378:
        -: 1379:    //add bonus
        1: 1380:    state->coins += bonus;
        -: 1381:
        1: 1382:    return 0;
        -: 1383:}
        -: 1384:
        -: 1385:
        -: 1386://end of dominion.c
        -: 1387:
cardtest4.c:
----------------- Testing Card: adventurer ----------------

TEST 1: player 1 has 2 more cards in hand
FAILED

TEST 2: player 1 has 2 more Treasure cards in hand
FAILED

 >>>>> TEST FAILED adventurer, Failed Cases: 2 <<<<<

File 'dominion.c'
Lines executed:22.44% of 566
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void* a, const void* b) {
       30:    9:    if (*(int*)a > *(int*)b)
    #####:   10:        return 1;
       30:   11:    if (*(int*)a < *(int*)b)
        8:   12:        return -1;
       22:   13:    return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:
        -:   40:    int i;
        -:   41:    int j;
        -:   42:    int it;
        -:   43:    //set up random number generator
        1:   44:    SelectStream(1);
        1:   45:    PutSeed((long)randomSeed);
        -:   46:
        -:   47:    //check number of players
        1:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
        1:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
       11:   57:    for (i = 0; i < 10; i++)
        -:   58:    {
      110:   59:        for (j = 0; j < 10; j++)
        -:   60:        {
      100:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
        1:   73:    if (numPlayers == 2)
        -:   74:    {
        1:   75:        state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:    else if (numPlayers == 3)
        -:   78:    {
    #####:   79:        state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
        1:   87:    if (numPlayers == 2)
        -:   88:    {
        1:   89:        state->supplyCount[estate] = 8;
        1:   90:        state->supplyCount[duchy] = 8;
        1:   91:        state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:    else
        -:   94:    {
    #####:   95:        state->supplyCount[estate] = 12;
    #####:   96:        state->supplyCount[duchy] = 12;
    #####:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
        1:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:    state->supplyCount[silver] = 40;
        1:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
       21:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      165:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:        {
      155:  110:            if (kingdomCards[j] == i)
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
       10:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:                {
        4:  115:                    if (numPlayers == 2){
        2:  116:                        state->supplyCount[i] = 8;
        -:  117:                    }
    #####:  118:                    else{ state->supplyCount[i] = 12; }
        -:  119:                }
        -:  120:                else
        -:  121:                {
        8:  122:                    state->supplyCount[i] = 10;
        -:  123:                }
       10:  124:                break;
        -:  125:            }
        -:  126:            else    //card is not in the set choosen for the game
        -:  127:            {
      145:  128:                state->supplyCount[i] = -1;
        -:  129:            }
        -:  130:        }
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:    ////////////////////////
        -:  135:    //supply intilization complete
        -:  136:
        -:  137:    //set player decks
        3:  138:    for (i = 0; i < numPlayers; i++)
        -:  139:    {
        2:  140:        state->deckCount[i] = 0;
        8:  141:        for (j = 0; j < 3; j++)
        -:  142:        {
        6:  143:            state->deck[i][j] = estate;
        6:  144:            state->deckCount[i]++;
        -:  145:        }
       16:  146:        for (j = 3; j < 10; j++)
        -:  147:        {
       14:  148:            state->deck[i][j] = copper;
       14:  149:            state->deckCount[i]++;
        -:  150:        }
        -:  151:    }
        -:  152:
        -:  153:    //shuffle player decks
        3:  154:    for (i = 0; i < numPlayers; i++)
        -:  155:    {
        2:  156:        if ( shuffle(i, state) < 0 )
        -:  157:        {
    #####:  158:            return -1;
        -:  159:        }
        -:  160:    }
        -:  161:
        -:  162:    //draw player hands
        3:  163:    for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:        //initialize hand size to zero
        2:  166:        state->handCount[i] = 0;
        2:  167:        state->discardCount[i] = 0;
        -:  168:        //draw 5 cards
        -:  169:        // for (j = 0; j < 5; j++)
        -:  170:        //	{
        -:  171:        //	  drawCard(i, state);
        -:  172:        //	}
        -:  173:    }
        -:  174:
        -:  175:    //set embargo tokens to 0 for all supply piles
       28:  176:    for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       27:  178:        state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:    //initialize first player's turn
        1:  182:    state->outpostPlayed = 0;
        1:  183:    state->phase = 0;
        1:  184:    state->numActions = 1;
        1:  185:    state->numBuys = 1;
        1:  186:    state->playedCardCount = 0;
        1:  187:    state->whoseTurn = 0;
        1:  188:    state->handCount[state->whoseTurn] = 0;
        -:  189:    //int it; move to top
        -:  190:
        -:  191:    //Moved draw cards to here, only drawing at the start of a turn
        6:  192:    for (it = 0; it < 5; it++){
        5:  193:        drawCard(state->whoseTurn, state);
        -:  194:    }
        -:  195:
        1:  196:    updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:    return 0;
        -:  199:}
        -:  200:
        6:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:    int newDeck[MAX_DECK];
        6:  205:    int newDeckPos = 0;
        -:  206:    int card;
        -:  207:    int i;
        -:  208:
        6:  209:    if (state->deckCount[player] < 1)
        4:  210:        return -1;
        2:  211:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:    while (state->deckCount[player] > 0) {
       20:  215:        card = floor(Random() * state->deckCount[player]);
       20:  216:        newDeck[newDeckPos] = state->deck[player][card];
       20:  217:        newDeckPos++;
       70:  218:        for (i = card; i < state->deckCount[player]-1; i++) {
       50:  219:            state->deck[player][i] = state->deck[player][i+1];
        -:  220:        }
       20:  221:        state->deckCount[player]--;
        -:  222:    }
       22:  223:    for (i = 0; i < newDeckPos; i++) {
       20:  224:        state->deck[player][i] = newDeck[i];
       20:  225:        state->deckCount[player]++;
        -:  226:    }
        -:  227:
        2:  228:    return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:    int card;
    #####:  234:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:    //check if it is the right phase
    #####:  237:    if (state->phase != 0)
        -:  238:    {
    #####:  239:        return -1;
        -:  240:    }
        -:  241:
        -:  242:    //check if player has enough actions
    #####:  243:    if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:        return -1;
        -:  246:    }
        -:  247:
        -:  248:    //get card played
    #####:  249:    card = handCard(handPos, state);
        -:  250:
        -:  251:    //check if selected card is an action
    #####:  252:    if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:        return -1;
        -:  255:    }
        -:  256:
        -:  257:    //play card
    #####:  258:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:        return -1;
        -:  261:    }
        -:  262:
        -:  263:    //reduce number of actions
    #####:  264:    state->numActions--;
        -:  265:
        -:  266:    //update coins (Treasure cards may be added with card draws)
    #####:  267:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:    return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:    int who;
        -:  274:    if (DEBUG){
        -:  275:        printf("Entering buyCard...\n");
        -:  276:    }
        -:  277:
        -:  278:    // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:    who = state->whoseTurn;
        -:  281:
    #####:  282:    if (state->numBuys < 1){
        -:  283:        if (DEBUG)
        -:  284:            printf("You do not have any buys left\n");
    #####:  285:        return -1;
    #####:  286:    } else if (supplyCount(supplyPos, state) <1){
        -:  287:        if (DEBUG)
        -:  288:            printf("There are not any of that type of card left\n");
    #####:  289:        return -1;
    #####:  290:    } else if (state->coins < getCost(supplyPos)){
        -:  291:        if (DEBUG)
        -:  292:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:        return -1;
        -:  294:    } else {
    #####:  295:        state->phase=1;
        -:  296:        //state->supplyCount[supplyPos]--;
    #####:  297:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:        state->numBuys--;
        -:  301:        if (DEBUG)
        -:  302:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:    }
        -:  304:
        -:  305:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:    //state->discardCount[who]++;
        -:  307:
    #####:  308:    return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:    return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:    int currentPlayer = whoseTurn(state);
    #####:  317:    return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:    return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:    int i;
    #####:  326:    int count = 0;
        -:  327:
    #####:  328:    for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:        if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:    for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:        if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:    for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:        if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:    return count;
        -:  344:}
        -:  345:
        1:  346:int whoseTurn(struct gameState *state) {
        1:  347:    return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:    int k;
        -:  352:    int i;
    #####:  353:    int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:    //Discard hand
    #####:  356:    for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:    }
    #####:  360:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:    //Code for determining the player
    #####:  363:    if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:    }
        -:  366:    else{
    #####:  367:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:    }
        -:  369:
    #####:  370:    state->outpostPlayed = 0;
    #####:  371:    state->phase = 0;
    #####:  372:    state->numActions = 1;
    #####:  373:    state->coins = 0;
    #####:  374:    state->numBuys = 1;
    #####:  375:    state->playedCardCount = 0;
    #####:  376:    state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:    //int k; move to top
        -:  379:    //Next player draws hand
    #####:  380:    for (k = 0; k < 5; k++){
    #####:  381:        drawCard(state->whoseTurn, state);//Draw a card
        -:  382:    }
        -:  383:
        -:  384:    //Update money
    #####:  385:    updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:    return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:    int i;
        -:  392:    int j;
        -:  393:
        -:  394:    //if stack of Province cards is empty, the game ends
    #####:  395:    if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:        return 1;
        -:  398:    }
        -:  399:
        -:  400:    //if three supply pile are at 0, the game ends
    #####:  401:    j = 0;
    #####:  402:    for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:        if (state->supplyCount[i] == 0)
        -:  405:        {
    #####:  406:            j++;
        -:  407:        }
        -:  408:    }
    #####:  409:    if ( j >= 3)
        -:  410:    {
    #####:  411:        return 1;
        -:  412:    }
        -:  413:
    #####:  414:    return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:    int i;
    #####:  420:    int score = 0;
        -:  421:    //score from hand
    #####:  422:    for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:        if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:        if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:        if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:        if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:        if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:    //score from discard
    #####:  433:    for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:        if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:        if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:        if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:        if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:        if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:    //score from deck
    #####:  444:    for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:        if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:        if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:        if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:        if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:        if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:    return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:    int i;
        -:  459:    int j;
        -:  460:    int highScore;
        -:  461:    int currentPlayer;
        -:  462:
        -:  463:    //get score for each player
    #####:  464:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:        //set unused player scores to -9999
    #####:  467:        if (i >= state->numPlayers)
        -:  468:        {
    #####:  469:            players[i] = -9999;
        -:  470:        }
        -:  471:        else
        -:  472:        {
    #####:  473:            players[i] = scoreFor (i, state);
        -:  474:        }
        -:  475:    }
        -:  476:
        -:  477:    //find highest score
    #####:  478:    j = 0;
    #####:  479:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:        if (players[i] > players[j])
        -:  482:        {
    #####:  483:            j = i;
        -:  484:        }
        -:  485:    }
    #####:  486:    highScore = players[j];
        -:  487:
        -:  488:    //add 1 to players who had less turns
    #####:  489:    currentPlayer = whoseTurn(state);
    #####:  490:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:        if ( players[i] == highScore && i > currentPlayer )
        -:  493:        {
    #####:  494:            players[i]++;
        -:  495:        }
        -:  496:    }
        -:  497:
        -:  498:    //find new highest score
    #####:  499:    j = 0;
    #####:  500:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:        if ( players[i] > players[j] )
        -:  503:        {
    #####:  504:            j = i;
        -:  505:        }
        -:  506:    }
    #####:  507:    highScore = players[j];
        -:  508:
        -:  509:    //set winners in array to 1 and rest to 0
    #####:  510:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:        if ( players[i] == highScore )
        -:  513:        {
    #####:  514:            players[i] = 1;
        -:  515:        }
        -:  516:        else
        -:  517:        {
    #####:  518:            players[i] = 0;
        -:  519:        }
        -:  520:    }
        -:  521:
    #####:  522:    return 0;
        -:  523:}
        -:  524:
       12:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:    int deckCounter;
       12:  528:    if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:        //Step 1 Shuffle the discard pile back into a deck
        -:  531:        int i;
        -:  532:        //Move discard to deck
        2:  533:        for (i = 0; i < state->discardCount[player];i++){
    #####:  534:            state->deck[player][i] = state->discard[player][i];
    #####:  535:            state->discard[player][i] = -1;
        -:  536:        }
        -:  537:
        2:  538:        state->deckCount[player] = state->discardCount[player];
        2:  539:        state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:        //Shufffle the deck
        2:  542:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:        if (DEBUG){//Debug statements
        -:  545:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:        }
        -:  547:
        2:  548:        state->discardCount[player] = 0;
        -:  549:
        -:  550:        //Step 2 Draw Card
        2:  551:        count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:        if (DEBUG){//Debug statements
        -:  554:            printf("Current hand count: %d\n", count);
        -:  555:        }
        -:  556:
        2:  557:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        2:  559:        if (deckCounter == 0)
        2:  560:            return -1;
        -:  561:
    #####:  562:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:        state->deckCount[player]--;
    #####:  564:        state->handCount[player]++;//Increment hand count
        -:  565:    }
        -:  566:
        -:  567:    else{
       10:  568:        int count = state->handCount[player];//Get current hand count for player
        -:  569:        int deckCounter;
        -:  570:        if (DEBUG){//Debug statements
        -:  571:            printf("Current hand count: %d\n", count);
        -:  572:        }
        -:  573:
       10:  574:        deckCounter = state->deckCount[player];//Create holder for the deck count
       10:  575:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       10:  576:        state->deckCount[player]--;
       10:  577:        state->handCount[player]++;//Increment hand count
        -:  578:    }
        -:  579:
       10:  580:    return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:    switch( cardNumber )
        -:  586:    {
        -:  587:        case curse:
    #####:  588:            return 0;
        -:  589:        case estate:
    #####:  590:            return 2;
        -:  591:        case duchy:
    #####:  592:            return 5;
        -:  593:        case province:
    #####:  594:            return 8;
        -:  595:        case copper:
    #####:  596:            return 0;
        -:  597:        case silver:
    #####:  598:            return 3;
        -:  599:        case gold:
    #####:  600:            return 6;
        -:  601:        case adventurer:
    #####:  602:            return 6;
        -:  603:        case council_room:
    #####:  604:            return 5;
        -:  605:        case feast:
    #####:  606:            return 4;
        -:  607:        case gardens:
    #####:  608:            return 4;
        -:  609:        case mine:
    #####:  610:            return 5;
        -:  611:        case remodel:
    #####:  612:            return 4;
        -:  613:        case smithy:
    #####:  614:            return 4;
        -:  615:        case village:
    #####:  616:            return 3;
        -:  617:        case baron:
    #####:  618:            return 4;
        -:  619:        case great_hall:
    #####:  620:            return 3;
        -:  621:        case minion:
    #####:  622:            return 5;
        -:  623:        case steward:
    #####:  624:            return 3;
        -:  625:        case tribute:
    #####:  626:            return 5;
        -:  627:        case ambassador:
    #####:  628:            return 3;
        -:  629:        case cutpurse:
    #####:  630:            return 4;
        -:  631:        case embargo:
    #####:  632:            return 2;
        -:  633:        case outpost:
    #####:  634:            return 5;
        -:  635:        case salvager:
    #####:  636:            return 4;
        -:  637:        case sea_hag:
    #####:  638:            return 4;
        -:  639:        case treasure_map:
    #####:  640:            return 4;
        -:  641:    }
        -:  642:
    #####:  643:    return -1;
        -:  644:}
        -:  645:
        -:  646:
        -:  647:
    #####:  648:int SmithyCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  649:
        -:  650:    //+3 Cards
        -:  651:    int i;
    #####:  652:    for (i = 0; i < 5; i++)
        -:  653:    {
    #####:  654:        drawCard(currentPlayer, state);
        -:  655:    }
        -:  656:
        -:  657:    //discard card from hand
        -:  658:    //discardCard(handPos, currentPlayer, state, 0);
    #####:  659:    return 0;
        -:  660://bug introduced: draw 5 cards instead of 3; do not discard a card
        -:  661:}
        -:  662:
        -:  663:
        1:  664:int AdventurerCard(int currentPlayer, struct gameState *state, int drawntreasure, int temphand[], int cardDrawn, int z) {
        -:  665:
        9:  666:    while(drawntreasure<5){
        7:  667:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        2:  668:            shuffle(currentPlayer, state);
        -:  669:        }
        7:  670:        drawCard(currentPlayer, state);
        7:  671:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        7:  672:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        5:  673:            drawntreasure++;
        -:  674:        else{
        2:  675:            temphand[z]=cardDrawn;
        2:  676:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        2:  677:            z++;
        -:  678:        }
        -:  679:    }
        4:  680:    while(z-1>=0){
        2:  681:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        2:  682:        z=z-1;
        -:  683:    }
        1:  684:    return 0;
        -:  685:// bug introduced: player is able to draw 5 treasure cards instead of 2.
        -:  686:}
        -:  687:
        -:  688:
    #####:  689:int VillageCard(int currentPlayer, struct gameState *state, int handPos){
        -:  690:
        -:  691:    //+1 Card
    #####:  692:    drawCard(currentPlayer, state);
    #####:  693:    drawCard(currentPlayer, state);
    #####:  694:    drawCard(currentPlayer, state);
        -:  695:
        -:  696:    //+2 Actions
    #####:  697:    state->numActions = state->numActions + 10;
        -:  698:
        -:  699:    //discard played card from hand
    #####:  700:    discardCard(handPos, currentPlayer, state, 0);
    #####:  701:    return 0;
        -:  702:// bug introduced: increase action points by 10 instead of 2 and draw 3 cards instead of 1
        -:  703:}
        -:  704:
        -:  705:
    #####:  706:int GreatHallCard(int currentPlayer, struct gameState *state, int handPos){
        -:  707:    //+1 Card
    #####:  708:    drawCard(currentPlayer, state);
        -:  709:
        -:  710:    //+1 Actions
    #####:  711:    state->numActions++;
        -:  712:
        -:  713:    //discard card from hand
    #####:  714:    discardCard(handPos, currentPlayer, state, 0);
    #####:  715:    return 0;
        -:  716:}
        -:  717:
        -:  718:
    #####:  719:int EmbargoCard(int currentPlayer, int handPos, struct gameState *state, int choice1) {
        -:  720://+2 Coins
    #####:  721:    state->coins = state->coins + 20;
        -:  722:
        -:  723:    //see if selected pile is in play
    #####:  724:    if ( state->supplyCount[choice1] == -1 )
        -:  725:    {
    #####:  726:        return -1;
        -:  727:    }
        -:  728:
        -:  729:    //add embargo token to selected supply pile
    #####:  730:    state->embargoTokens[choice1]++;
    #####:  731:    state->embargoTokens[choice1]++;
        -:  732:
        -:  733:    //trash card
    #####:  734:    discardCard(handPos, currentPlayer, state, 1);
        -:  735:
        -:  736:
    #####:  737:    return 0;
        -:  738://bug introduced: increase state->coins by 20 instead of 2, and add 2 embargo tokens instead of one
        -:  739:}
        -:  740:
        -:  741:
        -:  742:
        1:  743:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  744:{
        -:  745:    int i;
        -:  746:    int j;
        -:  747:    int k;
        -:  748:    int x;
        -:  749:    int index;
        1:  750:    int currentPlayer = whoseTurn(state);
        1:  751:    int nextPlayer = currentPlayer + 1;
        -:  752:
        1:  753:    int tributeRevealedCards[2] = {-1, -1};
        -:  754:    int temphand[MAX_HAND];// moved above the if statement
        1:  755:    int drawntreasure=0;
        1:  756:    int cardDrawn=0;
        1:  757:    int z = 0;// this is the counter for the temp hand
        1:  758:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  759:        nextPlayer = 0;
        -:  760:    }
        -:  761:
        -:  762:
        -:  763:    //uses switch to select card and perform actions
        1:  764:    switch( card )
        -:  765:    {
        -:  766:        case adventurer:
        -:  767:
        1:  768:            AdventurerCard(currentPlayer, state, drawntreasure, temphand, cardDrawn, z);
        -:  769:
        1:  770:            return 0;
        -:  771:
        -:  772:        case council_room:
        -:  773:            //+4 Cards
    #####:  774:            for (i = 0; i < 4; i++)
        -:  775:            {
    #####:  776:                drawCard(currentPlayer, state);
        -:  777:            }
        -:  778:
        -:  779:            //+1 Buy
    #####:  780:            state->numBuys++;
        -:  781:
        -:  782:            //Each other player draws a card
    #####:  783:            for (i = 0; i < state->numPlayers; i++)
        -:  784:            {
    #####:  785:                if ( i != currentPlayer )
        -:  786:                {
    #####:  787:                    drawCard(i, state);
        -:  788:                }
        -:  789:            }
        -:  790:
        -:  791:            //put played card in played card pile
    #####:  792:            discardCard(handPos, currentPlayer, state, 0);
        -:  793:
    #####:  794:            return 0;
        -:  795:
        -:  796:        case feast:
        -:  797:            //gain card with cost up to 5
        -:  798:            //Backup hand
    #####:  799:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  800:                temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  801:                state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  802:            }
        -:  803:            //Backup hand
        -:  804:
        -:  805:            //Update Coins for Buy
    #####:  806:            updateCoins(currentPlayer, state, 5);
    #####:  807:            x = 1;//Condition to loop on
    #####:  808:            while( x == 1) {//Buy one card
    #####:  809:                if (supplyCount(choice1, state) <= 0){
        -:  810:                    if (DEBUG)
        -:  811:                        printf("None of that card left, sorry!\n");
        -:  812:
        -:  813:                    if (DEBUG){
        -:  814:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  815:                    }
        -:  816:                }
    #####:  817:                else if (state->coins < getCost(choice1)){
    #####:  818:                    printf("That card is too expensive!\n");
        -:  819:
        -:  820:                    if (DEBUG){
        -:  821:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  822:                    }
        -:  823:                }
        -:  824:                else{
        -:  825:
        -:  826:                    if (DEBUG){
        -:  827:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:                    }
        -:  829:
    #####:  830:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  831:                    x = 0;//No more buying cards
        -:  832:
        -:  833:                    if (DEBUG){
        -:  834:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  835:                    }
        -:  836:
        -:  837:                }
        -:  838:            }
        -:  839:
        -:  840:            //Reset Hand
    #####:  841:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  842:                state->hand[currentPlayer][i] = temphand[i];
    #####:  843:                temphand[i] = -1;
        -:  844:            }
        -:  845:            //Reset Hand
        -:  846:
    #####:  847:            return 0;
        -:  848:
        -:  849:        case gardens:
    #####:  850:            return -1;
        -:  851:
        -:  852:        case mine:
    #####:  853:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  856:            {
    #####:  857:                return -1;
        -:  858:            }
        -:  859:
    #####:  860:            if (choice2 > treasure_map || choice2 < curse)
        -:  861:            {
    #####:  862:                return -1;
        -:  863:            }
        -:  864:
    #####:  865:            if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  866:            {
    #####:  867:                return -1;
        -:  868:            }
        -:  869:
    #####:  870:            gainCard(choice2, state, 2, currentPlayer);
        -:  871:
        -:  872:            //discard card from hand
    #####:  873:            discardCard(handPos, currentPlayer, state, 0);
        -:  874:
        -:  875:            //discard trashed card
    #####:  876:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  877:            {
    #####:  878:                if (state->hand[currentPlayer][i] == j)
        -:  879:                {
    #####:  880:                    discardCard(i, currentPlayer, state, 0);
    #####:  881:                    break;
        -:  882:                }
        -:  883:            }
        -:  884:
    #####:  885:            return 0;
        -:  886:
        -:  887:        case remodel:
    #####:  888:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  889:
    #####:  890:            if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  891:            {
    #####:  892:                return -1;
        -:  893:            }
        -:  894:
    #####:  895:            gainCard(choice2, state, 0, currentPlayer);
        -:  896:
        -:  897:            //discard card from hand
    #####:  898:            discardCard(handPos, currentPlayer, state, 0);
        -:  899:
        -:  900:            //discard trashed card
    #####:  901:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  902:            {
    #####:  903:                if (state->hand[currentPlayer][i] == j)
        -:  904:                {
    #####:  905:                    discardCard(i, currentPlayer, state, 0);
    #####:  906:                    break;
        -:  907:                }
        -:  908:            }
        -:  909:
        -:  910:
    #####:  911:            return 0;
        -:  912:
        -:  913:        case smithy:
        -:  914:
    #####:  915:            SmithyCard(currentPlayer, state, handPos);
    #####:  916:            return 0;
        -:  917:
        -:  918:        case village:
        -:  919:
    #####:  920:            VillageCard(currentPlayer, state, handPos);
        -:  921:
    #####:  922:            return 0;
        -:  923:
        -:  924:        case baron:
    #####:  925:            state->numBuys++;//Increase buys by 1!
    #####:  926:            if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  927:                int p = 0;//Iterator for hand!
    #####:  928:                int card_not_discarded = 1;//Flag for discard set!
    #####:  929:                while(card_not_discarded){
    #####:  930:                    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  931:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  932:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  933:                        state->discardCount[currentPlayer]++;
    #####:  934:                        for (;p < state->handCount[currentPlayer]; p++){
    #####:  935:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  936:                        }
    #####:  937:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  938:                        state->handCount[currentPlayer]--;
    #####:  939:                        card_not_discarded = 0;//Exit the loop
        -:  940:                    }
    #####:  941:                    else if (p > state->handCount[currentPlayer]){
        -:  942:                        if(DEBUG) {
        -:  943:                            printf("No estate cards in your hand, invalid choice\n");
        -:  944:                            printf("Must gain an estate if there are any\n");
        -:  945:                        }
    #####:  946:                        if (supplyCount(estate, state) > 0){
    #####:  947:                            gainCard(estate, state, 0, currentPlayer);
    #####:  948:                            state->supplyCount[estate]--;//Decrement estates
    #####:  949:                            if (supplyCount(estate, state) == 0){
    #####:  950:                                isGameOver(state);
        -:  951:                            }
        -:  952:                        }
    #####:  953:                        card_not_discarded = 0;//Exit the loop
        -:  954:                    }
        -:  955:
        -:  956:                    else{
    #####:  957:                        p++;//Next card
        -:  958:                    }
        -:  959:                }
        -:  960:            }
        -:  961:
        -:  962:            else{
    #####:  963:                if (supplyCount(estate, state) > 0){
    #####:  964:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  965:                    state->supplyCount[estate]--;//Decrement Estates
    #####:  966:                    if (supplyCount(estate, state) == 0){
    #####:  967:                        isGameOver(state);
        -:  968:                    }
        -:  969:                }
        -:  970:            }
        -:  971:
        -:  972:
    #####:  973:            return 0;
        -:  974:
        -:  975:        case great_hall:
        -:  976:
    #####:  977:            GreatHallCard(currentPlayer, state, handPos);
        -:  978:
    #####:  979:            return 0;
        -:  980:
        -:  981:        case minion:
        -:  982:            //+1 action
    #####:  983:            state->numActions++;
        -:  984:
        -:  985:            //discard card from hand
    #####:  986:            discardCard(handPos, currentPlayer, state, 0);
        -:  987:
    #####:  988:            if (choice1)		//+2 coins
        -:  989:            {
    #####:  990:                state->coins = state->coins + 2;
        -:  991:            }
        -:  992:
    #####:  993:            else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  994:            {
        -:  995:                //discard hand
    #####:  996:                while(numHandCards(state) > 0)
        -:  997:                {
    #####:  998:                    discardCard(handPos, currentPlayer, state, 0);
        -:  999:                }
        -: 1000:
        -: 1001:                //draw 4
    #####: 1002:                for (i = 0; i < 4; i++)
        -: 1003:                {
    #####: 1004:                    drawCard(currentPlayer, state);
        -: 1005:                }
        -: 1006:
        -: 1007:                //other players discard hand and redraw if hand size > 4
    #####: 1008:                for (i = 0; i < state->numPlayers; i++)
        -: 1009:                {
    #####: 1010:                    if (i != currentPlayer)
        -: 1011:                    {
    #####: 1012:                        if ( state->handCount[i] > 4 )
        -: 1013:                        {
        -: 1014:                            //discard hand
    #####: 1015:                            while( state->handCount[i] > 0 )
        -: 1016:                            {
    #####: 1017:                                discardCard(handPos, i, state, 0);
        -: 1018:                            }
        -: 1019:
        -: 1020:                            //draw 4
    #####: 1021:                            for (j = 0; j < 4; j++)
        -: 1022:                            {
    #####: 1023:                                drawCard(i, state);
        -: 1024:                            }
        -: 1025:                        }
        -: 1026:                    }
        -: 1027:                }
        -: 1028:
        -: 1029:            }
    #####: 1030:            return 0;
        -: 1031:
        -: 1032:        case steward:
    #####: 1033:            if (choice1 == 1)
        -: 1034:            {
        -: 1035:                //+2 cards
    #####: 1036:                drawCard(currentPlayer, state);
    #####: 1037:                drawCard(currentPlayer, state);
        -: 1038:            }
    #####: 1039:            else if (choice1 == 2)
        -: 1040:            {
        -: 1041:                //+2 coins
    #####: 1042:                state->coins = state->coins + 2;
        -: 1043:            }
        -: 1044:            else
        -: 1045:            {
        -: 1046:                //trash 2 cards in hand
    #####: 1047:                discardCard(choice2, currentPlayer, state, 1);
    #####: 1048:                discardCard(choice3, currentPlayer, state, 1);
        -: 1049:            }
        -: 1050:
        -: 1051:            //discard card from hand
    #####: 1052:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1053:            return 0;
        -: 1054:
        -: 1055:        case tribute:
    #####: 1056:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1057:                if (state->deckCount[nextPlayer] > 0){
    #####: 1058:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1059:                    state->deckCount[nextPlayer]--;
        -: 1060:                }
    #####: 1061:                else if (state->discardCount[nextPlayer] > 0){
    #####: 1062:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1063:                    state->discardCount[nextPlayer]--;
        -: 1064:                }
        -: 1065:                else{
        -: 1066:                    //No Card to Reveal
        -: 1067:                    if (DEBUG){
        -: 1068:                        printf("No cards to reveal\n");
        -: 1069:                    }
        -: 1070:                }
        -: 1071:            }
        -: 1072:
        -: 1073:            else{
    #####: 1074:                if (state->deckCount[nextPlayer] == 0){
    #####: 1075:                    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1076:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1077:                        state->deckCount[nextPlayer]++;
    #####: 1078:                        state->discard[nextPlayer][i] = -1;
    #####: 1079:                        state->discardCount[nextPlayer]--;
        -: 1080:                    }
        -: 1081:
    #####: 1082:                    shuffle(nextPlayer,state);//Shuffle the deck
        -: 1083:                }
    #####: 1084:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1085:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1086:                state->deckCount[nextPlayer]--;
    #####: 1087:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1088:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1089:                state->deckCount[nextPlayer]--;
        -: 1090:            }
        -: 1091:
    #####: 1092:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1093:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1094:                state->playedCardCount++;
    #####: 1095:                tributeRevealedCards[1] = -1;
        -: 1096:            }
        -: 1097:
    #####: 1098:            for (i = 0; i <= 2; i ++){
    #####: 1099:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1100:                    state->coins += 2;
        -: 1101:                }
        -: 1102:
    #####: 1103:                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1104:                    drawCard(currentPlayer, state);
    #####: 1105:                    drawCard(currentPlayer, state);
        -: 1106:                }
        -: 1107:                else{//Action Card
    #####: 1108:                    state->numActions = state->numActions + 2;
        -: 1109:                }
        -: 1110:            }
        -: 1111:
    #####: 1112:            return 0;
        -: 1113:
        -: 1114:        case ambassador:
    #####: 1115:            j = 0;		//used to check if player has enough cards to discard
        -: 1116:
    #####: 1117:            if (choice2 > 2 || choice2 < 0)
        -: 1118:            {
    #####: 1119:                return -1;
        -: 1120:            }
        -: 1121:
    #####: 1122:            if (choice1 == handPos)
        -: 1123:            {
    #####: 1124:                return -1;
        -: 1125:            }
        -: 1126:
    #####: 1127:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1128:            {
    #####: 1129:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1130:                {
    #####: 1131:                    j++;
        -: 1132:                }
        -: 1133:            }
    #####: 1134:            if (j < choice2)
        -: 1135:            {
    #####: 1136:                return -1;
        -: 1137:            }
        -: 1138:
        -: 1139:            if (DEBUG)
        -: 1140:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1141:
        -: 1142:            //increase supply count for choosen card by amount being discarded
    #####: 1143:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1144:
        -: 1145:            //each other player gains a copy of revealed card
    #####: 1146:            for (i = 0; i < state->numPlayers; i++)
        -: 1147:            {
    #####: 1148:                if (i != currentPlayer)
        -: 1149:                {
    #####: 1150:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1151:                }
        -: 1152:            }
        -: 1153:
        -: 1154:            //discard played card from hand
    #####: 1155:            discardCard(handPos, currentPlayer, state, 0);
        -: 1156:
        -: 1157:            //trash copies of cards returned to supply
    #####: 1158:            for (j = 0; j < choice2; j++)
        -: 1159:            {
    #####: 1160:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1161:                {
    #####: 1162:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1163:                    {
    #####: 1164:                        discardCard(i, currentPlayer, state, 1);
    #####: 1165:                        break;
        -: 1166:                    }
        -: 1167:                }
        -: 1168:            }
        -: 1169:
    #####: 1170:            return 0;
        -: 1171:
        -: 1172:        case cutpurse:
        -: 1173:
    #####: 1174:            updateCoins(currentPlayer, state, 2);
    #####: 1175:            for (i = 0; i < state->numPlayers; i++)
        -: 1176:            {
    #####: 1177:                if (i != currentPlayer)
        -: 1178:                {
    #####: 1179:                    for (j = 0; j < state->handCount[i]; j++)
        -: 1180:                    {
    #####: 1181:                        if (state->hand[i][j] == copper)
        -: 1182:                        {
    #####: 1183:                            discardCard(j, i, state, 0);
    #####: 1184:                            break;
        -: 1185:                        }
    #####: 1186:                        if (j == state->handCount[i])
        -: 1187:                        {
    #####: 1188:                            for (k = 0; k < state->handCount[i]; k++)
        -: 1189:                            {
        -: 1190:                                if (DEBUG)
        -: 1191:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1192:                            }
    #####: 1193:                            break;
        -: 1194:                        }
        -: 1195:                    }
        -: 1196:
        -: 1197:                }
        -: 1198:
        -: 1199:            }
        -: 1200:
        -: 1201:            //discard played card from hand
    #####: 1202:            discardCard(handPos, currentPlayer, state, 0);
        -: 1203:
    #####: 1204:            return 0;
        -: 1205:
        -: 1206:
        -: 1207:        case embargo:
        -: 1208:
    #####: 1209:            EmbargoCard(currentPlayer, handPos, state, choice1);
    #####: 1210:            return 0;
        -: 1211:
        -: 1212:        case outpost:
        -: 1213:            //set outpost flag
    #####: 1214:            state->outpostPlayed++;
        -: 1215:
        -: 1216:            //discard card
    #####: 1217:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1218:            return 0;
        -: 1219:
        -: 1220:        case salvager:
        -: 1221:            //+1 buy
    #####: 1222:            state->numBuys++;
        -: 1223:
    #####: 1224:            if (choice1)
        -: 1225:            {
        -: 1226:                //gain coins equal to trashed card
    #####: 1227:                state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1228:                //trash card
    #####: 1229:                discardCard(choice1, currentPlayer, state, 1);
        -: 1230:            }
        -: 1231:
        -: 1232:            //discard card
    #####: 1233:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1234:            return 0;
        -: 1235:
        -: 1236:        case sea_hag:
    #####: 1237:            for (i = 0; i < state->numPlayers; i++){
    #####: 1238:                if (i != currentPlayer){
    #####: 1239:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1240:                    state->discardCount[i]++;
    #####: 1241:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1242:                }
        -: 1243:            }
    #####: 1244:            return 0;
        -: 1245:
        -: 1246:        case treasure_map:
        -: 1247:            //search hand for another treasure_map
    #####: 1248:            index = -1;
    #####: 1249:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1250:            {
    #####: 1251:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1252:                {
    #####: 1253:                    index = i;
    #####: 1254:                    break;
        -: 1255:                }
        -: 1256:            }
    #####: 1257:            if (index > -1)
        -: 1258:            {
        -: 1259:                //trash both treasure cards
    #####: 1260:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1261:                discardCard(index, currentPlayer, state, 1);
        -: 1262:
        -: 1263:                //gain 4 Gold cards
    #####: 1264:                for (i = 0; i < 4; i++)
        -: 1265:                {
    #####: 1266:                    gainCard(gold, state, 1, currentPlayer);
        -: 1267:                }
        -: 1268:
        -: 1269:                //return success
    #####: 1270:                return 1;
        -: 1271:            }
        -: 1272:
        -: 1273:            //no second treasure_map found in hand
    #####: 1274:            return -1;
        -: 1275:    }
        -: 1276:
    #####: 1277:    return -1;
        -: 1278:}
        -: 1279:
    #####: 1280:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1281:{
        -: 1282:
        -: 1283:    //if card is not trashed, added to Played pile
    #####: 1284:    if (trashFlag < 1)
        -: 1285:    {
        -: 1286:        //add card to played pile
    #####: 1287:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1288:        state->playedCardCount++;
        -: 1289:    }
        -: 1290:
        -: 1291:    //set played card to -1
    #####: 1292:    state->hand[currentPlayer][handPos] = -1;
        -: 1293:
        -: 1294:    //remove card from player's hand
    #####: 1295:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1296:    {
        -: 1297:        //reduce number of cards in hand
    #####: 1298:        state->handCount[currentPlayer]--;
        -: 1299:    }
    #####: 1300:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1301:    {
        -: 1302:        //reduce number of cards in hand
    #####: 1303:        state->handCount[currentPlayer]--;
        -: 1304:    }
        -: 1305:    else
        -: 1306:    {
        -: 1307:        //replace discarded card with last card in hand
    #####: 1308:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1309:        //set last card to -1
    #####: 1310:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1311:        //reduce number of cards in hand
    #####: 1312:        state->handCount[currentPlayer]--;
        -: 1313:    }
        -: 1314:
    #####: 1315:    return 0;
        -: 1316:}
        -: 1317:
    #####: 1318:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1319:{
        -: 1320:    //Note: supplyPos is enum of choosen card
        -: 1321:
        -: 1322:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1323:    if ( supplyCount(supplyPos, state) < 1 )
        -: 1324:    {
    #####: 1325:        return -1;
        -: 1326:    }
        -: 1327:
        -: 1328:    //added card for [whoseTurn] current player:
        -: 1329:    // toFlag = 0 : add to discard
        -: 1330:    // toFlag = 1 : add to deck
        -: 1331:    // toFlag = 2 : add to hand
        -: 1332:
    #####: 1333:    if (toFlag == 1)
        -: 1334:    {
    #####: 1335:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1336:        state->deckCount[player]++;
        -: 1337:    }
    #####: 1338:    else if (toFlag == 2)
        -: 1339:    {
    #####: 1340:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1341:        state->handCount[player]++;
        -: 1342:    }
        -: 1343:    else
        -: 1344:    {
    #####: 1345:        state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1346:        state->discardCount[player]++;
        -: 1347:    }
        -: 1348:
        -: 1349:    //decrease number in supply pile
    #####: 1350:    state->supplyCount[supplyPos]--;
        -: 1351:
    #####: 1352:    return 0;
        -: 1353:}
        -: 1354:
        1: 1355:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1356:{
        -: 1357:    int i;
        -: 1358:
        -: 1359:    //reset coin count
        1: 1360:    state->coins = 0;
        -: 1361:
        -: 1362:    //add coins for each Treasure card in player's hand
        6: 1363:    for (i = 0; i < state->handCount[player]; i++)
        -: 1364:    {
        5: 1365:        if (state->hand[player][i] == copper)
        -: 1366:        {
        4: 1367:            state->coins += 1;
        -: 1368:        }
        1: 1369:        else if (state->hand[player][i] == silver)
        -: 1370:        {
    #####: 1371:            state->coins += 2;
        -: 1372:        }
        1: 1373:        else if (state->hand[player][i] == gold)
        -: 1374:        {
    #####: 1375:            state->coins += 3;
        -: 1376:        }
        -: 1377:    }
        -: 1378:
        -: 1379:    //add bonus
        1: 1380:    state->coins += bonus;
        -: 1381:
        1: 1382:    return 0;
        -: 1383:}
        -: 1384:
        -: 1385:
        -: 1386://end of dominion.c
        -: 1387:
unittest1.c:
----------------- Testing function shuffle() ----------------

TEST 1: Cards are shuffled after shuffle() 
PASSED

TEST 2: Cards Number are not changed after shuffle() 
PASSED

TEST 3: Cards Number is 0, shuffle() returns -1
PASSED

 >>>>> SUCCESS: Testing complete shuffle() <<<<<

File 'dominion.c'
Lines executed:16.08% of 566
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       44:    8:int compare(const void* a, const void* b) {
       44:    9:    if (*(int*)a > *(int*)b)
        5:   10:        return 1;
       39:   11:    if (*(int*)a < *(int*)b)
       11:   12:        return -1;
       28:   13:    return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:
        -:   40:    int i;
        -:   41:    int j;
        -:   42:    int it;
        -:   43:    //set up random number generator
        1:   44:    SelectStream(1);
        1:   45:    PutSeed((long)randomSeed);
        -:   46:
        -:   47:    //check number of players
        1:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
        1:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
       11:   57:    for (i = 0; i < 10; i++)
        -:   58:    {
      110:   59:        for (j = 0; j < 10; j++)
        -:   60:        {
      100:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
        1:   73:    if (numPlayers == 2)
        -:   74:    {
        1:   75:        state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:    else if (numPlayers == 3)
        -:   78:    {
    #####:   79:        state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
        1:   87:    if (numPlayers == 2)
        -:   88:    {
        1:   89:        state->supplyCount[estate] = 8;
        1:   90:        state->supplyCount[duchy] = 8;
        1:   91:        state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:    else
        -:   94:    {
    #####:   95:        state->supplyCount[estate] = 12;
    #####:   96:        state->supplyCount[duchy] = 12;
    #####:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
        1:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:    state->supplyCount[silver] = 40;
        1:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
       21:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      165:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:        {
      155:  110:            if (kingdomCards[j] == i)
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
       10:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:                {
        4:  115:                    if (numPlayers == 2){
        2:  116:                        state->supplyCount[i] = 8;
        -:  117:                    }
    #####:  118:                    else{ state->supplyCount[i] = 12; }
        -:  119:                }
        -:  120:                else
        -:  121:                {
        8:  122:                    state->supplyCount[i] = 10;
        -:  123:                }
       10:  124:                break;
        -:  125:            }
        -:  126:            else    //card is not in the set choosen for the game
        -:  127:            {
      145:  128:                state->supplyCount[i] = -1;
        -:  129:            }
        -:  130:        }
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:    ////////////////////////
        -:  135:    //supply intilization complete
        -:  136:
        -:  137:    //set player decks
        3:  138:    for (i = 0; i < numPlayers; i++)
        -:  139:    {
        2:  140:        state->deckCount[i] = 0;
        8:  141:        for (j = 0; j < 3; j++)
        -:  142:        {
        6:  143:            state->deck[i][j] = estate;
        6:  144:            state->deckCount[i]++;
        -:  145:        }
       16:  146:        for (j = 3; j < 10; j++)
        -:  147:        {
       14:  148:            state->deck[i][j] = copper;
       14:  149:            state->deckCount[i]++;
        -:  150:        }
        -:  151:    }
        -:  152:
        -:  153:    //shuffle player decks
        3:  154:    for (i = 0; i < numPlayers; i++)
        -:  155:    {
        2:  156:        if ( shuffle(i, state) < 0 )
        -:  157:        {
    #####:  158:            return -1;
        -:  159:        }
        -:  160:    }
        -:  161:
        -:  162:    //draw player hands
        3:  163:    for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:        //initialize hand size to zero
        2:  166:        state->handCount[i] = 0;
        2:  167:        state->discardCount[i] = 0;
        -:  168:        //draw 5 cards
        -:  169:        // for (j = 0; j < 5; j++)
        -:  170:        //	{
        -:  171:        //	  drawCard(i, state);
        -:  172:        //	}
        -:  173:    }
        -:  174:
        -:  175:    //set embargo tokens to 0 for all supply piles
       28:  176:    for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       27:  178:        state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:    //initialize first player's turn
        1:  182:    state->outpostPlayed = 0;
        1:  183:    state->phase = 0;
        1:  184:    state->numActions = 1;
        1:  185:    state->numBuys = 1;
        1:  186:    state->playedCardCount = 0;
        1:  187:    state->whoseTurn = 0;
        1:  188:    state->handCount[state->whoseTurn] = 0;
        -:  189:    //int it; move to top
        -:  190:
        -:  191:    //Moved draw cards to here, only drawing at the start of a turn
        6:  192:    for (it = 0; it < 5; it++){
        5:  193:        drawCard(state->whoseTurn, state);
        -:  194:    }
        -:  195:
        1:  196:    updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:    return 0;
        -:  199:}
        -:  200:
        5:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:    int newDeck[MAX_DECK];
        5:  205:    int newDeckPos = 0;
        -:  206:    int card;
        -:  207:    int i;
        -:  208:
        5:  209:    if (state->deckCount[player] < 1)
        1:  210:        return -1;
        4:  211:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       38:  214:    while (state->deckCount[player] > 0) {
       30:  215:        card = floor(Random() * state->deckCount[player]);
       30:  216:        newDeck[newDeckPos] = state->deck[player][card];
       30:  217:        newDeckPos++;
       75:  218:        for (i = card; i < state->deckCount[player]-1; i++) {
       45:  219:            state->deck[player][i] = state->deck[player][i+1];
        -:  220:        }
       30:  221:        state->deckCount[player]--;
        -:  222:    }
       34:  223:    for (i = 0; i < newDeckPos; i++) {
       30:  224:        state->deck[player][i] = newDeck[i];
       30:  225:        state->deckCount[player]++;
        -:  226:    }
        -:  227:
        4:  228:    return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:    int card;
    #####:  234:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:    //check if it is the right phase
    #####:  237:    if (state->phase != 0)
        -:  238:    {
    #####:  239:        return -1;
        -:  240:    }
        -:  241:
        -:  242:    //check if player has enough actions
    #####:  243:    if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:        return -1;
        -:  246:    }
        -:  247:
        -:  248:    //get card played
    #####:  249:    card = handCard(handPos, state);
        -:  250:
        -:  251:    //check if selected card is an action
    #####:  252:    if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:        return -1;
        -:  255:    }
        -:  256:
        -:  257:    //play card
    #####:  258:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:        return -1;
        -:  261:    }
        -:  262:
        -:  263:    //reduce number of actions
    #####:  264:    state->numActions--;
        -:  265:
        -:  266:    //update coins (Treasure cards may be added with card draws)
    #####:  267:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:    return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:    int who;
        -:  274:    if (DEBUG){
        -:  275:        printf("Entering buyCard...\n");
        -:  276:    }
        -:  277:
        -:  278:    // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:    who = state->whoseTurn;
        -:  281:
    #####:  282:    if (state->numBuys < 1){
        -:  283:        if (DEBUG)
        -:  284:            printf("You do not have any buys left\n");
    #####:  285:        return -1;
    #####:  286:    } else if (supplyCount(supplyPos, state) <1){
        -:  287:        if (DEBUG)
        -:  288:            printf("There are not any of that type of card left\n");
    #####:  289:        return -1;
    #####:  290:    } else if (state->coins < getCost(supplyPos)){
        -:  291:        if (DEBUG)
        -:  292:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:        return -1;
        -:  294:    } else {
    #####:  295:        state->phase=1;
        -:  296:        //state->supplyCount[supplyPos]--;
    #####:  297:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:        state->numBuys--;
        -:  301:        if (DEBUG)
        -:  302:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:    }
        -:  304:
        -:  305:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:    //state->discardCount[who]++;
        -:  307:
    #####:  308:    return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:    return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:    int currentPlayer = whoseTurn(state);
    #####:  317:    return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:    return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:    int i;
    #####:  326:    int count = 0;
        -:  327:
    #####:  328:    for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:        if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:    for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:        if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:    for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:        if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:    return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:    return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:    int k;
        -:  352:    int i;
    #####:  353:    int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:    //Discard hand
    #####:  356:    for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:    }
    #####:  360:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:    //Code for determining the player
    #####:  363:    if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:    }
        -:  366:    else{
    #####:  367:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:    }
        -:  369:
    #####:  370:    state->outpostPlayed = 0;
    #####:  371:    state->phase = 0;
    #####:  372:    state->numActions = 1;
    #####:  373:    state->coins = 0;
    #####:  374:    state->numBuys = 1;
    #####:  375:    state->playedCardCount = 0;
    #####:  376:    state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:    //int k; move to top
        -:  379:    //Next player draws hand
    #####:  380:    for (k = 0; k < 5; k++){
    #####:  381:        drawCard(state->whoseTurn, state);//Draw a card
        -:  382:    }
        -:  383:
        -:  384:    //Update money
    #####:  385:    updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:    return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:    int i;
        -:  392:    int j;
        -:  393:
        -:  394:    //if stack of Province cards is empty, the game ends
    #####:  395:    if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:        return 1;
        -:  398:    }
        -:  399:
        -:  400:    //if three supply pile are at 0, the game ends
    #####:  401:    j = 0;
    #####:  402:    for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:        if (state->supplyCount[i] == 0)
        -:  405:        {
    #####:  406:            j++;
        -:  407:        }
        -:  408:    }
    #####:  409:    if ( j >= 3)
        -:  410:    {
    #####:  411:        return 1;
        -:  412:    }
        -:  413:
    #####:  414:    return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:    int i;
    #####:  420:    int score = 0;
        -:  421:    //score from hand
    #####:  422:    for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:        if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:        if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:        if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:        if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:        if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:    //score from discard
    #####:  433:    for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:        if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:        if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:        if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:        if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:        if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:    //score from deck
    #####:  444:    for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:        if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:        if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:        if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:        if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:        if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:    return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:    int i;
        -:  459:    int j;
        -:  460:    int highScore;
        -:  461:    int currentPlayer;
        -:  462:
        -:  463:    //get score for each player
    #####:  464:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:        //set unused player scores to -9999
    #####:  467:        if (i >= state->numPlayers)
        -:  468:        {
    #####:  469:            players[i] = -9999;
        -:  470:        }
        -:  471:        else
        -:  472:        {
    #####:  473:            players[i] = scoreFor (i, state);
        -:  474:        }
        -:  475:    }
        -:  476:
        -:  477:    //find highest score
    #####:  478:    j = 0;
    #####:  479:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:        if (players[i] > players[j])
        -:  482:        {
    #####:  483:            j = i;
        -:  484:        }
        -:  485:    }
    #####:  486:    highScore = players[j];
        -:  487:
        -:  488:    //add 1 to players who had less turns
    #####:  489:    currentPlayer = whoseTurn(state);
    #####:  490:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:        if ( players[i] == highScore && i > currentPlayer )
        -:  493:        {
    #####:  494:            players[i]++;
        -:  495:        }
        -:  496:    }
        -:  497:
        -:  498:    //find new highest score
    #####:  499:    j = 0;
    #####:  500:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:        if ( players[i] > players[j] )
        -:  503:        {
    #####:  504:            j = i;
        -:  505:        }
        -:  506:    }
    #####:  507:    highScore = players[j];
        -:  508:
        -:  509:    //set winners in array to 1 and rest to 0
    #####:  510:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:        if ( players[i] == highScore )
        -:  513:        {
    #####:  514:            players[i] = 1;
        -:  515:        }
        -:  516:        else
        -:  517:        {
    #####:  518:            players[i] = 0;
        -:  519:        }
        -:  520:    }
        -:  521:
    #####:  522:    return 0;
        -:  523:}
        -:  524:
        5:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:    int deckCounter;
        5:  528:    if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:        //Step 1 Shuffle the discard pile back into a deck
        -:  531:        int i;
        -:  532:        //Move discard to deck
    #####:  533:        for (i = 0; i < state->discardCount[player];i++){
    #####:  534:            state->deck[player][i] = state->discard[player][i];
    #####:  535:            state->discard[player][i] = -1;
        -:  536:        }
        -:  537:
    #####:  538:        state->deckCount[player] = state->discardCount[player];
    #####:  539:        state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:        //Shufffle the deck
    #####:  542:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:        if (DEBUG){//Debug statements
        -:  545:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:        }
        -:  547:
    #####:  548:        state->discardCount[player] = 0;
        -:  549:
        -:  550:        //Step 2 Draw Card
    #####:  551:        count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:        if (DEBUG){//Debug statements
        -:  554:            printf("Current hand count: %d\n", count);
        -:  555:        }
        -:  556:
    #####:  557:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:        if (deckCounter == 0)
    #####:  560:            return -1;
        -:  561:
    #####:  562:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:        state->deckCount[player]--;
    #####:  564:        state->handCount[player]++;//Increment hand count
        -:  565:    }
        -:  566:
        -:  567:    else{
        5:  568:        int count = state->handCount[player];//Get current hand count for player
        -:  569:        int deckCounter;
        -:  570:        if (DEBUG){//Debug statements
        -:  571:            printf("Current hand count: %d\n", count);
        -:  572:        }
        -:  573:
        5:  574:        deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  575:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  576:        state->deckCount[player]--;
        5:  577:        state->handCount[player]++;//Increment hand count
        -:  578:    }
        -:  579:
        5:  580:    return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:    switch( cardNumber )
        -:  586:    {
        -:  587:        case curse:
    #####:  588:            return 0;
        -:  589:        case estate:
    #####:  590:            return 2;
        -:  591:        case duchy:
    #####:  592:            return 5;
        -:  593:        case province:
    #####:  594:            return 8;
        -:  595:        case copper:
    #####:  596:            return 0;
        -:  597:        case silver:
    #####:  598:            return 3;
        -:  599:        case gold:
    #####:  600:            return 6;
        -:  601:        case adventurer:
    #####:  602:            return 6;
        -:  603:        case council_room:
    #####:  604:            return 5;
        -:  605:        case feast:
    #####:  606:            return 4;
        -:  607:        case gardens:
    #####:  608:            return 4;
        -:  609:        case mine:
    #####:  610:            return 5;
        -:  611:        case remodel:
    #####:  612:            return 4;
        -:  613:        case smithy:
    #####:  614:            return 4;
        -:  615:        case village:
    #####:  616:            return 3;
        -:  617:        case baron:
    #####:  618:            return 4;
        -:  619:        case great_hall:
    #####:  620:            return 3;
        -:  621:        case minion:
    #####:  622:            return 5;
        -:  623:        case steward:
    #####:  624:            return 3;
        -:  625:        case tribute:
    #####:  626:            return 5;
        -:  627:        case ambassador:
    #####:  628:            return 3;
        -:  629:        case cutpurse:
    #####:  630:            return 4;
        -:  631:        case embargo:
    #####:  632:            return 2;
        -:  633:        case outpost:
    #####:  634:            return 5;
        -:  635:        case salvager:
    #####:  636:            return 4;
        -:  637:        case sea_hag:
    #####:  638:            return 4;
        -:  639:        case treasure_map:
    #####:  640:            return 4;
        -:  641:    }
        -:  642:
    #####:  643:    return -1;
        -:  644:}
        -:  645:
        -:  646:
        -:  647:
    #####:  648:int SmithyCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  649:
        -:  650:    //+3 Cards
        -:  651:    int i;
    #####:  652:    for (i = 0; i < 5; i++)
        -:  653:    {
    #####:  654:        drawCard(currentPlayer, state);
        -:  655:    }
        -:  656:
        -:  657:    //discard card from hand
        -:  658:    //discardCard(handPos, currentPlayer, state, 0);
    #####:  659:    return 0;
        -:  660://bug introduced: draw 5 cards instead of 3; do not discard a card
        -:  661:}
        -:  662:
        -:  663:
    #####:  664:int AdventurerCard(int currentPlayer, struct gameState *state, int drawntreasure, int temphand[], int cardDrawn, int z) {
        -:  665:
    #####:  666:    while(drawntreasure<5){
    #####:  667:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  668:            shuffle(currentPlayer, state);
        -:  669:        }
    #####:  670:        drawCard(currentPlayer, state);
    #####:  671:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  672:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  673:            drawntreasure++;
        -:  674:        else{
    #####:  675:            temphand[z]=cardDrawn;
    #####:  676:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  677:            z++;
        -:  678:        }
        -:  679:    }
    #####:  680:    while(z-1>=0){
    #####:  681:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  682:        z=z-1;
        -:  683:    }
    #####:  684:    return 0;
        -:  685:// bug introduced: player is able to draw 5 treasure cards instead of 2.
        -:  686:}
        -:  687:
        -:  688:
    #####:  689:int VillageCard(int currentPlayer, struct gameState *state, int handPos){
        -:  690:
        -:  691:    //+1 Card
    #####:  692:    drawCard(currentPlayer, state);
    #####:  693:    drawCard(currentPlayer, state);
    #####:  694:    drawCard(currentPlayer, state);
        -:  695:
        -:  696:    //+2 Actions
    #####:  697:    state->numActions = state->numActions + 10;
        -:  698:
        -:  699:    //discard played card from hand
    #####:  700:    discardCard(handPos, currentPlayer, state, 0);
    #####:  701:    return 0;
        -:  702:// bug introduced: increase action points by 10 instead of 2 and draw 3 cards instead of 1
        -:  703:}
        -:  704:
        -:  705:
    #####:  706:int GreatHallCard(int currentPlayer, struct gameState *state, int handPos){
        -:  707:    //+1 Card
    #####:  708:    drawCard(currentPlayer, state);
        -:  709:
        -:  710:    //+1 Actions
    #####:  711:    state->numActions++;
        -:  712:
        -:  713:    //discard card from hand
    #####:  714:    discardCard(handPos, currentPlayer, state, 0);
    #####:  715:    return 0;
        -:  716:}
        -:  717:
        -:  718:
    #####:  719:int EmbargoCard(int currentPlayer, int handPos, struct gameState *state, int choice1) {
        -:  720://+2 Coins
    #####:  721:    state->coins = state->coins + 20;
        -:  722:
        -:  723:    //see if selected pile is in play
    #####:  724:    if ( state->supplyCount[choice1] == -1 )
        -:  725:    {
    #####:  726:        return -1;
        -:  727:    }
        -:  728:
        -:  729:    //add embargo token to selected supply pile
    #####:  730:    state->embargoTokens[choice1]++;
    #####:  731:    state->embargoTokens[choice1]++;
        -:  732:
        -:  733:    //trash card
    #####:  734:    discardCard(handPos, currentPlayer, state, 1);
        -:  735:
        -:  736:
    #####:  737:    return 0;
        -:  738://bug introduced: increase state->coins by 20 instead of 2, and add 2 embargo tokens instead of one
        -:  739:}
        -:  740:
        -:  741:
        -:  742:
    #####:  743:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  744:{
        -:  745:    int i;
        -:  746:    int j;
        -:  747:    int k;
        -:  748:    int x;
        -:  749:    int index;
    #####:  750:    int currentPlayer = whoseTurn(state);
    #####:  751:    int nextPlayer = currentPlayer + 1;
        -:  752:
    #####:  753:    int tributeRevealedCards[2] = {-1, -1};
        -:  754:    int temphand[MAX_HAND];// moved above the if statement
    #####:  755:    int drawntreasure=0;
    #####:  756:    int cardDrawn=0;
    #####:  757:    int z = 0;// this is the counter for the temp hand
    #####:  758:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  759:        nextPlayer = 0;
        -:  760:    }
        -:  761:
        -:  762:
        -:  763:    //uses switch to select card and perform actions
    #####:  764:    switch( card )
        -:  765:    {
        -:  766:        case adventurer:
        -:  767:
    #####:  768:            AdventurerCard(currentPlayer, state, drawntreasure, temphand, cardDrawn, z);
        -:  769:
    #####:  770:            return 0;
        -:  771:
        -:  772:        case council_room:
        -:  773:            //+4 Cards
    #####:  774:            for (i = 0; i < 4; i++)
        -:  775:            {
    #####:  776:                drawCard(currentPlayer, state);
        -:  777:            }
        -:  778:
        -:  779:            //+1 Buy
    #####:  780:            state->numBuys++;
        -:  781:
        -:  782:            //Each other player draws a card
    #####:  783:            for (i = 0; i < state->numPlayers; i++)
        -:  784:            {
    #####:  785:                if ( i != currentPlayer )
        -:  786:                {
    #####:  787:                    drawCard(i, state);
        -:  788:                }
        -:  789:            }
        -:  790:
        -:  791:            //put played card in played card pile
    #####:  792:            discardCard(handPos, currentPlayer, state, 0);
        -:  793:
    #####:  794:            return 0;
        -:  795:
        -:  796:        case feast:
        -:  797:            //gain card with cost up to 5
        -:  798:            //Backup hand
    #####:  799:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  800:                temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  801:                state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  802:            }
        -:  803:            //Backup hand
        -:  804:
        -:  805:            //Update Coins for Buy
    #####:  806:            updateCoins(currentPlayer, state, 5);
    #####:  807:            x = 1;//Condition to loop on
    #####:  808:            while( x == 1) {//Buy one card
    #####:  809:                if (supplyCount(choice1, state) <= 0){
        -:  810:                    if (DEBUG)
        -:  811:                        printf("None of that card left, sorry!\n");
        -:  812:
        -:  813:                    if (DEBUG){
        -:  814:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  815:                    }
        -:  816:                }
    #####:  817:                else if (state->coins < getCost(choice1)){
    #####:  818:                    printf("That card is too expensive!\n");
        -:  819:
        -:  820:                    if (DEBUG){
        -:  821:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  822:                    }
        -:  823:                }
        -:  824:                else{
        -:  825:
        -:  826:                    if (DEBUG){
        -:  827:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:                    }
        -:  829:
    #####:  830:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  831:                    x = 0;//No more buying cards
        -:  832:
        -:  833:                    if (DEBUG){
        -:  834:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  835:                    }
        -:  836:
        -:  837:                }
        -:  838:            }
        -:  839:
        -:  840:            //Reset Hand
    #####:  841:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  842:                state->hand[currentPlayer][i] = temphand[i];
    #####:  843:                temphand[i] = -1;
        -:  844:            }
        -:  845:            //Reset Hand
        -:  846:
    #####:  847:            return 0;
        -:  848:
        -:  849:        case gardens:
    #####:  850:            return -1;
        -:  851:
        -:  852:        case mine:
    #####:  853:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  856:            {
    #####:  857:                return -1;
        -:  858:            }
        -:  859:
    #####:  860:            if (choice2 > treasure_map || choice2 < curse)
        -:  861:            {
    #####:  862:                return -1;
        -:  863:            }
        -:  864:
    #####:  865:            if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  866:            {
    #####:  867:                return -1;
        -:  868:            }
        -:  869:
    #####:  870:            gainCard(choice2, state, 2, currentPlayer);
        -:  871:
        -:  872:            //discard card from hand
    #####:  873:            discardCard(handPos, currentPlayer, state, 0);
        -:  874:
        -:  875:            //discard trashed card
    #####:  876:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  877:            {
    #####:  878:                if (state->hand[currentPlayer][i] == j)
        -:  879:                {
    #####:  880:                    discardCard(i, currentPlayer, state, 0);
    #####:  881:                    break;
        -:  882:                }
        -:  883:            }
        -:  884:
    #####:  885:            return 0;
        -:  886:
        -:  887:        case remodel:
    #####:  888:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  889:
    #####:  890:            if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  891:            {
    #####:  892:                return -1;
        -:  893:            }
        -:  894:
    #####:  895:            gainCard(choice2, state, 0, currentPlayer);
        -:  896:
        -:  897:            //discard card from hand
    #####:  898:            discardCard(handPos, currentPlayer, state, 0);
        -:  899:
        -:  900:            //discard trashed card
    #####:  901:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  902:            {
    #####:  903:                if (state->hand[currentPlayer][i] == j)
        -:  904:                {
    #####:  905:                    discardCard(i, currentPlayer, state, 0);
    #####:  906:                    break;
        -:  907:                }
        -:  908:            }
        -:  909:
        -:  910:
    #####:  911:            return 0;
        -:  912:
        -:  913:        case smithy:
        -:  914:
    #####:  915:            SmithyCard(currentPlayer, state, handPos);
    #####:  916:            return 0;
        -:  917:
        -:  918:        case village:
        -:  919:
    #####:  920:            VillageCard(currentPlayer, state, handPos);
        -:  921:
    #####:  922:            return 0;
        -:  923:
        -:  924:        case baron:
    #####:  925:            state->numBuys++;//Increase buys by 1!
    #####:  926:            if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  927:                int p = 0;//Iterator for hand!
    #####:  928:                int card_not_discarded = 1;//Flag for discard set!
    #####:  929:                while(card_not_discarded){
    #####:  930:                    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  931:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  932:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  933:                        state->discardCount[currentPlayer]++;
    #####:  934:                        for (;p < state->handCount[currentPlayer]; p++){
    #####:  935:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  936:                        }
    #####:  937:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  938:                        state->handCount[currentPlayer]--;
    #####:  939:                        card_not_discarded = 0;//Exit the loop
        -:  940:                    }
    #####:  941:                    else if (p > state->handCount[currentPlayer]){
        -:  942:                        if(DEBUG) {
        -:  943:                            printf("No estate cards in your hand, invalid choice\n");
        -:  944:                            printf("Must gain an estate if there are any\n");
        -:  945:                        }
    #####:  946:                        if (supplyCount(estate, state) > 0){
    #####:  947:                            gainCard(estate, state, 0, currentPlayer);
    #####:  948:                            state->supplyCount[estate]--;//Decrement estates
    #####:  949:                            if (supplyCount(estate, state) == 0){
    #####:  950:                                isGameOver(state);
        -:  951:                            }
        -:  952:                        }
    #####:  953:                        card_not_discarded = 0;//Exit the loop
        -:  954:                    }
        -:  955:
        -:  956:                    else{
    #####:  957:                        p++;//Next card
        -:  958:                    }
        -:  959:                }
        -:  960:            }
        -:  961:
        -:  962:            else{
    #####:  963:                if (supplyCount(estate, state) > 0){
    #####:  964:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  965:                    state->supplyCount[estate]--;//Decrement Estates
    #####:  966:                    if (supplyCount(estate, state) == 0){
    #####:  967:                        isGameOver(state);
        -:  968:                    }
        -:  969:                }
        -:  970:            }
        -:  971:
        -:  972:
    #####:  973:            return 0;
        -:  974:
        -:  975:        case great_hall:
        -:  976:
    #####:  977:            GreatHallCard(currentPlayer, state, handPos);
        -:  978:
    #####:  979:            return 0;
        -:  980:
        -:  981:        case minion:
        -:  982:            //+1 action
    #####:  983:            state->numActions++;
        -:  984:
        -:  985:            //discard card from hand
    #####:  986:            discardCard(handPos, currentPlayer, state, 0);
        -:  987:
    #####:  988:            if (choice1)		//+2 coins
        -:  989:            {
    #####:  990:                state->coins = state->coins + 2;
        -:  991:            }
        -:  992:
    #####:  993:            else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  994:            {
        -:  995:                //discard hand
    #####:  996:                while(numHandCards(state) > 0)
        -:  997:                {
    #####:  998:                    discardCard(handPos, currentPlayer, state, 0);
        -:  999:                }
        -: 1000:
        -: 1001:                //draw 4
    #####: 1002:                for (i = 0; i < 4; i++)
        -: 1003:                {
    #####: 1004:                    drawCard(currentPlayer, state);
        -: 1005:                }
        -: 1006:
        -: 1007:                //other players discard hand and redraw if hand size > 4
    #####: 1008:                for (i = 0; i < state->numPlayers; i++)
        -: 1009:                {
    #####: 1010:                    if (i != currentPlayer)
        -: 1011:                    {
    #####: 1012:                        if ( state->handCount[i] > 4 )
        -: 1013:                        {
        -: 1014:                            //discard hand
    #####: 1015:                            while( state->handCount[i] > 0 )
        -: 1016:                            {
    #####: 1017:                                discardCard(handPos, i, state, 0);
        -: 1018:                            }
        -: 1019:
        -: 1020:                            //draw 4
    #####: 1021:                            for (j = 0; j < 4; j++)
        -: 1022:                            {
    #####: 1023:                                drawCard(i, state);
        -: 1024:                            }
        -: 1025:                        }
        -: 1026:                    }
        -: 1027:                }
        -: 1028:
        -: 1029:            }
    #####: 1030:            return 0;
        -: 1031:
        -: 1032:        case steward:
    #####: 1033:            if (choice1 == 1)
        -: 1034:            {
        -: 1035:                //+2 cards
    #####: 1036:                drawCard(currentPlayer, state);
    #####: 1037:                drawCard(currentPlayer, state);
        -: 1038:            }
    #####: 1039:            else if (choice1 == 2)
        -: 1040:            {
        -: 1041:                //+2 coins
    #####: 1042:                state->coins = state->coins + 2;
        -: 1043:            }
        -: 1044:            else
        -: 1045:            {
        -: 1046:                //trash 2 cards in hand
    #####: 1047:                discardCard(choice2, currentPlayer, state, 1);
    #####: 1048:                discardCard(choice3, currentPlayer, state, 1);
        -: 1049:            }
        -: 1050:
        -: 1051:            //discard card from hand
    #####: 1052:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1053:            return 0;
        -: 1054:
        -: 1055:        case tribute:
    #####: 1056:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1057:                if (state->deckCount[nextPlayer] > 0){
    #####: 1058:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1059:                    state->deckCount[nextPlayer]--;
        -: 1060:                }
    #####: 1061:                else if (state->discardCount[nextPlayer] > 0){
    #####: 1062:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1063:                    state->discardCount[nextPlayer]--;
        -: 1064:                }
        -: 1065:                else{
        -: 1066:                    //No Card to Reveal
        -: 1067:                    if (DEBUG){
        -: 1068:                        printf("No cards to reveal\n");
        -: 1069:                    }
        -: 1070:                }
        -: 1071:            }
        -: 1072:
        -: 1073:            else{
    #####: 1074:                if (state->deckCount[nextPlayer] == 0){
    #####: 1075:                    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1076:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1077:                        state->deckCount[nextPlayer]++;
    #####: 1078:                        state->discard[nextPlayer][i] = -1;
    #####: 1079:                        state->discardCount[nextPlayer]--;
        -: 1080:                    }
        -: 1081:
    #####: 1082:                    shuffle(nextPlayer,state);//Shuffle the deck
        -: 1083:                }
    #####: 1084:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1085:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1086:                state->deckCount[nextPlayer]--;
    #####: 1087:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1088:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1089:                state->deckCount[nextPlayer]--;
        -: 1090:            }
        -: 1091:
    #####: 1092:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1093:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1094:                state->playedCardCount++;
    #####: 1095:                tributeRevealedCards[1] = -1;
        -: 1096:            }
        -: 1097:
    #####: 1098:            for (i = 0; i <= 2; i ++){
    #####: 1099:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1100:                    state->coins += 2;
        -: 1101:                }
        -: 1102:
    #####: 1103:                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1104:                    drawCard(currentPlayer, state);
    #####: 1105:                    drawCard(currentPlayer, state);
        -: 1106:                }
        -: 1107:                else{//Action Card
    #####: 1108:                    state->numActions = state->numActions + 2;
        -: 1109:                }
        -: 1110:            }
        -: 1111:
    #####: 1112:            return 0;
        -: 1113:
        -: 1114:        case ambassador:
    #####: 1115:            j = 0;		//used to check if player has enough cards to discard
        -: 1116:
    #####: 1117:            if (choice2 > 2 || choice2 < 0)
        -: 1118:            {
    #####: 1119:                return -1;
        -: 1120:            }
        -: 1121:
    #####: 1122:            if (choice1 == handPos)
        -: 1123:            {
    #####: 1124:                return -1;
        -: 1125:            }
        -: 1126:
    #####: 1127:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1128:            {
    #####: 1129:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1130:                {
    #####: 1131:                    j++;
        -: 1132:                }
        -: 1133:            }
    #####: 1134:            if (j < choice2)
        -: 1135:            {
    #####: 1136:                return -1;
        -: 1137:            }
        -: 1138:
        -: 1139:            if (DEBUG)
        -: 1140:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1141:
        -: 1142:            //increase supply count for choosen card by amount being discarded
    #####: 1143:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1144:
        -: 1145:            //each other player gains a copy of revealed card
    #####: 1146:            for (i = 0; i < state->numPlayers; i++)
        -: 1147:            {
    #####: 1148:                if (i != currentPlayer)
        -: 1149:                {
    #####: 1150:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1151:                }
        -: 1152:            }
        -: 1153:
        -: 1154:            //discard played card from hand
    #####: 1155:            discardCard(handPos, currentPlayer, state, 0);
        -: 1156:
        -: 1157:            //trash copies of cards returned to supply
    #####: 1158:            for (j = 0; j < choice2; j++)
        -: 1159:            {
    #####: 1160:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1161:                {
    #####: 1162:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1163:                    {
    #####: 1164:                        discardCard(i, currentPlayer, state, 1);
    #####: 1165:                        break;
        -: 1166:                    }
        -: 1167:                }
        -: 1168:            }
        -: 1169:
    #####: 1170:            return 0;
        -: 1171:
        -: 1172:        case cutpurse:
        -: 1173:
    #####: 1174:            updateCoins(currentPlayer, state, 2);
    #####: 1175:            for (i = 0; i < state->numPlayers; i++)
        -: 1176:            {
    #####: 1177:                if (i != currentPlayer)
        -: 1178:                {
    #####: 1179:                    for (j = 0; j < state->handCount[i]; j++)
        -: 1180:                    {
    #####: 1181:                        if (state->hand[i][j] == copper)
        -: 1182:                        {
    #####: 1183:                            discardCard(j, i, state, 0);
    #####: 1184:                            break;
        -: 1185:                        }
    #####: 1186:                        if (j == state->handCount[i])
        -: 1187:                        {
    #####: 1188:                            for (k = 0; k < state->handCount[i]; k++)
        -: 1189:                            {
        -: 1190:                                if (DEBUG)
        -: 1191:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1192:                            }
    #####: 1193:                            break;
        -: 1194:                        }
        -: 1195:                    }
        -: 1196:
        -: 1197:                }
        -: 1198:
        -: 1199:            }
        -: 1200:
        -: 1201:            //discard played card from hand
    #####: 1202:            discardCard(handPos, currentPlayer, state, 0);
        -: 1203:
    #####: 1204:            return 0;
        -: 1205:
        -: 1206:
        -: 1207:        case embargo:
        -: 1208:
    #####: 1209:            EmbargoCard(currentPlayer, handPos, state, choice1);
    #####: 1210:            return 0;
        -: 1211:
        -: 1212:        case outpost:
        -: 1213:            //set outpost flag
    #####: 1214:            state->outpostPlayed++;
        -: 1215:
        -: 1216:            //discard card
    #####: 1217:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1218:            return 0;
        -: 1219:
        -: 1220:        case salvager:
        -: 1221:            //+1 buy
    #####: 1222:            state->numBuys++;
        -: 1223:
    #####: 1224:            if (choice1)
        -: 1225:            {
        -: 1226:                //gain coins equal to trashed card
    #####: 1227:                state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1228:                //trash card
    #####: 1229:                discardCard(choice1, currentPlayer, state, 1);
        -: 1230:            }
        -: 1231:
        -: 1232:            //discard card
    #####: 1233:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1234:            return 0;
        -: 1235:
        -: 1236:        case sea_hag:
    #####: 1237:            for (i = 0; i < state->numPlayers; i++){
    #####: 1238:                if (i != currentPlayer){
    #####: 1239:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1240:                    state->discardCount[i]++;
    #####: 1241:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1242:                }
        -: 1243:            }
    #####: 1244:            return 0;
        -: 1245:
        -: 1246:        case treasure_map:
        -: 1247:            //search hand for another treasure_map
    #####: 1248:            index = -1;
    #####: 1249:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1250:            {
    #####: 1251:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1252:                {
    #####: 1253:                    index = i;
    #####: 1254:                    break;
        -: 1255:                }
        -: 1256:            }
    #####: 1257:            if (index > -1)
        -: 1258:            {
        -: 1259:                //trash both treasure cards
    #####: 1260:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1261:                discardCard(index, currentPlayer, state, 1);
        -: 1262:
        -: 1263:                //gain 4 Gold cards
    #####: 1264:                for (i = 0; i < 4; i++)
        -: 1265:                {
    #####: 1266:                    gainCard(gold, state, 1, currentPlayer);
        -: 1267:                }
        -: 1268:
        -: 1269:                //return success
    #####: 1270:                return 1;
        -: 1271:            }
        -: 1272:
        -: 1273:            //no second treasure_map found in hand
    #####: 1274:            return -1;
        -: 1275:    }
        -: 1276:
    #####: 1277:    return -1;
        -: 1278:}
        -: 1279:
    #####: 1280:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1281:{
        -: 1282:
        -: 1283:    //if card is not trashed, added to Played pile
    #####: 1284:    if (trashFlag < 1)
        -: 1285:    {
        -: 1286:        //add card to played pile
    #####: 1287:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1288:        state->playedCardCount++;
        -: 1289:    }
        -: 1290:
        -: 1291:    //set played card to -1
    #####: 1292:    state->hand[currentPlayer][handPos] = -1;
        -: 1293:
        -: 1294:    //remove card from player's hand
    #####: 1295:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1296:    {
        -: 1297:        //reduce number of cards in hand
    #####: 1298:        state->handCount[currentPlayer]--;
        -: 1299:    }
    #####: 1300:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1301:    {
        -: 1302:        //reduce number of cards in hand
    #####: 1303:        state->handCount[currentPlayer]--;
        -: 1304:    }
        -: 1305:    else
        -: 1306:    {
        -: 1307:        //replace discarded card with last card in hand
    #####: 1308:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1309:        //set last card to -1
    #####: 1310:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1311:        //reduce number of cards in hand
    #####: 1312:        state->handCount[currentPlayer]--;
        -: 1313:    }
        -: 1314:
    #####: 1315:    return 0;
        -: 1316:}
        -: 1317:
    #####: 1318:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1319:{
        -: 1320:    //Note: supplyPos is enum of choosen card
        -: 1321:
        -: 1322:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1323:    if ( supplyCount(supplyPos, state) < 1 )
        -: 1324:    {
    #####: 1325:        return -1;
        -: 1326:    }
        -: 1327:
        -: 1328:    //added card for [whoseTurn] current player:
        -: 1329:    // toFlag = 0 : add to discard
        -: 1330:    // toFlag = 1 : add to deck
        -: 1331:    // toFlag = 2 : add to hand
        -: 1332:
    #####: 1333:    if (toFlag == 1)
        -: 1334:    {
    #####: 1335:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1336:        state->deckCount[player]++;
        -: 1337:    }
    #####: 1338:    else if (toFlag == 2)
        -: 1339:    {
    #####: 1340:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1341:        state->handCount[player]++;
        -: 1342:    }
        -: 1343:    else
        -: 1344:    {
    #####: 1345:        state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1346:        state->discardCount[player]++;
        -: 1347:    }
        -: 1348:
        -: 1349:    //decrease number in supply pile
    #####: 1350:    state->supplyCount[supplyPos]--;
        -: 1351:
    #####: 1352:    return 0;
        -: 1353:}
        -: 1354:
        1: 1355:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1356:{
        -: 1357:    int i;
        -: 1358:
        -: 1359:    //reset coin count
        1: 1360:    state->coins = 0;
        -: 1361:
        -: 1362:    //add coins for each Treasure card in player's hand
        6: 1363:    for (i = 0; i < state->handCount[player]; i++)
        -: 1364:    {
        5: 1365:        if (state->hand[player][i] == copper)
        -: 1366:        {
        4: 1367:            state->coins += 1;
        -: 1368:        }
        1: 1369:        else if (state->hand[player][i] == silver)
        -: 1370:        {
    #####: 1371:            state->coins += 2;
        -: 1372:        }
        1: 1373:        else if (state->hand[player][i] == gold)
        -: 1374:        {
    #####: 1375:            state->coins += 3;
        -: 1376:        }
        -: 1377:    }
        -: 1378:
        -: 1379:    //add bonus
        1: 1380:    state->coins += bonus;
        -: 1381:
        1: 1382:    return 0;
        -: 1383:}
        -: 1384:
        -: 1385:
        -: 1386://end of dominion.c
        -: 1387:
unittest2.c:
----------------- Testing function gainCard() ----------------

TEST 1: Supply pile is empty, shuffle() returns -1
PASSED

TEST 2: Add card to deck for player
PASSED

TEST 3: Add card to discard for player
PASSED

TEST 4: Add card to hand for player
PASSED

TEST 5: Decrease number in supply pile
PASSED

 >>>>> SUCCESS: Testing complete gainCard() <<<<<

File 'dominion.c'
Lines executed:18.37% of 566
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void* a, const void* b) {
       30:    9:    if (*(int*)a > *(int*)b)
    #####:   10:        return 1;
       30:   11:    if (*(int*)a < *(int*)b)
        8:   12:        return -1;
       22:   13:    return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:
        -:   40:    int i;
        -:   41:    int j;
        -:   42:    int it;
        -:   43:    //set up random number generator
        1:   44:    SelectStream(1);
        1:   45:    PutSeed((long)randomSeed);
        -:   46:
        -:   47:    //check number of players
        1:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
        1:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
       11:   57:    for (i = 0; i < 10; i++)
        -:   58:    {
      110:   59:        for (j = 0; j < 10; j++)
        -:   60:        {
      100:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
        1:   73:    if (numPlayers == 2)
        -:   74:    {
        1:   75:        state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:    else if (numPlayers == 3)
        -:   78:    {
    #####:   79:        state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
        1:   87:    if (numPlayers == 2)
        -:   88:    {
        1:   89:        state->supplyCount[estate] = 8;
        1:   90:        state->supplyCount[duchy] = 8;
        1:   91:        state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:    else
        -:   94:    {
    #####:   95:        state->supplyCount[estate] = 12;
    #####:   96:        state->supplyCount[duchy] = 12;
    #####:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
        1:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:    state->supplyCount[silver] = 40;
        1:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
       21:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      165:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:        {
      155:  110:            if (kingdomCards[j] == i)
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
       10:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:                {
        4:  115:                    if (numPlayers == 2){
        2:  116:                        state->supplyCount[i] = 8;
        -:  117:                    }
    #####:  118:                    else{ state->supplyCount[i] = 12; }
        -:  119:                }
        -:  120:                else
        -:  121:                {
        8:  122:                    state->supplyCount[i] = 10;
        -:  123:                }
       10:  124:                break;
        -:  125:            }
        -:  126:            else    //card is not in the set choosen for the game
        -:  127:            {
      145:  128:                state->supplyCount[i] = -1;
        -:  129:            }
        -:  130:        }
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:    ////////////////////////
        -:  135:    //supply intilization complete
        -:  136:
        -:  137:    //set player decks
        3:  138:    for (i = 0; i < numPlayers; i++)
        -:  139:    {
        2:  140:        state->deckCount[i] = 0;
        8:  141:        for (j = 0; j < 3; j++)
        -:  142:        {
        6:  143:            state->deck[i][j] = estate;
        6:  144:            state->deckCount[i]++;
        -:  145:        }
       16:  146:        for (j = 3; j < 10; j++)
        -:  147:        {
       14:  148:            state->deck[i][j] = copper;
       14:  149:            state->deckCount[i]++;
        -:  150:        }
        -:  151:    }
        -:  152:
        -:  153:    //shuffle player decks
        3:  154:    for (i = 0; i < numPlayers; i++)
        -:  155:    {
        2:  156:        if ( shuffle(i, state) < 0 )
        -:  157:        {
    #####:  158:            return -1;
        -:  159:        }
        -:  160:    }
        -:  161:
        -:  162:    //draw player hands
        3:  163:    for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:        //initialize hand size to zero
        2:  166:        state->handCount[i] = 0;
        2:  167:        state->discardCount[i] = 0;
        -:  168:        //draw 5 cards
        -:  169:        // for (j = 0; j < 5; j++)
        -:  170:        //	{
        -:  171:        //	  drawCard(i, state);
        -:  172:        //	}
        -:  173:    }
        -:  174:
        -:  175:    //set embargo tokens to 0 for all supply piles
       28:  176:    for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       27:  178:        state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:    //initialize first player's turn
        1:  182:    state->outpostPlayed = 0;
        1:  183:    state->phase = 0;
        1:  184:    state->numActions = 1;
        1:  185:    state->numBuys = 1;
        1:  186:    state->playedCardCount = 0;
        1:  187:    state->whoseTurn = 0;
        1:  188:    state->handCount[state->whoseTurn] = 0;
        -:  189:    //int it; move to top
        -:  190:
        -:  191:    //Moved draw cards to here, only drawing at the start of a turn
        6:  192:    for (it = 0; it < 5; it++){
        5:  193:        drawCard(state->whoseTurn, state);
        -:  194:    }
        -:  195:
        1:  196:    updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:    return 0;
        -:  199:}
        -:  200:
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:    int newDeck[MAX_DECK];
        2:  205:    int newDeckPos = 0;
        -:  206:    int card;
        -:  207:    int i;
        -:  208:
        2:  209:    if (state->deckCount[player] < 1)
    #####:  210:        return -1;
        2:  211:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:    while (state->deckCount[player] > 0) {
       20:  215:        card = floor(Random() * state->deckCount[player]);
       20:  216:        newDeck[newDeckPos] = state->deck[player][card];
       20:  217:        newDeckPos++;
       59:  218:        for (i = card; i < state->deckCount[player]-1; i++) {
       39:  219:            state->deck[player][i] = state->deck[player][i+1];
        -:  220:        }
       20:  221:        state->deckCount[player]--;
        -:  222:    }
       22:  223:    for (i = 0; i < newDeckPos; i++) {
       20:  224:        state->deck[player][i] = newDeck[i];
       20:  225:        state->deckCount[player]++;
        -:  226:    }
        -:  227:
        2:  228:    return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:    int card;
    #####:  234:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:    //check if it is the right phase
    #####:  237:    if (state->phase != 0)
        -:  238:    {
    #####:  239:        return -1;
        -:  240:    }
        -:  241:
        -:  242:    //check if player has enough actions
    #####:  243:    if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:        return -1;
        -:  246:    }
        -:  247:
        -:  248:    //get card played
    #####:  249:    card = handCard(handPos, state);
        -:  250:
        -:  251:    //check if selected card is an action
    #####:  252:    if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:        return -1;
        -:  255:    }
        -:  256:
        -:  257:    //play card
    #####:  258:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:        return -1;
        -:  261:    }
        -:  262:
        -:  263:    //reduce number of actions
    #####:  264:    state->numActions--;
        -:  265:
        -:  266:    //update coins (Treasure cards may be added with card draws)
    #####:  267:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:    return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:    int who;
        -:  274:    if (DEBUG){
        -:  275:        printf("Entering buyCard...\n");
        -:  276:    }
        -:  277:
        -:  278:    // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:    who = state->whoseTurn;
        -:  281:
    #####:  282:    if (state->numBuys < 1){
        -:  283:        if (DEBUG)
        -:  284:            printf("You do not have any buys left\n");
    #####:  285:        return -1;
    #####:  286:    } else if (supplyCount(supplyPos, state) <1){
        -:  287:        if (DEBUG)
        -:  288:            printf("There are not any of that type of card left\n");
    #####:  289:        return -1;
    #####:  290:    } else if (state->coins < getCost(supplyPos)){
        -:  291:        if (DEBUG)
        -:  292:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:        return -1;
        -:  294:    } else {
    #####:  295:        state->phase=1;
        -:  296:        //state->supplyCount[supplyPos]--;
    #####:  297:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:        state->numBuys--;
        -:  301:        if (DEBUG)
        -:  302:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:    }
        -:  304:
        -:  305:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:    //state->discardCount[who]++;
        -:  307:
    #####:  308:    return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:    return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:    int currentPlayer = whoseTurn(state);
    #####:  317:    return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        5:  320:int supplyCount(int card, struct gameState *state) {
        5:  321:    return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:    int i;
    #####:  326:    int count = 0;
        -:  327:
    #####:  328:    for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:        if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:    for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:        if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:    for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:        if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:    return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:    return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:    int k;
        -:  352:    int i;
    #####:  353:    int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:    //Discard hand
    #####:  356:    for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:    }
    #####:  360:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:    //Code for determining the player
    #####:  363:    if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:    }
        -:  366:    else{
    #####:  367:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:    }
        -:  369:
    #####:  370:    state->outpostPlayed = 0;
    #####:  371:    state->phase = 0;
    #####:  372:    state->numActions = 1;
    #####:  373:    state->coins = 0;
    #####:  374:    state->numBuys = 1;
    #####:  375:    state->playedCardCount = 0;
    #####:  376:    state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:    //int k; move to top
        -:  379:    //Next player draws hand
    #####:  380:    for (k = 0; k < 5; k++){
    #####:  381:        drawCard(state->whoseTurn, state);//Draw a card
        -:  382:    }
        -:  383:
        -:  384:    //Update money
    #####:  385:    updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:    return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:    int i;
        -:  392:    int j;
        -:  393:
        -:  394:    //if stack of Province cards is empty, the game ends
    #####:  395:    if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:        return 1;
        -:  398:    }
        -:  399:
        -:  400:    //if three supply pile are at 0, the game ends
    #####:  401:    j = 0;
    #####:  402:    for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:        if (state->supplyCount[i] == 0)
        -:  405:        {
    #####:  406:            j++;
        -:  407:        }
        -:  408:    }
    #####:  409:    if ( j >= 3)
        -:  410:    {
    #####:  411:        return 1;
        -:  412:    }
        -:  413:
    #####:  414:    return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:    int i;
    #####:  420:    int score = 0;
        -:  421:    //score from hand
    #####:  422:    for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:        if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:        if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:        if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:        if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:        if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:    //score from discard
    #####:  433:    for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:        if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:        if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:        if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:        if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:        if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:    //score from deck
    #####:  444:    for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:        if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:        if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:        if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:        if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:        if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:    return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:    int i;
        -:  459:    int j;
        -:  460:    int highScore;
        -:  461:    int currentPlayer;
        -:  462:
        -:  463:    //get score for each player
    #####:  464:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:        //set unused player scores to -9999
    #####:  467:        if (i >= state->numPlayers)
        -:  468:        {
    #####:  469:            players[i] = -9999;
        -:  470:        }
        -:  471:        else
        -:  472:        {
    #####:  473:            players[i] = scoreFor (i, state);
        -:  474:        }
        -:  475:    }
        -:  476:
        -:  477:    //find highest score
    #####:  478:    j = 0;
    #####:  479:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:        if (players[i] > players[j])
        -:  482:        {
    #####:  483:            j = i;
        -:  484:        }
        -:  485:    }
    #####:  486:    highScore = players[j];
        -:  487:
        -:  488:    //add 1 to players who had less turns
    #####:  489:    currentPlayer = whoseTurn(state);
    #####:  490:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:        if ( players[i] == highScore && i > currentPlayer )
        -:  493:        {
    #####:  494:            players[i]++;
        -:  495:        }
        -:  496:    }
        -:  497:
        -:  498:    //find new highest score
    #####:  499:    j = 0;
    #####:  500:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:        if ( players[i] > players[j] )
        -:  503:        {
    #####:  504:            j = i;
        -:  505:        }
        -:  506:    }
    #####:  507:    highScore = players[j];
        -:  508:
        -:  509:    //set winners in array to 1 and rest to 0
    #####:  510:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:        if ( players[i] == highScore )
        -:  513:        {
    #####:  514:            players[i] = 1;
        -:  515:        }
        -:  516:        else
        -:  517:        {
    #####:  518:            players[i] = 0;
        -:  519:        }
        -:  520:    }
        -:  521:
    #####:  522:    return 0;
        -:  523:}
        -:  524:
        5:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:    int deckCounter;
        5:  528:    if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:        //Step 1 Shuffle the discard pile back into a deck
        -:  531:        int i;
        -:  532:        //Move discard to deck
    #####:  533:        for (i = 0; i < state->discardCount[player];i++){
    #####:  534:            state->deck[player][i] = state->discard[player][i];
    #####:  535:            state->discard[player][i] = -1;
        -:  536:        }
        -:  537:
    #####:  538:        state->deckCount[player] = state->discardCount[player];
    #####:  539:        state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:        //Shufffle the deck
    #####:  542:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:        if (DEBUG){//Debug statements
        -:  545:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:        }
        -:  547:
    #####:  548:        state->discardCount[player] = 0;
        -:  549:
        -:  550:        //Step 2 Draw Card
    #####:  551:        count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:        if (DEBUG){//Debug statements
        -:  554:            printf("Current hand count: %d\n", count);
        -:  555:        }
        -:  556:
    #####:  557:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:        if (deckCounter == 0)
    #####:  560:            return -1;
        -:  561:
    #####:  562:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:        state->deckCount[player]--;
    #####:  564:        state->handCount[player]++;//Increment hand count
        -:  565:    }
        -:  566:
        -:  567:    else{
        5:  568:        int count = state->handCount[player];//Get current hand count for player
        -:  569:        int deckCounter;
        -:  570:        if (DEBUG){//Debug statements
        -:  571:            printf("Current hand count: %d\n", count);
        -:  572:        }
        -:  573:
        5:  574:        deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  575:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  576:        state->deckCount[player]--;
        5:  577:        state->handCount[player]++;//Increment hand count
        -:  578:    }
        -:  579:
        5:  580:    return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:    switch( cardNumber )
        -:  586:    {
        -:  587:        case curse:
    #####:  588:            return 0;
        -:  589:        case estate:
    #####:  590:            return 2;
        -:  591:        case duchy:
    #####:  592:            return 5;
        -:  593:        case province:
    #####:  594:            return 8;
        -:  595:        case copper:
    #####:  596:            return 0;
        -:  597:        case silver:
    #####:  598:            return 3;
        -:  599:        case gold:
    #####:  600:            return 6;
        -:  601:        case adventurer:
    #####:  602:            return 6;
        -:  603:        case council_room:
    #####:  604:            return 5;
        -:  605:        case feast:
    #####:  606:            return 4;
        -:  607:        case gardens:
    #####:  608:            return 4;
        -:  609:        case mine:
    #####:  610:            return 5;
        -:  611:        case remodel:
    #####:  612:            return 4;
        -:  613:        case smithy:
    #####:  614:            return 4;
        -:  615:        case village:
    #####:  616:            return 3;
        -:  617:        case baron:
    #####:  618:            return 4;
        -:  619:        case great_hall:
    #####:  620:            return 3;
        -:  621:        case minion:
    #####:  622:            return 5;
        -:  623:        case steward:
    #####:  624:            return 3;
        -:  625:        case tribute:
    #####:  626:            return 5;
        -:  627:        case ambassador:
    #####:  628:            return 3;
        -:  629:        case cutpurse:
    #####:  630:            return 4;
        -:  631:        case embargo:
    #####:  632:            return 2;
        -:  633:        case outpost:
    #####:  634:            return 5;
        -:  635:        case salvager:
    #####:  636:            return 4;
        -:  637:        case sea_hag:
    #####:  638:            return 4;
        -:  639:        case treasure_map:
    #####:  640:            return 4;
        -:  641:    }
        -:  642:
    #####:  643:    return -1;
        -:  644:}
        -:  645:
        -:  646:
        -:  647:
    #####:  648:int SmithyCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  649:
        -:  650:    //+3 Cards
        -:  651:    int i;
    #####:  652:    for (i = 0; i < 5; i++)
        -:  653:    {
    #####:  654:        drawCard(currentPlayer, state);
        -:  655:    }
        -:  656:
        -:  657:    //discard card from hand
        -:  658:    //discardCard(handPos, currentPlayer, state, 0);
    #####:  659:    return 0;
        -:  660://bug introduced: draw 5 cards instead of 3; do not discard a card
        -:  661:}
        -:  662:
        -:  663:
    #####:  664:int AdventurerCard(int currentPlayer, struct gameState *state, int drawntreasure, int temphand[], int cardDrawn, int z) {
        -:  665:
    #####:  666:    while(drawntreasure<5){
    #####:  667:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  668:            shuffle(currentPlayer, state);
        -:  669:        }
    #####:  670:        drawCard(currentPlayer, state);
    #####:  671:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  672:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  673:            drawntreasure++;
        -:  674:        else{
    #####:  675:            temphand[z]=cardDrawn;
    #####:  676:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  677:            z++;
        -:  678:        }
        -:  679:    }
    #####:  680:    while(z-1>=0){
    #####:  681:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  682:        z=z-1;
        -:  683:    }
    #####:  684:    return 0;
        -:  685:// bug introduced: player is able to draw 5 treasure cards instead of 2.
        -:  686:}
        -:  687:
        -:  688:
    #####:  689:int VillageCard(int currentPlayer, struct gameState *state, int handPos){
        -:  690:
        -:  691:    //+1 Card
    #####:  692:    drawCard(currentPlayer, state);
    #####:  693:    drawCard(currentPlayer, state);
    #####:  694:    drawCard(currentPlayer, state);
        -:  695:
        -:  696:    //+2 Actions
    #####:  697:    state->numActions = state->numActions + 10;
        -:  698:
        -:  699:    //discard played card from hand
    #####:  700:    discardCard(handPos, currentPlayer, state, 0);
    #####:  701:    return 0;
        -:  702:// bug introduced: increase action points by 10 instead of 2 and draw 3 cards instead of 1
        -:  703:}
        -:  704:
        -:  705:
    #####:  706:int GreatHallCard(int currentPlayer, struct gameState *state, int handPos){
        -:  707:    //+1 Card
    #####:  708:    drawCard(currentPlayer, state);
        -:  709:
        -:  710:    //+1 Actions
    #####:  711:    state->numActions++;
        -:  712:
        -:  713:    //discard card from hand
    #####:  714:    discardCard(handPos, currentPlayer, state, 0);
    #####:  715:    return 0;
        -:  716:}
        -:  717:
        -:  718:
    #####:  719:int EmbargoCard(int currentPlayer, int handPos, struct gameState *state, int choice1) {
        -:  720://+2 Coins
    #####:  721:    state->coins = state->coins + 20;
        -:  722:
        -:  723:    //see if selected pile is in play
    #####:  724:    if ( state->supplyCount[choice1] == -1 )
        -:  725:    {
    #####:  726:        return -1;
        -:  727:    }
        -:  728:
        -:  729:    //add embargo token to selected supply pile
    #####:  730:    state->embargoTokens[choice1]++;
    #####:  731:    state->embargoTokens[choice1]++;
        -:  732:
        -:  733:    //trash card
    #####:  734:    discardCard(handPos, currentPlayer, state, 1);
        -:  735:
        -:  736:
    #####:  737:    return 0;
        -:  738://bug introduced: increase state->coins by 20 instead of 2, and add 2 embargo tokens instead of one
        -:  739:}
        -:  740:
        -:  741:
        -:  742:
    #####:  743:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  744:{
        -:  745:    int i;
        -:  746:    int j;
        -:  747:    int k;
        -:  748:    int x;
        -:  749:    int index;
    #####:  750:    int currentPlayer = whoseTurn(state);
    #####:  751:    int nextPlayer = currentPlayer + 1;
        -:  752:
    #####:  753:    int tributeRevealedCards[2] = {-1, -1};
        -:  754:    int temphand[MAX_HAND];// moved above the if statement
    #####:  755:    int drawntreasure=0;
    #####:  756:    int cardDrawn=0;
    #####:  757:    int z = 0;// this is the counter for the temp hand
    #####:  758:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  759:        nextPlayer = 0;
        -:  760:    }
        -:  761:
        -:  762:
        -:  763:    //uses switch to select card and perform actions
    #####:  764:    switch( card )
        -:  765:    {
        -:  766:        case adventurer:
        -:  767:
    #####:  768:            AdventurerCard(currentPlayer, state, drawntreasure, temphand, cardDrawn, z);
        -:  769:
    #####:  770:            return 0;
        -:  771:
        -:  772:        case council_room:
        -:  773:            //+4 Cards
    #####:  774:            for (i = 0; i < 4; i++)
        -:  775:            {
    #####:  776:                drawCard(currentPlayer, state);
        -:  777:            }
        -:  778:
        -:  779:            //+1 Buy
    #####:  780:            state->numBuys++;
        -:  781:
        -:  782:            //Each other player draws a card
    #####:  783:            for (i = 0; i < state->numPlayers; i++)
        -:  784:            {
    #####:  785:                if ( i != currentPlayer )
        -:  786:                {
    #####:  787:                    drawCard(i, state);
        -:  788:                }
        -:  789:            }
        -:  790:
        -:  791:            //put played card in played card pile
    #####:  792:            discardCard(handPos, currentPlayer, state, 0);
        -:  793:
    #####:  794:            return 0;
        -:  795:
        -:  796:        case feast:
        -:  797:            //gain card with cost up to 5
        -:  798:            //Backup hand
    #####:  799:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  800:                temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  801:                state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  802:            }
        -:  803:            //Backup hand
        -:  804:
        -:  805:            //Update Coins for Buy
    #####:  806:            updateCoins(currentPlayer, state, 5);
    #####:  807:            x = 1;//Condition to loop on
    #####:  808:            while( x == 1) {//Buy one card
    #####:  809:                if (supplyCount(choice1, state) <= 0){
        -:  810:                    if (DEBUG)
        -:  811:                        printf("None of that card left, sorry!\n");
        -:  812:
        -:  813:                    if (DEBUG){
        -:  814:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  815:                    }
        -:  816:                }
    #####:  817:                else if (state->coins < getCost(choice1)){
    #####:  818:                    printf("That card is too expensive!\n");
        -:  819:
        -:  820:                    if (DEBUG){
        -:  821:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  822:                    }
        -:  823:                }
        -:  824:                else{
        -:  825:
        -:  826:                    if (DEBUG){
        -:  827:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:                    }
        -:  829:
    #####:  830:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  831:                    x = 0;//No more buying cards
        -:  832:
        -:  833:                    if (DEBUG){
        -:  834:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  835:                    }
        -:  836:
        -:  837:                }
        -:  838:            }
        -:  839:
        -:  840:            //Reset Hand
    #####:  841:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  842:                state->hand[currentPlayer][i] = temphand[i];
    #####:  843:                temphand[i] = -1;
        -:  844:            }
        -:  845:            //Reset Hand
        -:  846:
    #####:  847:            return 0;
        -:  848:
        -:  849:        case gardens:
    #####:  850:            return -1;
        -:  851:
        -:  852:        case mine:
    #####:  853:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  856:            {
    #####:  857:                return -1;
        -:  858:            }
        -:  859:
    #####:  860:            if (choice2 > treasure_map || choice2 < curse)
        -:  861:            {
    #####:  862:                return -1;
        -:  863:            }
        -:  864:
    #####:  865:            if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  866:            {
    #####:  867:                return -1;
        -:  868:            }
        -:  869:
    #####:  870:            gainCard(choice2, state, 2, currentPlayer);
        -:  871:
        -:  872:            //discard card from hand
    #####:  873:            discardCard(handPos, currentPlayer, state, 0);
        -:  874:
        -:  875:            //discard trashed card
    #####:  876:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  877:            {
    #####:  878:                if (state->hand[currentPlayer][i] == j)
        -:  879:                {
    #####:  880:                    discardCard(i, currentPlayer, state, 0);
    #####:  881:                    break;
        -:  882:                }
        -:  883:            }
        -:  884:
    #####:  885:            return 0;
        -:  886:
        -:  887:        case remodel:
    #####:  888:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  889:
    #####:  890:            if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  891:            {
    #####:  892:                return -1;
        -:  893:            }
        -:  894:
    #####:  895:            gainCard(choice2, state, 0, currentPlayer);
        -:  896:
        -:  897:            //discard card from hand
    #####:  898:            discardCard(handPos, currentPlayer, state, 0);
        -:  899:
        -:  900:            //discard trashed card
    #####:  901:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  902:            {
    #####:  903:                if (state->hand[currentPlayer][i] == j)
        -:  904:                {
    #####:  905:                    discardCard(i, currentPlayer, state, 0);
    #####:  906:                    break;
        -:  907:                }
        -:  908:            }
        -:  909:
        -:  910:
    #####:  911:            return 0;
        -:  912:
        -:  913:        case smithy:
        -:  914:
    #####:  915:            SmithyCard(currentPlayer, state, handPos);
    #####:  916:            return 0;
        -:  917:
        -:  918:        case village:
        -:  919:
    #####:  920:            VillageCard(currentPlayer, state, handPos);
        -:  921:
    #####:  922:            return 0;
        -:  923:
        -:  924:        case baron:
    #####:  925:            state->numBuys++;//Increase buys by 1!
    #####:  926:            if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  927:                int p = 0;//Iterator for hand!
    #####:  928:                int card_not_discarded = 1;//Flag for discard set!
    #####:  929:                while(card_not_discarded){
    #####:  930:                    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  931:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  932:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  933:                        state->discardCount[currentPlayer]++;
    #####:  934:                        for (;p < state->handCount[currentPlayer]; p++){
    #####:  935:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  936:                        }
    #####:  937:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  938:                        state->handCount[currentPlayer]--;
    #####:  939:                        card_not_discarded = 0;//Exit the loop
        -:  940:                    }
    #####:  941:                    else if (p > state->handCount[currentPlayer]){
        -:  942:                        if(DEBUG) {
        -:  943:                            printf("No estate cards in your hand, invalid choice\n");
        -:  944:                            printf("Must gain an estate if there are any\n");
        -:  945:                        }
    #####:  946:                        if (supplyCount(estate, state) > 0){
    #####:  947:                            gainCard(estate, state, 0, currentPlayer);
    #####:  948:                            state->supplyCount[estate]--;//Decrement estates
    #####:  949:                            if (supplyCount(estate, state) == 0){
    #####:  950:                                isGameOver(state);
        -:  951:                            }
        -:  952:                        }
    #####:  953:                        card_not_discarded = 0;//Exit the loop
        -:  954:                    }
        -:  955:
        -:  956:                    else{
    #####:  957:                        p++;//Next card
        -:  958:                    }
        -:  959:                }
        -:  960:            }
        -:  961:
        -:  962:            else{
    #####:  963:                if (supplyCount(estate, state) > 0){
    #####:  964:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  965:                    state->supplyCount[estate]--;//Decrement Estates
    #####:  966:                    if (supplyCount(estate, state) == 0){
    #####:  967:                        isGameOver(state);
        -:  968:                    }
        -:  969:                }
        -:  970:            }
        -:  971:
        -:  972:
    #####:  973:            return 0;
        -:  974:
        -:  975:        case great_hall:
        -:  976:
    #####:  977:            GreatHallCard(currentPlayer, state, handPos);
        -:  978:
    #####:  979:            return 0;
        -:  980:
        -:  981:        case minion:
        -:  982:            //+1 action
    #####:  983:            state->numActions++;
        -:  984:
        -:  985:            //discard card from hand
    #####:  986:            discardCard(handPos, currentPlayer, state, 0);
        -:  987:
    #####:  988:            if (choice1)		//+2 coins
        -:  989:            {
    #####:  990:                state->coins = state->coins + 2;
        -:  991:            }
        -:  992:
    #####:  993:            else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  994:            {
        -:  995:                //discard hand
    #####:  996:                while(numHandCards(state) > 0)
        -:  997:                {
    #####:  998:                    discardCard(handPos, currentPlayer, state, 0);
        -:  999:                }
        -: 1000:
        -: 1001:                //draw 4
    #####: 1002:                for (i = 0; i < 4; i++)
        -: 1003:                {
    #####: 1004:                    drawCard(currentPlayer, state);
        -: 1005:                }
        -: 1006:
        -: 1007:                //other players discard hand and redraw if hand size > 4
    #####: 1008:                for (i = 0; i < state->numPlayers; i++)
        -: 1009:                {
    #####: 1010:                    if (i != currentPlayer)
        -: 1011:                    {
    #####: 1012:                        if ( state->handCount[i] > 4 )
        -: 1013:                        {
        -: 1014:                            //discard hand
    #####: 1015:                            while( state->handCount[i] > 0 )
        -: 1016:                            {
    #####: 1017:                                discardCard(handPos, i, state, 0);
        -: 1018:                            }
        -: 1019:
        -: 1020:                            //draw 4
    #####: 1021:                            for (j = 0; j < 4; j++)
        -: 1022:                            {
    #####: 1023:                                drawCard(i, state);
        -: 1024:                            }
        -: 1025:                        }
        -: 1026:                    }
        -: 1027:                }
        -: 1028:
        -: 1029:            }
    #####: 1030:            return 0;
        -: 1031:
        -: 1032:        case steward:
    #####: 1033:            if (choice1 == 1)
        -: 1034:            {
        -: 1035:                //+2 cards
    #####: 1036:                drawCard(currentPlayer, state);
    #####: 1037:                drawCard(currentPlayer, state);
        -: 1038:            }
    #####: 1039:            else if (choice1 == 2)
        -: 1040:            {
        -: 1041:                //+2 coins
    #####: 1042:                state->coins = state->coins + 2;
        -: 1043:            }
        -: 1044:            else
        -: 1045:            {
        -: 1046:                //trash 2 cards in hand
    #####: 1047:                discardCard(choice2, currentPlayer, state, 1);
    #####: 1048:                discardCard(choice3, currentPlayer, state, 1);
        -: 1049:            }
        -: 1050:
        -: 1051:            //discard card from hand
    #####: 1052:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1053:            return 0;
        -: 1054:
        -: 1055:        case tribute:
    #####: 1056:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1057:                if (state->deckCount[nextPlayer] > 0){
    #####: 1058:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1059:                    state->deckCount[nextPlayer]--;
        -: 1060:                }
    #####: 1061:                else if (state->discardCount[nextPlayer] > 0){
    #####: 1062:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1063:                    state->discardCount[nextPlayer]--;
        -: 1064:                }
        -: 1065:                else{
        -: 1066:                    //No Card to Reveal
        -: 1067:                    if (DEBUG){
        -: 1068:                        printf("No cards to reveal\n");
        -: 1069:                    }
        -: 1070:                }
        -: 1071:            }
        -: 1072:
        -: 1073:            else{
    #####: 1074:                if (state->deckCount[nextPlayer] == 0){
    #####: 1075:                    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1076:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1077:                        state->deckCount[nextPlayer]++;
    #####: 1078:                        state->discard[nextPlayer][i] = -1;
    #####: 1079:                        state->discardCount[nextPlayer]--;
        -: 1080:                    }
        -: 1081:
    #####: 1082:                    shuffle(nextPlayer,state);//Shuffle the deck
        -: 1083:                }
    #####: 1084:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1085:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1086:                state->deckCount[nextPlayer]--;
    #####: 1087:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1088:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1089:                state->deckCount[nextPlayer]--;
        -: 1090:            }
        -: 1091:
    #####: 1092:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1093:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1094:                state->playedCardCount++;
    #####: 1095:                tributeRevealedCards[1] = -1;
        -: 1096:            }
        -: 1097:
    #####: 1098:            for (i = 0; i <= 2; i ++){
    #####: 1099:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1100:                    state->coins += 2;
        -: 1101:                }
        -: 1102:
    #####: 1103:                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1104:                    drawCard(currentPlayer, state);
    #####: 1105:                    drawCard(currentPlayer, state);
        -: 1106:                }
        -: 1107:                else{//Action Card
    #####: 1108:                    state->numActions = state->numActions + 2;
        -: 1109:                }
        -: 1110:            }
        -: 1111:
    #####: 1112:            return 0;
        -: 1113:
        -: 1114:        case ambassador:
    #####: 1115:            j = 0;		//used to check if player has enough cards to discard
        -: 1116:
    #####: 1117:            if (choice2 > 2 || choice2 < 0)
        -: 1118:            {
    #####: 1119:                return -1;
        -: 1120:            }
        -: 1121:
    #####: 1122:            if (choice1 == handPos)
        -: 1123:            {
    #####: 1124:                return -1;
        -: 1125:            }
        -: 1126:
    #####: 1127:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1128:            {
    #####: 1129:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1130:                {
    #####: 1131:                    j++;
        -: 1132:                }
        -: 1133:            }
    #####: 1134:            if (j < choice2)
        -: 1135:            {
    #####: 1136:                return -1;
        -: 1137:            }
        -: 1138:
        -: 1139:            if (DEBUG)
        -: 1140:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1141:
        -: 1142:            //increase supply count for choosen card by amount being discarded
    #####: 1143:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1144:
        -: 1145:            //each other player gains a copy of revealed card
    #####: 1146:            for (i = 0; i < state->numPlayers; i++)
        -: 1147:            {
    #####: 1148:                if (i != currentPlayer)
        -: 1149:                {
    #####: 1150:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1151:                }
        -: 1152:            }
        -: 1153:
        -: 1154:            //discard played card from hand
    #####: 1155:            discardCard(handPos, currentPlayer, state, 0);
        -: 1156:
        -: 1157:            //trash copies of cards returned to supply
    #####: 1158:            for (j = 0; j < choice2; j++)
        -: 1159:            {
    #####: 1160:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1161:                {
    #####: 1162:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1163:                    {
    #####: 1164:                        discardCard(i, currentPlayer, state, 1);
    #####: 1165:                        break;
        -: 1166:                    }
        -: 1167:                }
        -: 1168:            }
        -: 1169:
    #####: 1170:            return 0;
        -: 1171:
        -: 1172:        case cutpurse:
        -: 1173:
    #####: 1174:            updateCoins(currentPlayer, state, 2);
    #####: 1175:            for (i = 0; i < state->numPlayers; i++)
        -: 1176:            {
    #####: 1177:                if (i != currentPlayer)
        -: 1178:                {
    #####: 1179:                    for (j = 0; j < state->handCount[i]; j++)
        -: 1180:                    {
    #####: 1181:                        if (state->hand[i][j] == copper)
        -: 1182:                        {
    #####: 1183:                            discardCard(j, i, state, 0);
    #####: 1184:                            break;
        -: 1185:                        }
    #####: 1186:                        if (j == state->handCount[i])
        -: 1187:                        {
    #####: 1188:                            for (k = 0; k < state->handCount[i]; k++)
        -: 1189:                            {
        -: 1190:                                if (DEBUG)
        -: 1191:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1192:                            }
    #####: 1193:                            break;
        -: 1194:                        }
        -: 1195:                    }
        -: 1196:
        -: 1197:                }
        -: 1198:
        -: 1199:            }
        -: 1200:
        -: 1201:            //discard played card from hand
    #####: 1202:            discardCard(handPos, currentPlayer, state, 0);
        -: 1203:
    #####: 1204:            return 0;
        -: 1205:
        -: 1206:
        -: 1207:        case embargo:
        -: 1208:
    #####: 1209:            EmbargoCard(currentPlayer, handPos, state, choice1);
    #####: 1210:            return 0;
        -: 1211:
        -: 1212:        case outpost:
        -: 1213:            //set outpost flag
    #####: 1214:            state->outpostPlayed++;
        -: 1215:
        -: 1216:            //discard card
    #####: 1217:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1218:            return 0;
        -: 1219:
        -: 1220:        case salvager:
        -: 1221:            //+1 buy
    #####: 1222:            state->numBuys++;
        -: 1223:
    #####: 1224:            if (choice1)
        -: 1225:            {
        -: 1226:                //gain coins equal to trashed card
    #####: 1227:                state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1228:                //trash card
    #####: 1229:                discardCard(choice1, currentPlayer, state, 1);
        -: 1230:            }
        -: 1231:
        -: 1232:            //discard card
    #####: 1233:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1234:            return 0;
        -: 1235:
        -: 1236:        case sea_hag:
    #####: 1237:            for (i = 0; i < state->numPlayers; i++){
    #####: 1238:                if (i != currentPlayer){
    #####: 1239:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1240:                    state->discardCount[i]++;
    #####: 1241:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1242:                }
        -: 1243:            }
    #####: 1244:            return 0;
        -: 1245:
        -: 1246:        case treasure_map:
        -: 1247:            //search hand for another treasure_map
    #####: 1248:            index = -1;
    #####: 1249:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1250:            {
    #####: 1251:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1252:                {
    #####: 1253:                    index = i;
    #####: 1254:                    break;
        -: 1255:                }
        -: 1256:            }
    #####: 1257:            if (index > -1)
        -: 1258:            {
        -: 1259:                //trash both treasure cards
    #####: 1260:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1261:                discardCard(index, currentPlayer, state, 1);
        -: 1262:
        -: 1263:                //gain 4 Gold cards
    #####: 1264:                for (i = 0; i < 4; i++)
        -: 1265:                {
    #####: 1266:                    gainCard(gold, state, 1, currentPlayer);
        -: 1267:                }
        -: 1268:
        -: 1269:                //return success
    #####: 1270:                return 1;
        -: 1271:            }
        -: 1272:
        -: 1273:            //no second treasure_map found in hand
    #####: 1274:            return -1;
        -: 1275:    }
        -: 1276:
    #####: 1277:    return -1;
        -: 1278:}
        -: 1279:
    #####: 1280:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1281:{
        -: 1282:
        -: 1283:    //if card is not trashed, added to Played pile
    #####: 1284:    if (trashFlag < 1)
        -: 1285:    {
        -: 1286:        //add card to played pile
    #####: 1287:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1288:        state->playedCardCount++;
        -: 1289:    }
        -: 1290:
        -: 1291:    //set played card to -1
    #####: 1292:    state->hand[currentPlayer][handPos] = -1;
        -: 1293:
        -: 1294:    //remove card from player's hand
    #####: 1295:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1296:    {
        -: 1297:        //reduce number of cards in hand
    #####: 1298:        state->handCount[currentPlayer]--;
        -: 1299:    }
    #####: 1300:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1301:    {
        -: 1302:        //reduce number of cards in hand
    #####: 1303:        state->handCount[currentPlayer]--;
        -: 1304:    }
        -: 1305:    else
        -: 1306:    {
        -: 1307:        //replace discarded card with last card in hand
    #####: 1308:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1309:        //set last card to -1
    #####: 1310:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1311:        //reduce number of cards in hand
    #####: 1312:        state->handCount[currentPlayer]--;
        -: 1313:    }
        -: 1314:
    #####: 1315:    return 0;
        -: 1316:}
        -: 1317:
        5: 1318:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1319:{
        -: 1320:    //Note: supplyPos is enum of choosen card
        -: 1321:
        -: 1322:    //check if supply pile is empty (0) or card is not used in game (-1)
        5: 1323:    if ( supplyCount(supplyPos, state) < 1 )
        -: 1324:    {
        1: 1325:        return -1;
        -: 1326:    }
        -: 1327:
        -: 1328:    //added card for [whoseTurn] current player:
        -: 1329:    // toFlag = 0 : add to discard
        -: 1330:    // toFlag = 1 : add to deck
        -: 1331:    // toFlag = 2 : add to hand
        -: 1332:
        4: 1333:    if (toFlag == 1)
        -: 1334:    {
        1: 1335:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1336:        state->deckCount[player]++;
        -: 1337:    }
        3: 1338:    else if (toFlag == 2)
        -: 1339:    {
        2: 1340:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
        2: 1341:        state->handCount[player]++;
        -: 1342:    }
        -: 1343:    else
        -: 1344:    {
        1: 1345:        state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1346:        state->discardCount[player]++;
        -: 1347:    }
        -: 1348:
        -: 1349:    //decrease number in supply pile
        4: 1350:    state->supplyCount[supplyPos]--;
        -: 1351:
        4: 1352:    return 0;
        -: 1353:}
        -: 1354:
        1: 1355:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1356:{
        -: 1357:    int i;
        -: 1358:
        -: 1359:    //reset coin count
        1: 1360:    state->coins = 0;
        -: 1361:
        -: 1362:    //add coins for each Treasure card in player's hand
        6: 1363:    for (i = 0; i < state->handCount[player]; i++)
        -: 1364:    {
        5: 1365:        if (state->hand[player][i] == copper)
        -: 1366:        {
        4: 1367:            state->coins += 1;
        -: 1368:        }
        1: 1369:        else if (state->hand[player][i] == silver)
        -: 1370:        {
    #####: 1371:            state->coins += 2;
        -: 1372:        }
        1: 1373:        else if (state->hand[player][i] == gold)
        -: 1374:        {
    #####: 1375:            state->coins += 3;
        -: 1376:        }
        -: 1377:    }
        -: 1378:
        -: 1379:    //add bonus
        1: 1380:    state->coins += bonus;
        -: 1381:
        1: 1382:    return 0;
        -: 1383:}
        -: 1384:
        -: 1385:
        -: 1386://end of dominion.c
        -: 1387:
unittest3.c:
----------------- Testing function isGameOver() ----------------

TEST 1: Three supply pile are at 0, the game ends
PASSED

TEST 2: stack of Province cards is empty, the game ends
PASSED

TEST 3: stack of Province cards is NOT empty and three supply pile are NOT at 0, the game continues
PASSED

 >>>>> SUCCESS: Testing complete isGameOver() <<<<<

File 'dominion.c'
Lines executed:17.49% of 566
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void* a, const void* b) {
       30:    9:    if (*(int*)a > *(int*)b)
    #####:   10:        return 1;
       30:   11:    if (*(int*)a < *(int*)b)
        8:   12:        return -1;
       22:   13:    return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:
        -:   40:    int i;
        -:   41:    int j;
        -:   42:    int it;
        -:   43:    //set up random number generator
        1:   44:    SelectStream(1);
        1:   45:    PutSeed((long)randomSeed);
        -:   46:
        -:   47:    //check number of players
        1:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
        1:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
       11:   57:    for (i = 0; i < 10; i++)
        -:   58:    {
      110:   59:        for (j = 0; j < 10; j++)
        -:   60:        {
      100:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
        1:   73:    if (numPlayers == 2)
        -:   74:    {
        1:   75:        state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:    else if (numPlayers == 3)
        -:   78:    {
    #####:   79:        state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
        1:   87:    if (numPlayers == 2)
        -:   88:    {
        1:   89:        state->supplyCount[estate] = 8;
        1:   90:        state->supplyCount[duchy] = 8;
        1:   91:        state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:    else
        -:   94:    {
    #####:   95:        state->supplyCount[estate] = 12;
    #####:   96:        state->supplyCount[duchy] = 12;
    #####:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
        1:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:    state->supplyCount[silver] = 40;
        1:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
       21:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      165:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:        {
      155:  110:            if (kingdomCards[j] == i)
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
       10:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:                {
        4:  115:                    if (numPlayers == 2){
        2:  116:                        state->supplyCount[i] = 8;
        -:  117:                    }
    #####:  118:                    else{ state->supplyCount[i] = 12; }
        -:  119:                }
        -:  120:                else
        -:  121:                {
        8:  122:                    state->supplyCount[i] = 10;
        -:  123:                }
       10:  124:                break;
        -:  125:            }
        -:  126:            else    //card is not in the set choosen for the game
        -:  127:            {
      145:  128:                state->supplyCount[i] = -1;
        -:  129:            }
        -:  130:        }
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:    ////////////////////////
        -:  135:    //supply intilization complete
        -:  136:
        -:  137:    //set player decks
        3:  138:    for (i = 0; i < numPlayers; i++)
        -:  139:    {
        2:  140:        state->deckCount[i] = 0;
        8:  141:        for (j = 0; j < 3; j++)
        -:  142:        {
        6:  143:            state->deck[i][j] = estate;
        6:  144:            state->deckCount[i]++;
        -:  145:        }
       16:  146:        for (j = 3; j < 10; j++)
        -:  147:        {
       14:  148:            state->deck[i][j] = copper;
       14:  149:            state->deckCount[i]++;
        -:  150:        }
        -:  151:    }
        -:  152:
        -:  153:    //shuffle player decks
        3:  154:    for (i = 0; i < numPlayers; i++)
        -:  155:    {
        2:  156:        if ( shuffle(i, state) < 0 )
        -:  157:        {
    #####:  158:            return -1;
        -:  159:        }
        -:  160:    }
        -:  161:
        -:  162:    //draw player hands
        3:  163:    for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:        //initialize hand size to zero
        2:  166:        state->handCount[i] = 0;
        2:  167:        state->discardCount[i] = 0;
        -:  168:        //draw 5 cards
        -:  169:        // for (j = 0; j < 5; j++)
        -:  170:        //	{
        -:  171:        //	  drawCard(i, state);
        -:  172:        //	}
        -:  173:    }
        -:  174:
        -:  175:    //set embargo tokens to 0 for all supply piles
       28:  176:    for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       27:  178:        state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:    //initialize first player's turn
        1:  182:    state->outpostPlayed = 0;
        1:  183:    state->phase = 0;
        1:  184:    state->numActions = 1;
        1:  185:    state->numBuys = 1;
        1:  186:    state->playedCardCount = 0;
        1:  187:    state->whoseTurn = 0;
        1:  188:    state->handCount[state->whoseTurn] = 0;
        -:  189:    //int it; move to top
        -:  190:
        -:  191:    //Moved draw cards to here, only drawing at the start of a turn
        6:  192:    for (it = 0; it < 5; it++){
        5:  193:        drawCard(state->whoseTurn, state);
        -:  194:    }
        -:  195:
        1:  196:    updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:    return 0;
        -:  199:}
        -:  200:
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:    int newDeck[MAX_DECK];
        2:  205:    int newDeckPos = 0;
        -:  206:    int card;
        -:  207:    int i;
        -:  208:
        2:  209:    if (state->deckCount[player] < 1)
    #####:  210:        return -1;
        2:  211:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:    while (state->deckCount[player] > 0) {
       20:  215:        card = floor(Random() * state->deckCount[player]);
       20:  216:        newDeck[newDeckPos] = state->deck[player][card];
       20:  217:        newDeckPos++;
       59:  218:        for (i = card; i < state->deckCount[player]-1; i++) {
       39:  219:            state->deck[player][i] = state->deck[player][i+1];
        -:  220:        }
       20:  221:        state->deckCount[player]--;
        -:  222:    }
       22:  223:    for (i = 0; i < newDeckPos; i++) {
       20:  224:        state->deck[player][i] = newDeck[i];
       20:  225:        state->deckCount[player]++;
        -:  226:    }
        -:  227:
        2:  228:    return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:    int card;
    #####:  234:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:    //check if it is the right phase
    #####:  237:    if (state->phase != 0)
        -:  238:    {
    #####:  239:        return -1;
        -:  240:    }
        -:  241:
        -:  242:    //check if player has enough actions
    #####:  243:    if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:        return -1;
        -:  246:    }
        -:  247:
        -:  248:    //get card played
    #####:  249:    card = handCard(handPos, state);
        -:  250:
        -:  251:    //check if selected card is an action
    #####:  252:    if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:        return -1;
        -:  255:    }
        -:  256:
        -:  257:    //play card
    #####:  258:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:        return -1;
        -:  261:    }
        -:  262:
        -:  263:    //reduce number of actions
    #####:  264:    state->numActions--;
        -:  265:
        -:  266:    //update coins (Treasure cards may be added with card draws)
    #####:  267:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:    return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:    int who;
        -:  274:    if (DEBUG){
        -:  275:        printf("Entering buyCard...\n");
        -:  276:    }
        -:  277:
        -:  278:    // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:    who = state->whoseTurn;
        -:  281:
    #####:  282:    if (state->numBuys < 1){
        -:  283:        if (DEBUG)
        -:  284:            printf("You do not have any buys left\n");
    #####:  285:        return -1;
    #####:  286:    } else if (supplyCount(supplyPos, state) <1){
        -:  287:        if (DEBUG)
        -:  288:            printf("There are not any of that type of card left\n");
    #####:  289:        return -1;
    #####:  290:    } else if (state->coins < getCost(supplyPos)){
        -:  291:        if (DEBUG)
        -:  292:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:        return -1;
        -:  294:    } else {
    #####:  295:        state->phase=1;
        -:  296:        //state->supplyCount[supplyPos]--;
    #####:  297:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:        state->numBuys--;
        -:  301:        if (DEBUG)
        -:  302:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:    }
        -:  304:
        -:  305:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:    //state->discardCount[who]++;
        -:  307:
    #####:  308:    return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:    return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:    int currentPlayer = whoseTurn(state);
    #####:  317:    return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:    return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:    int i;
    #####:  326:    int count = 0;
        -:  327:
    #####:  328:    for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:        if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:    for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:        if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:    for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:        if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:    return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:    return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:    int k;
        -:  352:    int i;
    #####:  353:    int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:    //Discard hand
    #####:  356:    for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:    }
    #####:  360:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:    //Code for determining the player
    #####:  363:    if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:    }
        -:  366:    else{
    #####:  367:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:    }
        -:  369:
    #####:  370:    state->outpostPlayed = 0;
    #####:  371:    state->phase = 0;
    #####:  372:    state->numActions = 1;
    #####:  373:    state->coins = 0;
    #####:  374:    state->numBuys = 1;
    #####:  375:    state->playedCardCount = 0;
    #####:  376:    state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:    //int k; move to top
        -:  379:    //Next player draws hand
    #####:  380:    for (k = 0; k < 5; k++){
    #####:  381:        drawCard(state->whoseTurn, state);//Draw a card
        -:  382:    }
        -:  383:
        -:  384:    //Update money
    #####:  385:    updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:    return 0;
        -:  388:}
        -:  389:
        3:  390:int isGameOver(struct gameState *state) {
        -:  391:    int i;
        -:  392:    int j;
        -:  393:
        -:  394:    //if stack of Province cards is empty, the game ends
        3:  395:    if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:        return 1;
        -:  398:    }
        -:  399:
        -:  400:    //if three supply pile are at 0, the game ends
        2:  401:    j = 0;
       52:  402:    for (i = 0; i < 25; i++)
        -:  403:    {
       50:  404:        if (state->supplyCount[i] == 0)
        -:  405:        {
        3:  406:            j++;
        -:  407:        }
        -:  408:    }
        2:  409:    if ( j >= 3)
        -:  410:    {
        1:  411:        return 1;
        -:  412:    }
        -:  413:
        1:  414:    return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:    int i;
    #####:  420:    int score = 0;
        -:  421:    //score from hand
    #####:  422:    for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:        if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:        if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:        if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:        if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:        if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:    //score from discard
    #####:  433:    for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:        if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:        if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:        if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:        if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:        if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:    //score from deck
    #####:  444:    for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:        if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:        if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:        if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:        if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:        if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:    return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:    int i;
        -:  459:    int j;
        -:  460:    int highScore;
        -:  461:    int currentPlayer;
        -:  462:
        -:  463:    //get score for each player
    #####:  464:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:        //set unused player scores to -9999
    #####:  467:        if (i >= state->numPlayers)
        -:  468:        {
    #####:  469:            players[i] = -9999;
        -:  470:        }
        -:  471:        else
        -:  472:        {
    #####:  473:            players[i] = scoreFor (i, state);
        -:  474:        }
        -:  475:    }
        -:  476:
        -:  477:    //find highest score
    #####:  478:    j = 0;
    #####:  479:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:        if (players[i] > players[j])
        -:  482:        {
    #####:  483:            j = i;
        -:  484:        }
        -:  485:    }
    #####:  486:    highScore = players[j];
        -:  487:
        -:  488:    //add 1 to players who had less turns
    #####:  489:    currentPlayer = whoseTurn(state);
    #####:  490:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:        if ( players[i] == highScore && i > currentPlayer )
        -:  493:        {
    #####:  494:            players[i]++;
        -:  495:        }
        -:  496:    }
        -:  497:
        -:  498:    //find new highest score
    #####:  499:    j = 0;
    #####:  500:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:        if ( players[i] > players[j] )
        -:  503:        {
    #####:  504:            j = i;
        -:  505:        }
        -:  506:    }
    #####:  507:    highScore = players[j];
        -:  508:
        -:  509:    //set winners in array to 1 and rest to 0
    #####:  510:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:        if ( players[i] == highScore )
        -:  513:        {
    #####:  514:            players[i] = 1;
        -:  515:        }
        -:  516:        else
        -:  517:        {
    #####:  518:            players[i] = 0;
        -:  519:        }
        -:  520:    }
        -:  521:
    #####:  522:    return 0;
        -:  523:}
        -:  524:
        5:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:    int deckCounter;
        5:  528:    if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:        //Step 1 Shuffle the discard pile back into a deck
        -:  531:        int i;
        -:  532:        //Move discard to deck
    #####:  533:        for (i = 0; i < state->discardCount[player];i++){
    #####:  534:            state->deck[player][i] = state->discard[player][i];
    #####:  535:            state->discard[player][i] = -1;
        -:  536:        }
        -:  537:
    #####:  538:        state->deckCount[player] = state->discardCount[player];
    #####:  539:        state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:        //Shufffle the deck
    #####:  542:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:        if (DEBUG){//Debug statements
        -:  545:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:        }
        -:  547:
    #####:  548:        state->discardCount[player] = 0;
        -:  549:
        -:  550:        //Step 2 Draw Card
    #####:  551:        count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:        if (DEBUG){//Debug statements
        -:  554:            printf("Current hand count: %d\n", count);
        -:  555:        }
        -:  556:
    #####:  557:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:        if (deckCounter == 0)
    #####:  560:            return -1;
        -:  561:
    #####:  562:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:        state->deckCount[player]--;
    #####:  564:        state->handCount[player]++;//Increment hand count
        -:  565:    }
        -:  566:
        -:  567:    else{
        5:  568:        int count = state->handCount[player];//Get current hand count for player
        -:  569:        int deckCounter;
        -:  570:        if (DEBUG){//Debug statements
        -:  571:            printf("Current hand count: %d\n", count);
        -:  572:        }
        -:  573:
        5:  574:        deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  575:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  576:        state->deckCount[player]--;
        5:  577:        state->handCount[player]++;//Increment hand count
        -:  578:    }
        -:  579:
        5:  580:    return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:    switch( cardNumber )
        -:  586:    {
        -:  587:        case curse:
    #####:  588:            return 0;
        -:  589:        case estate:
    #####:  590:            return 2;
        -:  591:        case duchy:
    #####:  592:            return 5;
        -:  593:        case province:
    #####:  594:            return 8;
        -:  595:        case copper:
    #####:  596:            return 0;
        -:  597:        case silver:
    #####:  598:            return 3;
        -:  599:        case gold:
    #####:  600:            return 6;
        -:  601:        case adventurer:
    #####:  602:            return 6;
        -:  603:        case council_room:
    #####:  604:            return 5;
        -:  605:        case feast:
    #####:  606:            return 4;
        -:  607:        case gardens:
    #####:  608:            return 4;
        -:  609:        case mine:
    #####:  610:            return 5;
        -:  611:        case remodel:
    #####:  612:            return 4;
        -:  613:        case smithy:
    #####:  614:            return 4;
        -:  615:        case village:
    #####:  616:            return 3;
        -:  617:        case baron:
    #####:  618:            return 4;
        -:  619:        case great_hall:
    #####:  620:            return 3;
        -:  621:        case minion:
    #####:  622:            return 5;
        -:  623:        case steward:
    #####:  624:            return 3;
        -:  625:        case tribute:
    #####:  626:            return 5;
        -:  627:        case ambassador:
    #####:  628:            return 3;
        -:  629:        case cutpurse:
    #####:  630:            return 4;
        -:  631:        case embargo:
    #####:  632:            return 2;
        -:  633:        case outpost:
    #####:  634:            return 5;
        -:  635:        case salvager:
    #####:  636:            return 4;
        -:  637:        case sea_hag:
    #####:  638:            return 4;
        -:  639:        case treasure_map:
    #####:  640:            return 4;
        -:  641:    }
        -:  642:
    #####:  643:    return -1;
        -:  644:}
        -:  645:
        -:  646:
        -:  647:
    #####:  648:int SmithyCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  649:
        -:  650:    //+3 Cards
        -:  651:    int i;
    #####:  652:    for (i = 0; i < 5; i++)
        -:  653:    {
    #####:  654:        drawCard(currentPlayer, state);
        -:  655:    }
        -:  656:
        -:  657:    //discard card from hand
        -:  658:    //discardCard(handPos, currentPlayer, state, 0);
    #####:  659:    return 0;
        -:  660://bug introduced: draw 5 cards instead of 3; do not discard a card
        -:  661:}
        -:  662:
        -:  663:
    #####:  664:int AdventurerCard(int currentPlayer, struct gameState *state, int drawntreasure, int temphand[], int cardDrawn, int z) {
        -:  665:
    #####:  666:    while(drawntreasure<5){
    #####:  667:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  668:            shuffle(currentPlayer, state);
        -:  669:        }
    #####:  670:        drawCard(currentPlayer, state);
    #####:  671:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  672:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  673:            drawntreasure++;
        -:  674:        else{
    #####:  675:            temphand[z]=cardDrawn;
    #####:  676:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  677:            z++;
        -:  678:        }
        -:  679:    }
    #####:  680:    while(z-1>=0){
    #####:  681:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  682:        z=z-1;
        -:  683:    }
    #####:  684:    return 0;
        -:  685:// bug introduced: player is able to draw 5 treasure cards instead of 2.
        -:  686:}
        -:  687:
        -:  688:
    #####:  689:int VillageCard(int currentPlayer, struct gameState *state, int handPos){
        -:  690:
        -:  691:    //+1 Card
    #####:  692:    drawCard(currentPlayer, state);
    #####:  693:    drawCard(currentPlayer, state);
    #####:  694:    drawCard(currentPlayer, state);
        -:  695:
        -:  696:    //+2 Actions
    #####:  697:    state->numActions = state->numActions + 10;
        -:  698:
        -:  699:    //discard played card from hand
    #####:  700:    discardCard(handPos, currentPlayer, state, 0);
    #####:  701:    return 0;
        -:  702:// bug introduced: increase action points by 10 instead of 2 and draw 3 cards instead of 1
        -:  703:}
        -:  704:
        -:  705:
    #####:  706:int GreatHallCard(int currentPlayer, struct gameState *state, int handPos){
        -:  707:    //+1 Card
    #####:  708:    drawCard(currentPlayer, state);
        -:  709:
        -:  710:    //+1 Actions
    #####:  711:    state->numActions++;
        -:  712:
        -:  713:    //discard card from hand
    #####:  714:    discardCard(handPos, currentPlayer, state, 0);
    #####:  715:    return 0;
        -:  716:}
        -:  717:
        -:  718:
    #####:  719:int EmbargoCard(int currentPlayer, int handPos, struct gameState *state, int choice1) {
        -:  720://+2 Coins
    #####:  721:    state->coins = state->coins + 20;
        -:  722:
        -:  723:    //see if selected pile is in play
    #####:  724:    if ( state->supplyCount[choice1] == -1 )
        -:  725:    {
    #####:  726:        return -1;
        -:  727:    }
        -:  728:
        -:  729:    //add embargo token to selected supply pile
    #####:  730:    state->embargoTokens[choice1]++;
    #####:  731:    state->embargoTokens[choice1]++;
        -:  732:
        -:  733:    //trash card
    #####:  734:    discardCard(handPos, currentPlayer, state, 1);
        -:  735:
        -:  736:
    #####:  737:    return 0;
        -:  738://bug introduced: increase state->coins by 20 instead of 2, and add 2 embargo tokens instead of one
        -:  739:}
        -:  740:
        -:  741:
        -:  742:
    #####:  743:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  744:{
        -:  745:    int i;
        -:  746:    int j;
        -:  747:    int k;
        -:  748:    int x;
        -:  749:    int index;
    #####:  750:    int currentPlayer = whoseTurn(state);
    #####:  751:    int nextPlayer = currentPlayer + 1;
        -:  752:
    #####:  753:    int tributeRevealedCards[2] = {-1, -1};
        -:  754:    int temphand[MAX_HAND];// moved above the if statement
    #####:  755:    int drawntreasure=0;
    #####:  756:    int cardDrawn=0;
    #####:  757:    int z = 0;// this is the counter for the temp hand
    #####:  758:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  759:        nextPlayer = 0;
        -:  760:    }
        -:  761:
        -:  762:
        -:  763:    //uses switch to select card and perform actions
    #####:  764:    switch( card )
        -:  765:    {
        -:  766:        case adventurer:
        -:  767:
    #####:  768:            AdventurerCard(currentPlayer, state, drawntreasure, temphand, cardDrawn, z);
        -:  769:
    #####:  770:            return 0;
        -:  771:
        -:  772:        case council_room:
        -:  773:            //+4 Cards
    #####:  774:            for (i = 0; i < 4; i++)
        -:  775:            {
    #####:  776:                drawCard(currentPlayer, state);
        -:  777:            }
        -:  778:
        -:  779:            //+1 Buy
    #####:  780:            state->numBuys++;
        -:  781:
        -:  782:            //Each other player draws a card
    #####:  783:            for (i = 0; i < state->numPlayers; i++)
        -:  784:            {
    #####:  785:                if ( i != currentPlayer )
        -:  786:                {
    #####:  787:                    drawCard(i, state);
        -:  788:                }
        -:  789:            }
        -:  790:
        -:  791:            //put played card in played card pile
    #####:  792:            discardCard(handPos, currentPlayer, state, 0);
        -:  793:
    #####:  794:            return 0;
        -:  795:
        -:  796:        case feast:
        -:  797:            //gain card with cost up to 5
        -:  798:            //Backup hand
    #####:  799:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  800:                temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  801:                state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  802:            }
        -:  803:            //Backup hand
        -:  804:
        -:  805:            //Update Coins for Buy
    #####:  806:            updateCoins(currentPlayer, state, 5);
    #####:  807:            x = 1;//Condition to loop on
    #####:  808:            while( x == 1) {//Buy one card
    #####:  809:                if (supplyCount(choice1, state) <= 0){
        -:  810:                    if (DEBUG)
        -:  811:                        printf("None of that card left, sorry!\n");
        -:  812:
        -:  813:                    if (DEBUG){
        -:  814:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  815:                    }
        -:  816:                }
    #####:  817:                else if (state->coins < getCost(choice1)){
    #####:  818:                    printf("That card is too expensive!\n");
        -:  819:
        -:  820:                    if (DEBUG){
        -:  821:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  822:                    }
        -:  823:                }
        -:  824:                else{
        -:  825:
        -:  826:                    if (DEBUG){
        -:  827:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:                    }
        -:  829:
    #####:  830:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  831:                    x = 0;//No more buying cards
        -:  832:
        -:  833:                    if (DEBUG){
        -:  834:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  835:                    }
        -:  836:
        -:  837:                }
        -:  838:            }
        -:  839:
        -:  840:            //Reset Hand
    #####:  841:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  842:                state->hand[currentPlayer][i] = temphand[i];
    #####:  843:                temphand[i] = -1;
        -:  844:            }
        -:  845:            //Reset Hand
        -:  846:
    #####:  847:            return 0;
        -:  848:
        -:  849:        case gardens:
    #####:  850:            return -1;
        -:  851:
        -:  852:        case mine:
    #####:  853:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  856:            {
    #####:  857:                return -1;
        -:  858:            }
        -:  859:
    #####:  860:            if (choice2 > treasure_map || choice2 < curse)
        -:  861:            {
    #####:  862:                return -1;
        -:  863:            }
        -:  864:
    #####:  865:            if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  866:            {
    #####:  867:                return -1;
        -:  868:            }
        -:  869:
    #####:  870:            gainCard(choice2, state, 2, currentPlayer);
        -:  871:
        -:  872:            //discard card from hand
    #####:  873:            discardCard(handPos, currentPlayer, state, 0);
        -:  874:
        -:  875:            //discard trashed card
    #####:  876:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  877:            {
    #####:  878:                if (state->hand[currentPlayer][i] == j)
        -:  879:                {
    #####:  880:                    discardCard(i, currentPlayer, state, 0);
    #####:  881:                    break;
        -:  882:                }
        -:  883:            }
        -:  884:
    #####:  885:            return 0;
        -:  886:
        -:  887:        case remodel:
    #####:  888:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  889:
    #####:  890:            if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  891:            {
    #####:  892:                return -1;
        -:  893:            }
        -:  894:
    #####:  895:            gainCard(choice2, state, 0, currentPlayer);
        -:  896:
        -:  897:            //discard card from hand
    #####:  898:            discardCard(handPos, currentPlayer, state, 0);
        -:  899:
        -:  900:            //discard trashed card
    #####:  901:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  902:            {
    #####:  903:                if (state->hand[currentPlayer][i] == j)
        -:  904:                {
    #####:  905:                    discardCard(i, currentPlayer, state, 0);
    #####:  906:                    break;
        -:  907:                }
        -:  908:            }
        -:  909:
        -:  910:
    #####:  911:            return 0;
        -:  912:
        -:  913:        case smithy:
        -:  914:
    #####:  915:            SmithyCard(currentPlayer, state, handPos);
    #####:  916:            return 0;
        -:  917:
        -:  918:        case village:
        -:  919:
    #####:  920:            VillageCard(currentPlayer, state, handPos);
        -:  921:
    #####:  922:            return 0;
        -:  923:
        -:  924:        case baron:
    #####:  925:            state->numBuys++;//Increase buys by 1!
    #####:  926:            if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  927:                int p = 0;//Iterator for hand!
    #####:  928:                int card_not_discarded = 1;//Flag for discard set!
    #####:  929:                while(card_not_discarded){
    #####:  930:                    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  931:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  932:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  933:                        state->discardCount[currentPlayer]++;
    #####:  934:                        for (;p < state->handCount[currentPlayer]; p++){
    #####:  935:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  936:                        }
    #####:  937:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  938:                        state->handCount[currentPlayer]--;
    #####:  939:                        card_not_discarded = 0;//Exit the loop
        -:  940:                    }
    #####:  941:                    else if (p > state->handCount[currentPlayer]){
        -:  942:                        if(DEBUG) {
        -:  943:                            printf("No estate cards in your hand, invalid choice\n");
        -:  944:                            printf("Must gain an estate if there are any\n");
        -:  945:                        }
    #####:  946:                        if (supplyCount(estate, state) > 0){
    #####:  947:                            gainCard(estate, state, 0, currentPlayer);
    #####:  948:                            state->supplyCount[estate]--;//Decrement estates
    #####:  949:                            if (supplyCount(estate, state) == 0){
    #####:  950:                                isGameOver(state);
        -:  951:                            }
        -:  952:                        }
    #####:  953:                        card_not_discarded = 0;//Exit the loop
        -:  954:                    }
        -:  955:
        -:  956:                    else{
    #####:  957:                        p++;//Next card
        -:  958:                    }
        -:  959:                }
        -:  960:            }
        -:  961:
        -:  962:            else{
    #####:  963:                if (supplyCount(estate, state) > 0){
    #####:  964:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  965:                    state->supplyCount[estate]--;//Decrement Estates
    #####:  966:                    if (supplyCount(estate, state) == 0){
    #####:  967:                        isGameOver(state);
        -:  968:                    }
        -:  969:                }
        -:  970:            }
        -:  971:
        -:  972:
    #####:  973:            return 0;
        -:  974:
        -:  975:        case great_hall:
        -:  976:
    #####:  977:            GreatHallCard(currentPlayer, state, handPos);
        -:  978:
    #####:  979:            return 0;
        -:  980:
        -:  981:        case minion:
        -:  982:            //+1 action
    #####:  983:            state->numActions++;
        -:  984:
        -:  985:            //discard card from hand
    #####:  986:            discardCard(handPos, currentPlayer, state, 0);
        -:  987:
    #####:  988:            if (choice1)		//+2 coins
        -:  989:            {
    #####:  990:                state->coins = state->coins + 2;
        -:  991:            }
        -:  992:
    #####:  993:            else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  994:            {
        -:  995:                //discard hand
    #####:  996:                while(numHandCards(state) > 0)
        -:  997:                {
    #####:  998:                    discardCard(handPos, currentPlayer, state, 0);
        -:  999:                }
        -: 1000:
        -: 1001:                //draw 4
    #####: 1002:                for (i = 0; i < 4; i++)
        -: 1003:                {
    #####: 1004:                    drawCard(currentPlayer, state);
        -: 1005:                }
        -: 1006:
        -: 1007:                //other players discard hand and redraw if hand size > 4
    #####: 1008:                for (i = 0; i < state->numPlayers; i++)
        -: 1009:                {
    #####: 1010:                    if (i != currentPlayer)
        -: 1011:                    {
    #####: 1012:                        if ( state->handCount[i] > 4 )
        -: 1013:                        {
        -: 1014:                            //discard hand
    #####: 1015:                            while( state->handCount[i] > 0 )
        -: 1016:                            {
    #####: 1017:                                discardCard(handPos, i, state, 0);
        -: 1018:                            }
        -: 1019:
        -: 1020:                            //draw 4
    #####: 1021:                            for (j = 0; j < 4; j++)
        -: 1022:                            {
    #####: 1023:                                drawCard(i, state);
        -: 1024:                            }
        -: 1025:                        }
        -: 1026:                    }
        -: 1027:                }
        -: 1028:
        -: 1029:            }
    #####: 1030:            return 0;
        -: 1031:
        -: 1032:        case steward:
    #####: 1033:            if (choice1 == 1)
        -: 1034:            {
        -: 1035:                //+2 cards
    #####: 1036:                drawCard(currentPlayer, state);
    #####: 1037:                drawCard(currentPlayer, state);
        -: 1038:            }
    #####: 1039:            else if (choice1 == 2)
        -: 1040:            {
        -: 1041:                //+2 coins
    #####: 1042:                state->coins = state->coins + 2;
        -: 1043:            }
        -: 1044:            else
        -: 1045:            {
        -: 1046:                //trash 2 cards in hand
    #####: 1047:                discardCard(choice2, currentPlayer, state, 1);
    #####: 1048:                discardCard(choice3, currentPlayer, state, 1);
        -: 1049:            }
        -: 1050:
        -: 1051:            //discard card from hand
    #####: 1052:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1053:            return 0;
        -: 1054:
        -: 1055:        case tribute:
    #####: 1056:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1057:                if (state->deckCount[nextPlayer] > 0){
    #####: 1058:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1059:                    state->deckCount[nextPlayer]--;
        -: 1060:                }
    #####: 1061:                else if (state->discardCount[nextPlayer] > 0){
    #####: 1062:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1063:                    state->discardCount[nextPlayer]--;
        -: 1064:                }
        -: 1065:                else{
        -: 1066:                    //No Card to Reveal
        -: 1067:                    if (DEBUG){
        -: 1068:                        printf("No cards to reveal\n");
        -: 1069:                    }
        -: 1070:                }
        -: 1071:            }
        -: 1072:
        -: 1073:            else{
    #####: 1074:                if (state->deckCount[nextPlayer] == 0){
    #####: 1075:                    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1076:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1077:                        state->deckCount[nextPlayer]++;
    #####: 1078:                        state->discard[nextPlayer][i] = -1;
    #####: 1079:                        state->discardCount[nextPlayer]--;
        -: 1080:                    }
        -: 1081:
    #####: 1082:                    shuffle(nextPlayer,state);//Shuffle the deck
        -: 1083:                }
    #####: 1084:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1085:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1086:                state->deckCount[nextPlayer]--;
    #####: 1087:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1088:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1089:                state->deckCount[nextPlayer]--;
        -: 1090:            }
        -: 1091:
    #####: 1092:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1093:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1094:                state->playedCardCount++;
    #####: 1095:                tributeRevealedCards[1] = -1;
        -: 1096:            }
        -: 1097:
    #####: 1098:            for (i = 0; i <= 2; i ++){
    #####: 1099:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1100:                    state->coins += 2;
        -: 1101:                }
        -: 1102:
    #####: 1103:                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1104:                    drawCard(currentPlayer, state);
    #####: 1105:                    drawCard(currentPlayer, state);
        -: 1106:                }
        -: 1107:                else{//Action Card
    #####: 1108:                    state->numActions = state->numActions + 2;
        -: 1109:                }
        -: 1110:            }
        -: 1111:
    #####: 1112:            return 0;
        -: 1113:
        -: 1114:        case ambassador:
    #####: 1115:            j = 0;		//used to check if player has enough cards to discard
        -: 1116:
    #####: 1117:            if (choice2 > 2 || choice2 < 0)
        -: 1118:            {
    #####: 1119:                return -1;
        -: 1120:            }
        -: 1121:
    #####: 1122:            if (choice1 == handPos)
        -: 1123:            {
    #####: 1124:                return -1;
        -: 1125:            }
        -: 1126:
    #####: 1127:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1128:            {
    #####: 1129:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1130:                {
    #####: 1131:                    j++;
        -: 1132:                }
        -: 1133:            }
    #####: 1134:            if (j < choice2)
        -: 1135:            {
    #####: 1136:                return -1;
        -: 1137:            }
        -: 1138:
        -: 1139:            if (DEBUG)
        -: 1140:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1141:
        -: 1142:            //increase supply count for choosen card by amount being discarded
    #####: 1143:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1144:
        -: 1145:            //each other player gains a copy of revealed card
    #####: 1146:            for (i = 0; i < state->numPlayers; i++)
        -: 1147:            {
    #####: 1148:                if (i != currentPlayer)
        -: 1149:                {
    #####: 1150:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1151:                }
        -: 1152:            }
        -: 1153:
        -: 1154:            //discard played card from hand
    #####: 1155:            discardCard(handPos, currentPlayer, state, 0);
        -: 1156:
        -: 1157:            //trash copies of cards returned to supply
    #####: 1158:            for (j = 0; j < choice2; j++)
        -: 1159:            {
    #####: 1160:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1161:                {
    #####: 1162:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1163:                    {
    #####: 1164:                        discardCard(i, currentPlayer, state, 1);
    #####: 1165:                        break;
        -: 1166:                    }
        -: 1167:                }
        -: 1168:            }
        -: 1169:
    #####: 1170:            return 0;
        -: 1171:
        -: 1172:        case cutpurse:
        -: 1173:
    #####: 1174:            updateCoins(currentPlayer, state, 2);
    #####: 1175:            for (i = 0; i < state->numPlayers; i++)
        -: 1176:            {
    #####: 1177:                if (i != currentPlayer)
        -: 1178:                {
    #####: 1179:                    for (j = 0; j < state->handCount[i]; j++)
        -: 1180:                    {
    #####: 1181:                        if (state->hand[i][j] == copper)
        -: 1182:                        {
    #####: 1183:                            discardCard(j, i, state, 0);
    #####: 1184:                            break;
        -: 1185:                        }
    #####: 1186:                        if (j == state->handCount[i])
        -: 1187:                        {
    #####: 1188:                            for (k = 0; k < state->handCount[i]; k++)
        -: 1189:                            {
        -: 1190:                                if (DEBUG)
        -: 1191:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1192:                            }
    #####: 1193:                            break;
        -: 1194:                        }
        -: 1195:                    }
        -: 1196:
        -: 1197:                }
        -: 1198:
        -: 1199:            }
        -: 1200:
        -: 1201:            //discard played card from hand
    #####: 1202:            discardCard(handPos, currentPlayer, state, 0);
        -: 1203:
    #####: 1204:            return 0;
        -: 1205:
        -: 1206:
        -: 1207:        case embargo:
        -: 1208:
    #####: 1209:            EmbargoCard(currentPlayer, handPos, state, choice1);
    #####: 1210:            return 0;
        -: 1211:
        -: 1212:        case outpost:
        -: 1213:            //set outpost flag
    #####: 1214:            state->outpostPlayed++;
        -: 1215:
        -: 1216:            //discard card
    #####: 1217:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1218:            return 0;
        -: 1219:
        -: 1220:        case salvager:
        -: 1221:            //+1 buy
    #####: 1222:            state->numBuys++;
        -: 1223:
    #####: 1224:            if (choice1)
        -: 1225:            {
        -: 1226:                //gain coins equal to trashed card
    #####: 1227:                state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1228:                //trash card
    #####: 1229:                discardCard(choice1, currentPlayer, state, 1);
        -: 1230:            }
        -: 1231:
        -: 1232:            //discard card
    #####: 1233:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1234:            return 0;
        -: 1235:
        -: 1236:        case sea_hag:
    #####: 1237:            for (i = 0; i < state->numPlayers; i++){
    #####: 1238:                if (i != currentPlayer){
    #####: 1239:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1240:                    state->discardCount[i]++;
    #####: 1241:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1242:                }
        -: 1243:            }
    #####: 1244:            return 0;
        -: 1245:
        -: 1246:        case treasure_map:
        -: 1247:            //search hand for another treasure_map
    #####: 1248:            index = -1;
    #####: 1249:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1250:            {
    #####: 1251:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1252:                {
    #####: 1253:                    index = i;
    #####: 1254:                    break;
        -: 1255:                }
        -: 1256:            }
    #####: 1257:            if (index > -1)
        -: 1258:            {
        -: 1259:                //trash both treasure cards
    #####: 1260:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1261:                discardCard(index, currentPlayer, state, 1);
        -: 1262:
        -: 1263:                //gain 4 Gold cards
    #####: 1264:                for (i = 0; i < 4; i++)
        -: 1265:                {
    #####: 1266:                    gainCard(gold, state, 1, currentPlayer);
        -: 1267:                }
        -: 1268:
        -: 1269:                //return success
    #####: 1270:                return 1;
        -: 1271:            }
        -: 1272:
        -: 1273:            //no second treasure_map found in hand
    #####: 1274:            return -1;
        -: 1275:    }
        -: 1276:
    #####: 1277:    return -1;
        -: 1278:}
        -: 1279:
    #####: 1280:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1281:{
        -: 1282:
        -: 1283:    //if card is not trashed, added to Played pile
    #####: 1284:    if (trashFlag < 1)
        -: 1285:    {
        -: 1286:        //add card to played pile
    #####: 1287:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1288:        state->playedCardCount++;
        -: 1289:    }
        -: 1290:
        -: 1291:    //set played card to -1
    #####: 1292:    state->hand[currentPlayer][handPos] = -1;
        -: 1293:
        -: 1294:    //remove card from player's hand
    #####: 1295:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1296:    {
        -: 1297:        //reduce number of cards in hand
    #####: 1298:        state->handCount[currentPlayer]--;
        -: 1299:    }
    #####: 1300:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1301:    {
        -: 1302:        //reduce number of cards in hand
    #####: 1303:        state->handCount[currentPlayer]--;
        -: 1304:    }
        -: 1305:    else
        -: 1306:    {
        -: 1307:        //replace discarded card with last card in hand
    #####: 1308:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1309:        //set last card to -1
    #####: 1310:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1311:        //reduce number of cards in hand
    #####: 1312:        state->handCount[currentPlayer]--;
        -: 1313:    }
        -: 1314:
    #####: 1315:    return 0;
        -: 1316:}
        -: 1317:
    #####: 1318:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1319:{
        -: 1320:    //Note: supplyPos is enum of choosen card
        -: 1321:
        -: 1322:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1323:    if ( supplyCount(supplyPos, state) < 1 )
        -: 1324:    {
    #####: 1325:        return -1;
        -: 1326:    }
        -: 1327:
        -: 1328:    //added card for [whoseTurn] current player:
        -: 1329:    // toFlag = 0 : add to discard
        -: 1330:    // toFlag = 1 : add to deck
        -: 1331:    // toFlag = 2 : add to hand
        -: 1332:
    #####: 1333:    if (toFlag == 1)
        -: 1334:    {
    #####: 1335:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1336:        state->deckCount[player]++;
        -: 1337:    }
    #####: 1338:    else if (toFlag == 2)
        -: 1339:    {
    #####: 1340:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1341:        state->handCount[player]++;
        -: 1342:    }
        -: 1343:    else
        -: 1344:    {
    #####: 1345:        state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1346:        state->discardCount[player]++;
        -: 1347:    }
        -: 1348:
        -: 1349:    //decrease number in supply pile
    #####: 1350:    state->supplyCount[supplyPos]--;
        -: 1351:
    #####: 1352:    return 0;
        -: 1353:}
        -: 1354:
        1: 1355:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1356:{
        -: 1357:    int i;
        -: 1358:
        -: 1359:    //reset coin count
        1: 1360:    state->coins = 0;
        -: 1361:
        -: 1362:    //add coins for each Treasure card in player's hand
        6: 1363:    for (i = 0; i < state->handCount[player]; i++)
        -: 1364:    {
        5: 1365:        if (state->hand[player][i] == copper)
        -: 1366:        {
        4: 1367:            state->coins += 1;
        -: 1368:        }
        1: 1369:        else if (state->hand[player][i] == silver)
        -: 1370:        {
    #####: 1371:            state->coins += 2;
        -: 1372:        }
        1: 1373:        else if (state->hand[player][i] == gold)
        -: 1374:        {
    #####: 1375:            state->coins += 3;
        -: 1376:        }
        -: 1377:    }
        -: 1378:
        -: 1379:    //add bonus
        1: 1380:    state->coins += bonus;
        -: 1381:
        1: 1382:    return 0;
        -: 1383:}
        -: 1384:
        -: 1385:
        -: 1386://end of dominion.c
        -: 1387:
unittest4.c:
----------------- Testing function getCost() ----------------
The cost of curse is 0
PASSED

The cost of estate is 2
PASSED

The cost of duchy is 5
PASSED

The cost of province is 8
PASSED

The cost of copper is 0
PASSED

The cost of silver is 3
PASSED

The cost of gold is 6
PASSED

The cost of adventurer is 6
PASSED

The cost of council_room is 5
PASSED

The cost of feast is 4
PASSED

The cost of gardens is 4
PASSED

The cost of mine is 5
PASSED

The cost of remodel is 4
PASSED

The cost of smithy is 4
PASSED

The cost of village is 3
PASSED

The cost of baron is 4
PASSED

The cost of great_hall is 3
PASSED

The cost of minion is 5
PASSED

The cost of steward is 3
PASSED

The cost of tribute is 5
PASSED

The cost of ambassador is 3
PASSED

The cost of cutpurse is 4
PASSED

The cost of embargo is 2
PASSED

The cost of outpost is 5
PASSED

The cost of salvager is 4
PASSED

The cost of sea_hag is 4
PASSED

The cost of treasure_map is 4
PASSED


 >>>>> SUCCESS: Testing complete getCost() <<<<<

File 'dominion.c'
Lines executed:20.85% of 566
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void* a, const void* b) {
       30:    9:    if (*(int*)a > *(int*)b)
    #####:   10:        return 1;
       30:   11:    if (*(int*)a < *(int*)b)
        8:   12:        return -1;
       22:   13:    return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:
        -:   40:    int i;
        -:   41:    int j;
        -:   42:    int it;
        -:   43:    //set up random number generator
        1:   44:    SelectStream(1);
        1:   45:    PutSeed((long)randomSeed);
        -:   46:
        -:   47:    //check number of players
        1:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
        1:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
       11:   57:    for (i = 0; i < 10; i++)
        -:   58:    {
      110:   59:        for (j = 0; j < 10; j++)
        -:   60:        {
      100:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
        1:   73:    if (numPlayers == 2)
        -:   74:    {
        1:   75:        state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:    else if (numPlayers == 3)
        -:   78:    {
    #####:   79:        state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
        1:   87:    if (numPlayers == 2)
        -:   88:    {
        1:   89:        state->supplyCount[estate] = 8;
        1:   90:        state->supplyCount[duchy] = 8;
        1:   91:        state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:    else
        -:   94:    {
    #####:   95:        state->supplyCount[estate] = 12;
    #####:   96:        state->supplyCount[duchy] = 12;
    #####:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
        1:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:    state->supplyCount[silver] = 40;
        1:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
       21:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      165:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:        {
      155:  110:            if (kingdomCards[j] == i)
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
       10:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:                {
        4:  115:                    if (numPlayers == 2){
        2:  116:                        state->supplyCount[i] = 8;
        -:  117:                    }
    #####:  118:                    else{ state->supplyCount[i] = 12; }
        -:  119:                }
        -:  120:                else
        -:  121:                {
        8:  122:                    state->supplyCount[i] = 10;
        -:  123:                }
       10:  124:                break;
        -:  125:            }
        -:  126:            else    //card is not in the set choosen for the game
        -:  127:            {
      145:  128:                state->supplyCount[i] = -1;
        -:  129:            }
        -:  130:        }
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:    ////////////////////////
        -:  135:    //supply intilization complete
        -:  136:
        -:  137:    //set player decks
        3:  138:    for (i = 0; i < numPlayers; i++)
        -:  139:    {
        2:  140:        state->deckCount[i] = 0;
        8:  141:        for (j = 0; j < 3; j++)
        -:  142:        {
        6:  143:            state->deck[i][j] = estate;
        6:  144:            state->deckCount[i]++;
        -:  145:        }
       16:  146:        for (j = 3; j < 10; j++)
        -:  147:        {
       14:  148:            state->deck[i][j] = copper;
       14:  149:            state->deckCount[i]++;
        -:  150:        }
        -:  151:    }
        -:  152:
        -:  153:    //shuffle player decks
        3:  154:    for (i = 0; i < numPlayers; i++)
        -:  155:    {
        2:  156:        if ( shuffle(i, state) < 0 )
        -:  157:        {
    #####:  158:            return -1;
        -:  159:        }
        -:  160:    }
        -:  161:
        -:  162:    //draw player hands
        3:  163:    for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:        //initialize hand size to zero
        2:  166:        state->handCount[i] = 0;
        2:  167:        state->discardCount[i] = 0;
        -:  168:        //draw 5 cards
        -:  169:        // for (j = 0; j < 5; j++)
        -:  170:        //	{
        -:  171:        //	  drawCard(i, state);
        -:  172:        //	}
        -:  173:    }
        -:  174:
        -:  175:    //set embargo tokens to 0 for all supply piles
       28:  176:    for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       27:  178:        state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:    //initialize first player's turn
        1:  182:    state->outpostPlayed = 0;
        1:  183:    state->phase = 0;
        1:  184:    state->numActions = 1;
        1:  185:    state->numBuys = 1;
        1:  186:    state->playedCardCount = 0;
        1:  187:    state->whoseTurn = 0;
        1:  188:    state->handCount[state->whoseTurn] = 0;
        -:  189:    //int it; move to top
        -:  190:
        -:  191:    //Moved draw cards to here, only drawing at the start of a turn
        6:  192:    for (it = 0; it < 5; it++){
        5:  193:        drawCard(state->whoseTurn, state);
        -:  194:    }
        -:  195:
        1:  196:    updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:    return 0;
        -:  199:}
        -:  200:
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:    int newDeck[MAX_DECK];
        2:  205:    int newDeckPos = 0;
        -:  206:    int card;
        -:  207:    int i;
        -:  208:
        2:  209:    if (state->deckCount[player] < 1)
    #####:  210:        return -1;
        2:  211:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:    while (state->deckCount[player] > 0) {
       20:  215:        card = floor(Random() * state->deckCount[player]);
       20:  216:        newDeck[newDeckPos] = state->deck[player][card];
       20:  217:        newDeckPos++;
       59:  218:        for (i = card; i < state->deckCount[player]-1; i++) {
       39:  219:            state->deck[player][i] = state->deck[player][i+1];
        -:  220:        }
       20:  221:        state->deckCount[player]--;
        -:  222:    }
       22:  223:    for (i = 0; i < newDeckPos; i++) {
       20:  224:        state->deck[player][i] = newDeck[i];
       20:  225:        state->deckCount[player]++;
        -:  226:    }
        -:  227:
        2:  228:    return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:    int card;
    #####:  234:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:    //check if it is the right phase
    #####:  237:    if (state->phase != 0)
        -:  238:    {
    #####:  239:        return -1;
        -:  240:    }
        -:  241:
        -:  242:    //check if player has enough actions
    #####:  243:    if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:        return -1;
        -:  246:    }
        -:  247:
        -:  248:    //get card played
    #####:  249:    card = handCard(handPos, state);
        -:  250:
        -:  251:    //check if selected card is an action
    #####:  252:    if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:        return -1;
        -:  255:    }
        -:  256:
        -:  257:    //play card
    #####:  258:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:        return -1;
        -:  261:    }
        -:  262:
        -:  263:    //reduce number of actions
    #####:  264:    state->numActions--;
        -:  265:
        -:  266:    //update coins (Treasure cards may be added with card draws)
    #####:  267:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:    return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:    int who;
        -:  274:    if (DEBUG){
        -:  275:        printf("Entering buyCard...\n");
        -:  276:    }
        -:  277:
        -:  278:    // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:    who = state->whoseTurn;
        -:  281:
    #####:  282:    if (state->numBuys < 1){
        -:  283:        if (DEBUG)
        -:  284:            printf("You do not have any buys left\n");
    #####:  285:        return -1;
    #####:  286:    } else if (supplyCount(supplyPos, state) <1){
        -:  287:        if (DEBUG)
        -:  288:            printf("There are not any of that type of card left\n");
    #####:  289:        return -1;
    #####:  290:    } else if (state->coins < getCost(supplyPos)){
        -:  291:        if (DEBUG)
        -:  292:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:        return -1;
        -:  294:    } else {
    #####:  295:        state->phase=1;
        -:  296:        //state->supplyCount[supplyPos]--;
    #####:  297:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:        state->numBuys--;
        -:  301:        if (DEBUG)
        -:  302:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:    }
        -:  304:
        -:  305:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:    //state->discardCount[who]++;
        -:  307:
    #####:  308:    return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:    return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:    int currentPlayer = whoseTurn(state);
    #####:  317:    return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:    return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:    int i;
    #####:  326:    int count = 0;
        -:  327:
    #####:  328:    for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:        if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:    for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:        if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:    for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:        if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:    return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:    return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:    int k;
        -:  352:    int i;
    #####:  353:    int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:    //Discard hand
    #####:  356:    for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:    }
    #####:  360:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:    //Code for determining the player
    #####:  363:    if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:    }
        -:  366:    else{
    #####:  367:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:    }
        -:  369:
    #####:  370:    state->outpostPlayed = 0;
    #####:  371:    state->phase = 0;
    #####:  372:    state->numActions = 1;
    #####:  373:    state->coins = 0;
    #####:  374:    state->numBuys = 1;
    #####:  375:    state->playedCardCount = 0;
    #####:  376:    state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:    //int k; move to top
        -:  379:    //Next player draws hand
    #####:  380:    for (k = 0; k < 5; k++){
    #####:  381:        drawCard(state->whoseTurn, state);//Draw a card
        -:  382:    }
        -:  383:
        -:  384:    //Update money
    #####:  385:    updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:    return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:    int i;
        -:  392:    int j;
        -:  393:
        -:  394:    //if stack of Province cards is empty, the game ends
    #####:  395:    if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:        return 1;
        -:  398:    }
        -:  399:
        -:  400:    //if three supply pile are at 0, the game ends
    #####:  401:    j = 0;
    #####:  402:    for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:        if (state->supplyCount[i] == 0)
        -:  405:        {
    #####:  406:            j++;
        -:  407:        }
        -:  408:    }
    #####:  409:    if ( j >= 3)
        -:  410:    {
    #####:  411:        return 1;
        -:  412:    }
        -:  413:
    #####:  414:    return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:    int i;
    #####:  420:    int score = 0;
        -:  421:    //score from hand
    #####:  422:    for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:        if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:        if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:        if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:        if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:        if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:    //score from discard
    #####:  433:    for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:        if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:        if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:        if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:        if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:        if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:    //score from deck
    #####:  444:    for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:        if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:        if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:        if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:        if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:        if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:    return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:    int i;
        -:  459:    int j;
        -:  460:    int highScore;
        -:  461:    int currentPlayer;
        -:  462:
        -:  463:    //get score for each player
    #####:  464:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:        //set unused player scores to -9999
    #####:  467:        if (i >= state->numPlayers)
        -:  468:        {
    #####:  469:            players[i] = -9999;
        -:  470:        }
        -:  471:        else
        -:  472:        {
    #####:  473:            players[i] = scoreFor (i, state);
        -:  474:        }
        -:  475:    }
        -:  476:
        -:  477:    //find highest score
    #####:  478:    j = 0;
    #####:  479:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:        if (players[i] > players[j])
        -:  482:        {
    #####:  483:            j = i;
        -:  484:        }
        -:  485:    }
    #####:  486:    highScore = players[j];
        -:  487:
        -:  488:    //add 1 to players who had less turns
    #####:  489:    currentPlayer = whoseTurn(state);
    #####:  490:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:        if ( players[i] == highScore && i > currentPlayer )
        -:  493:        {
    #####:  494:            players[i]++;
        -:  495:        }
        -:  496:    }
        -:  497:
        -:  498:    //find new highest score
    #####:  499:    j = 0;
    #####:  500:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:        if ( players[i] > players[j] )
        -:  503:        {
    #####:  504:            j = i;
        -:  505:        }
        -:  506:    }
    #####:  507:    highScore = players[j];
        -:  508:
        -:  509:    //set winners in array to 1 and rest to 0
    #####:  510:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:        if ( players[i] == highScore )
        -:  513:        {
    #####:  514:            players[i] = 1;
        -:  515:        }
        -:  516:        else
        -:  517:        {
    #####:  518:            players[i] = 0;
        -:  519:        }
        -:  520:    }
        -:  521:
    #####:  522:    return 0;
        -:  523:}
        -:  524:
        5:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:    int deckCounter;
        5:  528:    if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:        //Step 1 Shuffle the discard pile back into a deck
        -:  531:        int i;
        -:  532:        //Move discard to deck
    #####:  533:        for (i = 0; i < state->discardCount[player];i++){
    #####:  534:            state->deck[player][i] = state->discard[player][i];
    #####:  535:            state->discard[player][i] = -1;
        -:  536:        }
        -:  537:
    #####:  538:        state->deckCount[player] = state->discardCount[player];
    #####:  539:        state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:        //Shufffle the deck
    #####:  542:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:        if (DEBUG){//Debug statements
        -:  545:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:        }
        -:  547:
    #####:  548:        state->discardCount[player] = 0;
        -:  549:
        -:  550:        //Step 2 Draw Card
    #####:  551:        count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:        if (DEBUG){//Debug statements
        -:  554:            printf("Current hand count: %d\n", count);
        -:  555:        }
        -:  556:
    #####:  557:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:        if (deckCounter == 0)
    #####:  560:            return -1;
        -:  561:
    #####:  562:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:        state->deckCount[player]--;
    #####:  564:        state->handCount[player]++;//Increment hand count
        -:  565:    }
        -:  566:
        -:  567:    else{
        5:  568:        int count = state->handCount[player];//Get current hand count for player
        -:  569:        int deckCounter;
        -:  570:        if (DEBUG){//Debug statements
        -:  571:            printf("Current hand count: %d\n", count);
        -:  572:        }
        -:  573:
        5:  574:        deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  575:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  576:        state->deckCount[player]--;
        5:  577:        state->handCount[player]++;//Increment hand count
        -:  578:    }
        -:  579:
        5:  580:    return 0;
        -:  581:}
        -:  582:
       27:  583:int getCost(int cardNumber)
        -:  584:{
       27:  585:    switch( cardNumber )
        -:  586:    {
        -:  587:        case curse:
        1:  588:            return 0;
        -:  589:        case estate:
        1:  590:            return 2;
        -:  591:        case duchy:
        1:  592:            return 5;
        -:  593:        case province:
        1:  594:            return 8;
        -:  595:        case copper:
        1:  596:            return 0;
        -:  597:        case silver:
        1:  598:            return 3;
        -:  599:        case gold:
        1:  600:            return 6;
        -:  601:        case adventurer:
        1:  602:            return 6;
        -:  603:        case council_room:
        1:  604:            return 5;
        -:  605:        case feast:
        1:  606:            return 4;
        -:  607:        case gardens:
        1:  608:            return 4;
        -:  609:        case mine:
        1:  610:            return 5;
        -:  611:        case remodel:
        1:  612:            return 4;
        -:  613:        case smithy:
        1:  614:            return 4;
        -:  615:        case village:
        1:  616:            return 3;
        -:  617:        case baron:
        1:  618:            return 4;
        -:  619:        case great_hall:
        1:  620:            return 3;
        -:  621:        case minion:
        1:  622:            return 5;
        -:  623:        case steward:
        1:  624:            return 3;
        -:  625:        case tribute:
        1:  626:            return 5;
        -:  627:        case ambassador:
        1:  628:            return 3;
        -:  629:        case cutpurse:
        1:  630:            return 4;
        -:  631:        case embargo:
        1:  632:            return 2;
        -:  633:        case outpost:
        1:  634:            return 5;
        -:  635:        case salvager:
        1:  636:            return 4;
        -:  637:        case sea_hag:
        1:  638:            return 4;
        -:  639:        case treasure_map:
        1:  640:            return 4;
        -:  641:    }
        -:  642:
    #####:  643:    return -1;
        -:  644:}
        -:  645:
        -:  646:
        -:  647:
    #####:  648:int SmithyCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  649:
        -:  650:    //+3 Cards
        -:  651:    int i;
    #####:  652:    for (i = 0; i < 5; i++)
        -:  653:    {
    #####:  654:        drawCard(currentPlayer, state);
        -:  655:    }
        -:  656:
        -:  657:    //discard card from hand
        -:  658:    //discardCard(handPos, currentPlayer, state, 0);
    #####:  659:    return 0;
        -:  660://bug introduced: draw 5 cards instead of 3; do not discard a card
        -:  661:}
        -:  662:
        -:  663:
    #####:  664:int AdventurerCard(int currentPlayer, struct gameState *state, int drawntreasure, int temphand[], int cardDrawn, int z) {
        -:  665:
    #####:  666:    while(drawntreasure<5){
    #####:  667:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  668:            shuffle(currentPlayer, state);
        -:  669:        }
    #####:  670:        drawCard(currentPlayer, state);
    #####:  671:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  672:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  673:            drawntreasure++;
        -:  674:        else{
    #####:  675:            temphand[z]=cardDrawn;
    #####:  676:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  677:            z++;
        -:  678:        }
        -:  679:    }
    #####:  680:    while(z-1>=0){
    #####:  681:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  682:        z=z-1;
        -:  683:    }
    #####:  684:    return 0;
        -:  685:// bug introduced: player is able to draw 5 treasure cards instead of 2.
        -:  686:}
        -:  687:
        -:  688:
    #####:  689:int VillageCard(int currentPlayer, struct gameState *state, int handPos){
        -:  690:
        -:  691:    //+1 Card
    #####:  692:    drawCard(currentPlayer, state);
    #####:  693:    drawCard(currentPlayer, state);
    #####:  694:    drawCard(currentPlayer, state);
        -:  695:
        -:  696:    //+2 Actions
    #####:  697:    state->numActions = state->numActions + 10;
        -:  698:
        -:  699:    //discard played card from hand
    #####:  700:    discardCard(handPos, currentPlayer, state, 0);
    #####:  701:    return 0;
        -:  702:// bug introduced: increase action points by 10 instead of 2 and draw 3 cards instead of 1
        -:  703:}
        -:  704:
        -:  705:
    #####:  706:int GreatHallCard(int currentPlayer, struct gameState *state, int handPos){
        -:  707:    //+1 Card
    #####:  708:    drawCard(currentPlayer, state);
        -:  709:
        -:  710:    //+1 Actions
    #####:  711:    state->numActions++;
        -:  712:
        -:  713:    //discard card from hand
    #####:  714:    discardCard(handPos, currentPlayer, state, 0);
    #####:  715:    return 0;
        -:  716:}
        -:  717:
        -:  718:
    #####:  719:int EmbargoCard(int currentPlayer, int handPos, struct gameState *state, int choice1) {
        -:  720://+2 Coins
    #####:  721:    state->coins = state->coins + 20;
        -:  722:
        -:  723:    //see if selected pile is in play
    #####:  724:    if ( state->supplyCount[choice1] == -1 )
        -:  725:    {
    #####:  726:        return -1;
        -:  727:    }
        -:  728:
        -:  729:    //add embargo token to selected supply pile
    #####:  730:    state->embargoTokens[choice1]++;
    #####:  731:    state->embargoTokens[choice1]++;
        -:  732:
        -:  733:    //trash card
    #####:  734:    discardCard(handPos, currentPlayer, state, 1);
        -:  735:
        -:  736:
    #####:  737:    return 0;
        -:  738://bug introduced: increase state->coins by 20 instead of 2, and add 2 embargo tokens instead of one
        -:  739:}
        -:  740:
        -:  741:
        -:  742:
    #####:  743:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  744:{
        -:  745:    int i;
        -:  746:    int j;
        -:  747:    int k;
        -:  748:    int x;
        -:  749:    int index;
    #####:  750:    int currentPlayer = whoseTurn(state);
    #####:  751:    int nextPlayer = currentPlayer + 1;
        -:  752:
    #####:  753:    int tributeRevealedCards[2] = {-1, -1};
        -:  754:    int temphand[MAX_HAND];// moved above the if statement
    #####:  755:    int drawntreasure=0;
    #####:  756:    int cardDrawn=0;
    #####:  757:    int z = 0;// this is the counter for the temp hand
    #####:  758:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  759:        nextPlayer = 0;
        -:  760:    }
        -:  761:
        -:  762:
        -:  763:    //uses switch to select card and perform actions
    #####:  764:    switch( card )
        -:  765:    {
        -:  766:        case adventurer:
        -:  767:
    #####:  768:            AdventurerCard(currentPlayer, state, drawntreasure, temphand, cardDrawn, z);
        -:  769:
    #####:  770:            return 0;
        -:  771:
        -:  772:        case council_room:
        -:  773:            //+4 Cards
    #####:  774:            for (i = 0; i < 4; i++)
        -:  775:            {
    #####:  776:                drawCard(currentPlayer, state);
        -:  777:            }
        -:  778:
        -:  779:            //+1 Buy
    #####:  780:            state->numBuys++;
        -:  781:
        -:  782:            //Each other player draws a card
    #####:  783:            for (i = 0; i < state->numPlayers; i++)
        -:  784:            {
    #####:  785:                if ( i != currentPlayer )
        -:  786:                {
    #####:  787:                    drawCard(i, state);
        -:  788:                }
        -:  789:            }
        -:  790:
        -:  791:            //put played card in played card pile
    #####:  792:            discardCard(handPos, currentPlayer, state, 0);
        -:  793:
    #####:  794:            return 0;
        -:  795:
        -:  796:        case feast:
        -:  797:            //gain card with cost up to 5
        -:  798:            //Backup hand
    #####:  799:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  800:                temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  801:                state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  802:            }
        -:  803:            //Backup hand
        -:  804:
        -:  805:            //Update Coins for Buy
    #####:  806:            updateCoins(currentPlayer, state, 5);
    #####:  807:            x = 1;//Condition to loop on
    #####:  808:            while( x == 1) {//Buy one card
    #####:  809:                if (supplyCount(choice1, state) <= 0){
        -:  810:                    if (DEBUG)
        -:  811:                        printf("None of that card left, sorry!\n");
        -:  812:
        -:  813:                    if (DEBUG){
        -:  814:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  815:                    }
        -:  816:                }
    #####:  817:                else if (state->coins < getCost(choice1)){
    #####:  818:                    printf("That card is too expensive!\n");
        -:  819:
        -:  820:                    if (DEBUG){
        -:  821:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  822:                    }
        -:  823:                }
        -:  824:                else{
        -:  825:
        -:  826:                    if (DEBUG){
        -:  827:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  828:                    }
        -:  829:
    #####:  830:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  831:                    x = 0;//No more buying cards
        -:  832:
        -:  833:                    if (DEBUG){
        -:  834:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  835:                    }
        -:  836:
        -:  837:                }
        -:  838:            }
        -:  839:
        -:  840:            //Reset Hand
    #####:  841:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  842:                state->hand[currentPlayer][i] = temphand[i];
    #####:  843:                temphand[i] = -1;
        -:  844:            }
        -:  845:            //Reset Hand
        -:  846:
    #####:  847:            return 0;
        -:  848:
        -:  849:        case gardens:
    #####:  850:            return -1;
        -:  851:
        -:  852:        case mine:
    #####:  853:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  854:
    #####:  855:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  856:            {
    #####:  857:                return -1;
        -:  858:            }
        -:  859:
    #####:  860:            if (choice2 > treasure_map || choice2 < curse)
        -:  861:            {
    #####:  862:                return -1;
        -:  863:            }
        -:  864:
    #####:  865:            if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  866:            {
    #####:  867:                return -1;
        -:  868:            }
        -:  869:
    #####:  870:            gainCard(choice2, state, 2, currentPlayer);
        -:  871:
        -:  872:            //discard card from hand
    #####:  873:            discardCard(handPos, currentPlayer, state, 0);
        -:  874:
        -:  875:            //discard trashed card
    #####:  876:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  877:            {
    #####:  878:                if (state->hand[currentPlayer][i] == j)
        -:  879:                {
    #####:  880:                    discardCard(i, currentPlayer, state, 0);
    #####:  881:                    break;
        -:  882:                }
        -:  883:            }
        -:  884:
    #####:  885:            return 0;
        -:  886:
        -:  887:        case remodel:
    #####:  888:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  889:
    #####:  890:            if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  891:            {
    #####:  892:                return -1;
        -:  893:            }
        -:  894:
    #####:  895:            gainCard(choice2, state, 0, currentPlayer);
        -:  896:
        -:  897:            //discard card from hand
    #####:  898:            discardCard(handPos, currentPlayer, state, 0);
        -:  899:
        -:  900:            //discard trashed card
    #####:  901:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  902:            {
    #####:  903:                if (state->hand[currentPlayer][i] == j)
        -:  904:                {
    #####:  905:                    discardCard(i, currentPlayer, state, 0);
    #####:  906:                    break;
        -:  907:                }
        -:  908:            }
        -:  909:
        -:  910:
    #####:  911:            return 0;
        -:  912:
        -:  913:        case smithy:
        -:  914:
    #####:  915:            SmithyCard(currentPlayer, state, handPos);
    #####:  916:            return 0;
        -:  917:
        -:  918:        case village:
        -:  919:
    #####:  920:            VillageCard(currentPlayer, state, handPos);
        -:  921:
    #####:  922:            return 0;
        -:  923:
        -:  924:        case baron:
    #####:  925:            state->numBuys++;//Increase buys by 1!
    #####:  926:            if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  927:                int p = 0;//Iterator for hand!
    #####:  928:                int card_not_discarded = 1;//Flag for discard set!
    #####:  929:                while(card_not_discarded){
    #####:  930:                    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  931:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  932:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  933:                        state->discardCount[currentPlayer]++;
    #####:  934:                        for (;p < state->handCount[currentPlayer]; p++){
    #####:  935:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  936:                        }
    #####:  937:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  938:                        state->handCount[currentPlayer]--;
    #####:  939:                        card_not_discarded = 0;//Exit the loop
        -:  940:                    }
    #####:  941:                    else if (p > state->handCount[currentPlayer]){
        -:  942:                        if(DEBUG) {
        -:  943:                            printf("No estate cards in your hand, invalid choice\n");
        -:  944:                            printf("Must gain an estate if there are any\n");
        -:  945:                        }
    #####:  946:                        if (supplyCount(estate, state) > 0){
    #####:  947:                            gainCard(estate, state, 0, currentPlayer);
    #####:  948:                            state->supplyCount[estate]--;//Decrement estates
    #####:  949:                            if (supplyCount(estate, state) == 0){
    #####:  950:                                isGameOver(state);
        -:  951:                            }
        -:  952:                        }
    #####:  953:                        card_not_discarded = 0;//Exit the loop
        -:  954:                    }
        -:  955:
        -:  956:                    else{
    #####:  957:                        p++;//Next card
        -:  958:                    }
        -:  959:                }
        -:  960:            }
        -:  961:
        -:  962:            else{
    #####:  963:                if (supplyCount(estate, state) > 0){
    #####:  964:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  965:                    state->supplyCount[estate]--;//Decrement Estates
    #####:  966:                    if (supplyCount(estate, state) == 0){
    #####:  967:                        isGameOver(state);
        -:  968:                    }
        -:  969:                }
        -:  970:            }
        -:  971:
        -:  972:
    #####:  973:            return 0;
        -:  974:
        -:  975:        case great_hall:
        -:  976:
    #####:  977:            GreatHallCard(currentPlayer, state, handPos);
        -:  978:
    #####:  979:            return 0;
        -:  980:
        -:  981:        case minion:
        -:  982:            //+1 action
    #####:  983:            state->numActions++;
        -:  984:
        -:  985:            //discard card from hand
    #####:  986:            discardCard(handPos, currentPlayer, state, 0);
        -:  987:
    #####:  988:            if (choice1)		//+2 coins
        -:  989:            {
    #####:  990:                state->coins = state->coins + 2;
        -:  991:            }
        -:  992:
    #####:  993:            else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  994:            {
        -:  995:                //discard hand
    #####:  996:                while(numHandCards(state) > 0)
        -:  997:                {
    #####:  998:                    discardCard(handPos, currentPlayer, state, 0);
        -:  999:                }
        -: 1000:
        -: 1001:                //draw 4
    #####: 1002:                for (i = 0; i < 4; i++)
        -: 1003:                {
    #####: 1004:                    drawCard(currentPlayer, state);
        -: 1005:                }
        -: 1006:
        -: 1007:                //other players discard hand and redraw if hand size > 4
    #####: 1008:                for (i = 0; i < state->numPlayers; i++)
        -: 1009:                {
    #####: 1010:                    if (i != currentPlayer)
        -: 1011:                    {
    #####: 1012:                        if ( state->handCount[i] > 4 )
        -: 1013:                        {
        -: 1014:                            //discard hand
    #####: 1015:                            while( state->handCount[i] > 0 )
        -: 1016:                            {
    #####: 1017:                                discardCard(handPos, i, state, 0);
        -: 1018:                            }
        -: 1019:
        -: 1020:                            //draw 4
    #####: 1021:                            for (j = 0; j < 4; j++)
        -: 1022:                            {
    #####: 1023:                                drawCard(i, state);
        -: 1024:                            }
        -: 1025:                        }
        -: 1026:                    }
        -: 1027:                }
        -: 1028:
        -: 1029:            }
    #####: 1030:            return 0;
        -: 1031:
        -: 1032:        case steward:
    #####: 1033:            if (choice1 == 1)
        -: 1034:            {
        -: 1035:                //+2 cards
    #####: 1036:                drawCard(currentPlayer, state);
    #####: 1037:                drawCard(currentPlayer, state);
        -: 1038:            }
    #####: 1039:            else if (choice1 == 2)
        -: 1040:            {
        -: 1041:                //+2 coins
    #####: 1042:                state->coins = state->coins + 2;
        -: 1043:            }
        -: 1044:            else
        -: 1045:            {
        -: 1046:                //trash 2 cards in hand
    #####: 1047:                discardCard(choice2, currentPlayer, state, 1);
    #####: 1048:                discardCard(choice3, currentPlayer, state, 1);
        -: 1049:            }
        -: 1050:
        -: 1051:            //discard card from hand
    #####: 1052:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1053:            return 0;
        -: 1054:
        -: 1055:        case tribute:
    #####: 1056:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1057:                if (state->deckCount[nextPlayer] > 0){
    #####: 1058:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1059:                    state->deckCount[nextPlayer]--;
        -: 1060:                }
    #####: 1061:                else if (state->discardCount[nextPlayer] > 0){
    #####: 1062:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1063:                    state->discardCount[nextPlayer]--;
        -: 1064:                }
        -: 1065:                else{
        -: 1066:                    //No Card to Reveal
        -: 1067:                    if (DEBUG){
        -: 1068:                        printf("No cards to reveal\n");
        -: 1069:                    }
        -: 1070:                }
        -: 1071:            }
        -: 1072:
        -: 1073:            else{
    #####: 1074:                if (state->deckCount[nextPlayer] == 0){
    #####: 1075:                    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1076:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1077:                        state->deckCount[nextPlayer]++;
    #####: 1078:                        state->discard[nextPlayer][i] = -1;
    #####: 1079:                        state->discardCount[nextPlayer]--;
        -: 1080:                    }
        -: 1081:
    #####: 1082:                    shuffle(nextPlayer,state);//Shuffle the deck
        -: 1083:                }
    #####: 1084:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1085:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1086:                state->deckCount[nextPlayer]--;
    #####: 1087:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1088:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1089:                state->deckCount[nextPlayer]--;
        -: 1090:            }
        -: 1091:
    #####: 1092:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1093:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1094:                state->playedCardCount++;
    #####: 1095:                tributeRevealedCards[1] = -1;
        -: 1096:            }
        -: 1097:
    #####: 1098:            for (i = 0; i <= 2; i ++){
    #####: 1099:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1100:                    state->coins += 2;
        -: 1101:                }
        -: 1102:
    #####: 1103:                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1104:                    drawCard(currentPlayer, state);
    #####: 1105:                    drawCard(currentPlayer, state);
        -: 1106:                }
        -: 1107:                else{//Action Card
    #####: 1108:                    state->numActions = state->numActions + 2;
        -: 1109:                }
        -: 1110:            }
        -: 1111:
    #####: 1112:            return 0;
        -: 1113:
        -: 1114:        case ambassador:
    #####: 1115:            j = 0;		//used to check if player has enough cards to discard
        -: 1116:
    #####: 1117:            if (choice2 > 2 || choice2 < 0)
        -: 1118:            {
    #####: 1119:                return -1;
        -: 1120:            }
        -: 1121:
    #####: 1122:            if (choice1 == handPos)
        -: 1123:            {
    #####: 1124:                return -1;
        -: 1125:            }
        -: 1126:
    #####: 1127:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1128:            {
    #####: 1129:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1130:                {
    #####: 1131:                    j++;
        -: 1132:                }
        -: 1133:            }
    #####: 1134:            if (j < choice2)
        -: 1135:            {
    #####: 1136:                return -1;
        -: 1137:            }
        -: 1138:
        -: 1139:            if (DEBUG)
        -: 1140:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1141:
        -: 1142:            //increase supply count for choosen card by amount being discarded
    #####: 1143:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1144:
        -: 1145:            //each other player gains a copy of revealed card
    #####: 1146:            for (i = 0; i < state->numPlayers; i++)
        -: 1147:            {
    #####: 1148:                if (i != currentPlayer)
        -: 1149:                {
    #####: 1150:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1151:                }
        -: 1152:            }
        -: 1153:
        -: 1154:            //discard played card from hand
    #####: 1155:            discardCard(handPos, currentPlayer, state, 0);
        -: 1156:
        -: 1157:            //trash copies of cards returned to supply
    #####: 1158:            for (j = 0; j < choice2; j++)
        -: 1159:            {
    #####: 1160:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1161:                {
    #####: 1162:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1163:                    {
    #####: 1164:                        discardCard(i, currentPlayer, state, 1);
    #####: 1165:                        break;
        -: 1166:                    }
        -: 1167:                }
        -: 1168:            }
        -: 1169:
    #####: 1170:            return 0;
        -: 1171:
        -: 1172:        case cutpurse:
        -: 1173:
    #####: 1174:            updateCoins(currentPlayer, state, 2);
    #####: 1175:            for (i = 0; i < state->numPlayers; i++)
        -: 1176:            {
    #####: 1177:                if (i != currentPlayer)
        -: 1178:                {
    #####: 1179:                    for (j = 0; j < state->handCount[i]; j++)
        -: 1180:                    {
    #####: 1181:                        if (state->hand[i][j] == copper)
        -: 1182:                        {
    #####: 1183:                            discardCard(j, i, state, 0);
    #####: 1184:                            break;
        -: 1185:                        }
    #####: 1186:                        if (j == state->handCount[i])
        -: 1187:                        {
    #####: 1188:                            for (k = 0; k < state->handCount[i]; k++)
        -: 1189:                            {
        -: 1190:                                if (DEBUG)
        -: 1191:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1192:                            }
    #####: 1193:                            break;
        -: 1194:                        }
        -: 1195:                    }
        -: 1196:
        -: 1197:                }
        -: 1198:
        -: 1199:            }
        -: 1200:
        -: 1201:            //discard played card from hand
    #####: 1202:            discardCard(handPos, currentPlayer, state, 0);
        -: 1203:
    #####: 1204:            return 0;
        -: 1205:
        -: 1206:
        -: 1207:        case embargo:
        -: 1208:
    #####: 1209:            EmbargoCard(currentPlayer, handPos, state, choice1);
    #####: 1210:            return 0;
        -: 1211:
        -: 1212:        case outpost:
        -: 1213:            //set outpost flag
    #####: 1214:            state->outpostPlayed++;
        -: 1215:
        -: 1216:            //discard card
    #####: 1217:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1218:            return 0;
        -: 1219:
        -: 1220:        case salvager:
        -: 1221:            //+1 buy
    #####: 1222:            state->numBuys++;
        -: 1223:
    #####: 1224:            if (choice1)
        -: 1225:            {
        -: 1226:                //gain coins equal to trashed card
    #####: 1227:                state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1228:                //trash card
    #####: 1229:                discardCard(choice1, currentPlayer, state, 1);
        -: 1230:            }
        -: 1231:
        -: 1232:            //discard card
    #####: 1233:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1234:            return 0;
        -: 1235:
        -: 1236:        case sea_hag:
    #####: 1237:            for (i = 0; i < state->numPlayers; i++){
    #####: 1238:                if (i != currentPlayer){
    #####: 1239:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1240:                    state->discardCount[i]++;
    #####: 1241:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1242:                }
        -: 1243:            }
    #####: 1244:            return 0;
        -: 1245:
        -: 1246:        case treasure_map:
        -: 1247:            //search hand for another treasure_map
    #####: 1248:            index = -1;
    #####: 1249:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1250:            {
    #####: 1251:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1252:                {
    #####: 1253:                    index = i;
    #####: 1254:                    break;
        -: 1255:                }
        -: 1256:            }
    #####: 1257:            if (index > -1)
        -: 1258:            {
        -: 1259:                //trash both treasure cards
    #####: 1260:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1261:                discardCard(index, currentPlayer, state, 1);
        -: 1262:
        -: 1263:                //gain 4 Gold cards
    #####: 1264:                for (i = 0; i < 4; i++)
        -: 1265:                {
    #####: 1266:                    gainCard(gold, state, 1, currentPlayer);
        -: 1267:                }
        -: 1268:
        -: 1269:                //return success
    #####: 1270:                return 1;
        -: 1271:            }
        -: 1272:
        -: 1273:            //no second treasure_map found in hand
    #####: 1274:            return -1;
        -: 1275:    }
        -: 1276:
    #####: 1277:    return -1;
        -: 1278:}
        -: 1279:
    #####: 1280:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1281:{
        -: 1282:
        -: 1283:    //if card is not trashed, added to Played pile
    #####: 1284:    if (trashFlag < 1)
        -: 1285:    {
        -: 1286:        //add card to played pile
    #####: 1287:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1288:        state->playedCardCount++;
        -: 1289:    }
        -: 1290:
        -: 1291:    //set played card to -1
    #####: 1292:    state->hand[currentPlayer][handPos] = -1;
        -: 1293:
        -: 1294:    //remove card from player's hand
    #####: 1295:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1296:    {
        -: 1297:        //reduce number of cards in hand
    #####: 1298:        state->handCount[currentPlayer]--;
        -: 1299:    }
    #####: 1300:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1301:    {
        -: 1302:        //reduce number of cards in hand
    #####: 1303:        state->handCount[currentPlayer]--;
        -: 1304:    }
        -: 1305:    else
        -: 1306:    {
        -: 1307:        //replace discarded card with last card in hand
    #####: 1308:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1309:        //set last card to -1
    #####: 1310:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1311:        //reduce number of cards in hand
    #####: 1312:        state->handCount[currentPlayer]--;
        -: 1313:    }
        -: 1314:
    #####: 1315:    return 0;
        -: 1316:}
        -: 1317:
    #####: 1318:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1319:{
        -: 1320:    //Note: supplyPos is enum of choosen card
        -: 1321:
        -: 1322:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1323:    if ( supplyCount(supplyPos, state) < 1 )
        -: 1324:    {
    #####: 1325:        return -1;
        -: 1326:    }
        -: 1327:
        -: 1328:    //added card for [whoseTurn] current player:
        -: 1329:    // toFlag = 0 : add to discard
        -: 1330:    // toFlag = 1 : add to deck
        -: 1331:    // toFlag = 2 : add to hand
        -: 1332:
    #####: 1333:    if (toFlag == 1)
        -: 1334:    {
    #####: 1335:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1336:        state->deckCount[player]++;
        -: 1337:    }
    #####: 1338:    else if (toFlag == 2)
        -: 1339:    {
    #####: 1340:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1341:        state->handCount[player]++;
        -: 1342:    }
        -: 1343:    else
        -: 1344:    {
    #####: 1345:        state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1346:        state->discardCount[player]++;
        -: 1347:    }
        -: 1348:
        -: 1349:    //decrease number in supply pile
    #####: 1350:    state->supplyCount[supplyPos]--;
        -: 1351:
    #####: 1352:    return 0;
        -: 1353:}
        -: 1354:
        1: 1355:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1356:{
        -: 1357:    int i;
        -: 1358:
        -: 1359:    //reset coin count
        1: 1360:    state->coins = 0;
        -: 1361:
        -: 1362:    //add coins for each Treasure card in player's hand
        6: 1363:    for (i = 0; i < state->handCount[player]; i++)
        -: 1364:    {
        5: 1365:        if (state->hand[player][i] == copper)
        -: 1366:        {
        4: 1367:            state->coins += 1;
        -: 1368:        }
        1: 1369:        else if (state->hand[player][i] == silver)
        -: 1370:        {
    #####: 1371:            state->coins += 2;
        -: 1372:        }
        1: 1373:        else if (state->hand[player][i] == gold)
        -: 1374:        {
    #####: 1375:            state->coins += 3;
        -: 1376:        }
        -: 1377:    }
        -: 1378:
        -: 1379:    //add bonus
        1: 1380:    state->coins += bonus;
        -: 1381:
        1: 1382:    return 0;
        -: 1383:}
        -: 1384:
        -: 1385:
        -: 1386://end of dominion.c
        -: 1387:
